<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fast | 网络书屋(Web Reading Room)]]></title>
  <link href="http://jueqingsizhe66.github.io/blog/categories/fast/atom.xml" rel="self"/>
  <link href="http://jueqingsizhe66.github.io/"/>
  <updated>2017-08-13T11:41:34+08:00</updated>
  <id>http://jueqingsizhe66.github.io/</id>
  <author>
    <name><![CDATA[Ye Zhaoliang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows FAST0816编译失败]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai/"/>
    <updated>2017-07-05T17:13:57+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai</id>
    <content type="html"><![CDATA[<p>在之前的fast使用中一直没有碰到编译proj file失败的事情，但再816却出现了，于是添加了额外的编译debug路径，解决了
问题。</p>

<!--more-->


<p><img src="/images/fast/fast816.png" alt="pic" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu17.04 Install FAST8.16]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16/"/>
    <updated>2017-05-19T15:05:44+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16</id>
    <content type="html"><![CDATA[<p>Something Noted in the process of installation FAST8.16 in the 32bit ubuntu17.04 system.</p>

<!--more-->


<h3>1. Download <a href="https://nwtc.nrel.gov/FAST8"> Fast8.16</a> and decompress</h3>

<p>```
mkdir FAST-816
cd FAST-816
mv FAST<em>.tar.gz FAST-816
tar -xvf FAST</em>.tar.gz</p>

<p>```</p>

<h3>2. Download <a href="https://nwtc.nrel.gov/system/files/MAP_v1.20.10.tar.gz"> Map </a> for generating map.so and decompress</h3>

<p>FAST_DIR 告诉MAP FAST项目存在哪里
```
cd FAST-816
mkdir LIBMAP
cd LIBMAP
mv ../../<em>.MAP</em>.tar.gz .
tar -xvf <em>MAP</em>.tar.gz</p>

<p>cd compiling
vim driver_makefile&lt;&lt;EOF</p>

<p>&mdash;&mdash;&ndash; FAST_DIR     = ../Source
+++++ FAST_DIR     = /paper/FAST-816/</p>

<p>EOF</p>

<p>cd ../src/</p>

<p>vim makefile&lt;&lt;EOF</p>

<p>&mdash;&mdash;&ndash; BITS = -m64
+++++ BITS = -m32  32bit系统</p>

<p>EOF</p>

<p>make#################something error here
```</p>

<h3>make Libmap.so something error here</h3>

<p>```
a.o mapinit.o maperror.o lineroutines.o numeric.o outputstream.o mapapi.o lmroutines.o jacobian.o residual.o  -lm -llapacke
/usr/bin/ld: 找不到 -llapacke
/usr/bin/ld: 找不到 -llapacke
collect2: error: ld returned 1 exit status
makefile:81: recipe for target &lsquo;all&rsquo; failed
make: *** [all] Error 1</p>

<p>```</p>

<p><a href="http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/">fixed it</a>:</p>

<p><code>
apt-get install lapacke-dev*
</code></p>

<h3>make again</h3>

<p>```
make ### OK generate libmap-1.2.so</p>

<p>mkdir /paper/FAST-816/bin
cp libmap-1.20.10.so /paper/FAST-816/bin</p>

<p>```</p>

<h3>3. Now Install FAST</h3>

<p><code>
cd /paper/FAST-816/compiling/
make
make -f makefile_DISCON_DLL ## for Test18-26.fst case
</code></p>

<p><strong>gcc -fbacktrack FAST_Subs 可能再gcc-6会有点问题，部分f90文件得删除该选项</strong>
删掉-fbacktrace测试通过
```
 2 ❯ make
gfortran -I Obj_lin32 -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -DNO_LibLoad -DUSE_DLL_INTERFACE -c ../Source/FAST_Subs.f90 -o Obj_lin32/FAST_Subs.o -J Obj_lin32 -B Obj_lin32
gfortran: internal compiler error: 已杀死 (program f951)
Please submit a full bug report,
with preprocessed source if appropriate.
See &lt;file:///usr/share/doc/gcc-6/README.Bugs> for instructions.
makefile:416: recipe for target &lsquo;FAST_Subs.o&rsquo; failed
make: *** [FAST_Subs.o] Error 4</p>

<p>```</p>

<h3>4. Run Test1-18.fst</h3>

<p>You can go to /paper/FAST-816/bin to check whether FAST_Glin32 and libmap.so have been generated or not</p>

<p>```
cd /paper/FAST-816/bin</p>

<p>```</p>

<p>```
❯ ./FAST_glin32 ../CertTest/Test02.fst</p>

<hr />

<p> FAST (v8.16.00a-bjj, 27-Jul-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.16.00a-bjj, 27-Jul-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.09.00, 23-Jul-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind
</code></pre>

<p>  Running ElastoDyn (v1.04.00a-bjj, 26-Jul-2016).</p>

<p>  Running AeroDyn (v15.03.00, 27-Jul-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.02.00, 29-Jun-2016).</p>

<p>  Running InflowWind (v3.03.00, 26-Jul-2016).
  Opening InflowWind input file:  ../CertTest/AWT27/Test02_InflowWind.dat</p>

<p>  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).
  Timestep: 0 of 20 seconds.</p>

<p> Timestep: 2 of 20 seconds. Estimated final completion at 16:05:13.                             <br/>
 Timestep: 4 of 20 seconds. Estimated final completion at 16:05:12.  <br/>
```</p>

<h3>5. Modify the ServoData for servo module</h3>

<p><a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">DISON_DLL running</a>
因为FAST在运行Test18-26.fst的case时候会去读取5MW_BASELINE[只针对的是5MW]底下的ServoData的文件,
所以对应dll-filename得修改一下。</p>

<ol>
<li>make DISCON SO file
```
❯ make -f makefile_DISCON_DLL
gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
Obj_lin32/DISCON.obj</li>
</ol>


<p><code>
2. Change DLL_FileName in the configure data file
</code>
cd /paper/FAST-816/CertTest/5MW_Baseline
vim NRELOffshrBsline5MW_Onshore_ServoDyn.dat</p>

<p>修改DLL_FileName为 ServoData/DISCON_glin32.so
```</p>

<p>Test RESULT:</p>

<p>```
  Running BeamDyn (v1.01.04, 26-Jul-2016).</p>

<p>  Running AeroDyn (v15.03.00, 27-Jul-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.02.00, 29-Jun-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3</p>

<p>  Running InflowWind (v3.03.00, 26-Jul-2016).
  Opening InflowWind input file:  ../CertTest/5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat</p>

<pre><code>Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
07-Jan-2014 at 12:50:45.

Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</code></pre>

<p>  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).</p>

<p>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
  Timestep: 0 of 20 seconds.</p>

<p> FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
 and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
 Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.</p>

<p> Timestep: 1 of 20 seconds. Estimated final completion at 16:20:36.</p>

<p>```</p>

<p>Okay, All things have been done.</p>

<p>Happy FAST programming.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FAST调试]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi/"/>
    <updated>2017-02-07T20:01:15+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/FAST8">NREL FAST</a>的调试一直存在问题，关键是不知道怎么设置选项，查阅了Visual Studio和一些基本知识整理了
NREL项目的调试方法。</p>

<!--more-->


<h2>fortran工作路径问题</h2>

<p><font color="green"><strong>工作路径对于任何的可执行文件都很重要。</strong></font></p>

<pre><code>当然事先可能得了解一下软件编译链接的过程（即编写源代码--调用编译器编译源代码--
&gt;调用链接器连接相关代码块生成可执行文件--&gt;运行可执行文件）(IDE隐藏了上述过程)
</code></pre>

<ul>
<li>如果不带任何路径，则被认为是当前路径(<font color="green"><strong>working directory</strong></font>)。</li>
<li>如果带相对路径，则以当前路径为基准。</li>
<li>通过命令行执行，当前路径一般在提示符上(或<font color="red">pwd</font>命令查看)</li>
<li>直接<font color="red"><strong>双击</strong></font>,当前路径在exe所在的文件夹。</li>
<li>通过<font color="red"><strong>IDE</strong></font>方式运行，当前路径一般在<font color="red"><strong>工程所在文件夹</strong></font></li>
<li>一些IDE还允许设置当前路径(只对IDE方式运行有效)。</li>
<li>右键exe名字也是可以指定运行路径的（这样就可以加载对应的配置文件)</li>
</ul>


<p>比如:<br/></p>

<p><img src="/images/fortrandebug/idewd.png" alt="IDE working directory" /><br/></p>

<h2>代码层级改变文件路径</h2>

<p>在程序中可以通过一些手段，动态的更改当前路径。</p>

<ul>
<li>IVF: changeDirQQ</li>
<li>gfortran: ChDir</li>
</ul>


<p>也可以通过一些手段，获得当前路径，</p>

<ul>
<li>IVF/gforran: GetCWD</li>
</ul>


<p>``` fortran</p>

<p>program testDir</p>

<pre><code>Implicit none
CHARACTER(len=512) ::  working_path
call GET_COMMAND_ARGUMENT(0 , working_path);
write(*,'(a,/,a)') 'exe path: ', trim(working_path);
call GETCWD(working_path)
write(*,'(a,/,a)') 'Working Directory: ', trim(working_path);
</code></pre>

<p>end program testDir</p>

<p>```</p>

<p>输出:&lt;br>
```
exe path:</p>

<p>D:\testCWD\Debug\test_cwd.exe</p>

<p>working directory:
D:\testCWD
```</p>

<h2>调试FAST</h2>

<p><img src="/images/fortrandebug/fast.jpg" alt="fast" />
最关键的是一个对应两个设置</p>

<ul>
<li>一个对应指的是第二步的Linker的output File的exe名字和第三步的General底下的TargetName对应上</li>
<li>两个设置是指在Debuging对Command Arguments和Working Directory的设置。Command Argument指定文件名字
Working Directory指定文件路径。</li>
</ul>


<p>设置完就可以开始调试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu15.10-32bit-安装FastV8.15]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/"/>
    <updated>2016-04-15T14:46:04+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15</id>
    <content type="html"><![CDATA[<p>Fast8.15在4-15又发布了新版本，增加了相关功能，具体参考<a href="https://nwtc.nrel.gov/FAST8">FastV8.15</a>.
下面就32bit ubuntu机子的安装过程做简要记录。</p>

<!--more-->


<ol>
<li>运行fast源文件下的Compling 的makefile</li>
</ol>


<p>``` sh
gfortran: error: ../bin/libmap-1.20.10.so: 没有那个文件或目录
makefile:733: recipe for target &lsquo;../bin/FAST_glin32&rsquo; failed
make:  [../bin/FAST_glin32] Error 1</p>

<p>```</p>

<p>直接运行make，缺少libmap,可以参考<a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">fast安装</a></p>

<ol>
<li>安装LibMap</li>
</ol>


<p>把libMap-1的Compling底下的driver_makefile修改一下你的FAST本地路径。</p>

<p>```</p>

<h1>FAST_DIR     = ../Source</h1>

<h1>FAST_DIR     = C:/Users/bjonkman/Documents/DATA/DesignCodes/simulators/FAST/SVNdirectory/branches/BJonkman/Source</h1>

<p>FAST_DIR     = /paper/FAST_8.15/</p>

<p>```</p>

<p>直接定位到MapDir/src的makefile，进行make一下
```
/usr/bin/ld: cannot find -llapacke
/usr/bin/ld: cannot find -llapacke
collect2: error: ld returned 1 exit status
makefile:81: recipe for target &lsquo;all&rsquo; failed
make: *** [all] Error 1</p>

<p>```</p>

<p>这个原因是因为缺少lapacke开发者库,参考<a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">FAST安装</a>。
```
apt-get install lapacke-dev*</p>

<p>```</p>

<p>然后就可以make，并把生成的libmap-1.2.so放入到fastdir的bin文件夹，没有则创建。
这样就完成了</p>

<ol>
<li><p>测试</p></li>
<li><p>Test02.fst</p></li>
</ol>


<p>```
./FAST_glin32 Test02.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./AWT27/Test02_InflowWind.dat</p>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).
  Timestep: 0 of 20 seconds.</p>

<p> Timestep: 2 of 20 seconds. Estimated final completion at 15:12:15.                             <br/>
 Timestep: 4 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 6 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 8 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 10 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 12 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 14 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 16 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 18 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 20 of 20 seconds. Estimated final completion at 15:12:14.</p>

<p>  Total Real Time:       9.788 seconds
  Total CPU Time:        9.708 seconds
  Simulation CPU Time:   9.636 seconds
  Simulated Time:        20 seconds
  Time Ratio (Sim/CPU):  2.0756</p>

<p>  FAST terminated normally.</p>

<p>```</p>

<ul>
<li>Test26.fst</li>
</ul>


<p>不通过的原因是没有编译DISCON_DLL.</p>

<p>```
➞ ./FAST_glin32 Test26.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat</p>

<pre><code>Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
07-Jan-2014 at 12:50:45.

Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</code></pre>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).</p>

<p>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).</p>

<p> FAST_InitializeAll:SrvD_Init:BladedInterface_Init:The dynamic library
 ./5MW_Baseline/ServoData/DISCON_win32.dll could not be loaded. Check that the file exists in the
 specified location and that it is compiled for 32-bit applications.</p>

<p> FAST encountered an error during module initialization.
  Simulation error level: FATAL ERROR</p>

<p>  Aborting FAST.</p>

<p>```</p>

<ol>
<li>解决Test26无法运行</li>
</ol>


<p>首先，定位到Fast的Compling目录，基本尚不修改，测试make（默认32bit）,通过。</p>

<p>```
make -f makefile_DISCON_DLL
gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
 Obj_lin32/DISCON.obj</p>

<p>```</p>

<p>注意一定得把 生成的DISCON_glin32.so路径写入到对应的NREL5MW Servodata的配置文件，比如</p>

<p>```
Test26.fst文件：</p>

<p>&ldquo;5MW_Baseline/NRELOffshrBsline5MW_Onshore_ServoDyn.dat&rdquo;    ServoFile       &ndash; Name of file containing control and electrical-drive input parameters (quoted string)</p>

<p>&ldquo;unused&rdquo;      HydroFile       &ndash; Name of file containing hydrodynamic input parameters (quoted string)</p>

<p>NRELOffshrBsline5MW_Onshore_ServoDyn.dat 更改对应的DLL_FileName 为 ServoData/DISCON_glin32.so</p>

<p>```</p>

<p><strong>注意还是得按照FAST 非windows平台的编译顺序把register编译好,然后一次MAP++ 和FAST，以及DISCONDLL.</strong></p>

<p>```
─➞ ../bin/FAST_glin32 Test26.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat</p>

<pre><code>Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
07-Jan-2014 at 12:50:45.

Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</code></pre>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).</p>

<p>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
  Timestep: 0 of 20 seconds.</p>

<p> FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
 and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
 Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.</p>

<p> Timestep: 1 of 20 seconds. Estimated final completion at 16:45:58.                             <br/>
 Timestep: 2 of 20 seconds. Estimated final completion at 16:45:53.                             <br/>
 Timestep: 3 of 20 seconds. Estimated final completion at 16:45:58.                             <br/>
 Timestep: 4 of 20 seconds. Estimated final completion at 16:45:57.                             <br/>
 Timestep: 5 of 20 seconds. Estimated final completion at 16:45:57.                             <br/>
 Timestep: 6 of 20 seconds. Estimated final completion at 16:45:53.</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FAST in Ubuntu64Bit 编译注意事项]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/"/>
    <updated>2015-10-22T23:38:33+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/FAST8">FAST(Fatigue,Aerodynamic,Struture,Turbulence)</a>,是一款风力机的气动、水动力、
励磁、结构等几个部分的模拟<a href="http://www.nrel.gov/docs/fy13osti/57228.pdf">工具</a></p>

<p>风力机系统的整体带入流风物理流动现象:</p>

<p><img src="/images/fast/WTSystem.png" alt="Physical phenomena affecting a floating wind turbine system" /></p>

<p>而本文主要讲的是如何在ubuntu64bit系统编译FAST使其可以使用。</p>

<!--more-->


<h2>1 操作系统的位数</h2>

<pre><code>找到Compiling文件夹下的makefile，然后将bits=32 改为64
</code></pre>

<h2>2.register.exe编译</h2>

<p>  首先编译Source/dependecy/Registry 的makefile，然后生成一个register.exe 供给fast makefile使用</p>

<h2>3. MAP++生成libmap.so</h2>

<p>  从官网<a href="https://nwtc.nrel.gov/MAP">https://nwtc.nrel.gov/MAP</a> 下载map源文件，然后编译 生成一个libmap.so
 注意： 必须是 lapack developer版本才可以，</p>

<p><code>
 apt-get install lapack*
</code>
  并把so文件放到FAST目录下的bin文件夹（没有则创建），然后make fast的makefile即可。</p>

<h2>4 DISCON_DLL编译使得NREL 5MW也能运行</h2>

<p>   之前的三个步骤,在bin目录生成的FAST_glint64只能运行Test1-18.fst对应的机型.</p>

<p>如果想运行Nrel-5MW（Test18-26.fst)必须是编译makefile_DISCON_DLL,并修改
  CertTest/5MW_Baseline/ServDyn 的CertTest/5MW_Baseline/NRELOffshrBsline5MW_Onshore_ServoDyn.dat 更改对应的<strong>DLL_FileName</strong> 为 <em>ServoData/DISCON_glin64.so</em></p>

<h3>4.1 编译方式</h3>

<p>```</p>

<pre><code>make -f makefile_DISCON_DLL
</code></pre>

<p>```</p>

<h3>4.2注意有可能编译不通过：</h3>

<p>   必须在makefile_DISCON_DLL中的  FFLAGS加入  -fPIC</p>

<p>```
FFLAGS  = -O2 -m$(BITS) -fbacktrace -ffree-line-length-none -x f95-cpp-input -fPIC -C</p>

<p>```
针对与Fast开发者可以参考<a href="https://nwtc.nrel.gov/FAST-Developers">FAST-Developers</a></p>
]]></content>
  </entry>
  
</feed>
