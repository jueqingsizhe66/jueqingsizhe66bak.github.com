<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fast | 网络书屋(Web Reading Room)]]></title>
  <link href="http://jueqingsizhe66.github.io/blog/categories/fast/atom.xml" rel="self"/>
  <link href="http://jueqingsizhe66.github.io/"/>
  <updated>2017-02-07T22:36:42+08:00</updated>
  <id>http://jueqingsizhe66.github.io/</id>
  <author>
    <name><![CDATA[Ye Zhaoliang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FAST调试]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi/"/>
    <updated>2017-02-07T20:01:15+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/FAST8">NREL FAST</a>的调试一直存在问题，关键是不知道怎么设置选项，查阅了Visual Studio和一些基本知识整理了
NREL项目的调试方法。</p>

<!--more-->


<h2>fortran工作路径问题</h2>

<p><font color="green"><strong>工作路径对于任何的可执行文件都很重要。</strong></font></p>

<pre><code>当然事先可能得了解一下软件编译链接的过程（即编写源代码--调用编译器编译源代码--
&gt;调用链接器连接相关代码块生成可执行文件--&gt;运行可执行文件）(IDE隐藏了上述过程)
</code></pre>

<ul>
<li>如果不带任何路径，则被认为是当前路径(<font color="green"><strong>working directory</strong></font>)。</li>
<li>如果带相对路径，则以当前路径为基准。</li>
<li>通过命令行执行，当前路径一般在提示符上(或<font color="red">pwd</font>命令查看)</li>
<li>直接<font color="red"><strong>双击</strong></font>,当前路径在exe所在的文件夹。</li>
<li>通过<font color="red"><strong>IDE</strong></font>方式运行，当前路径一般在<font color="red"><strong>工程所在文件夹</strong></font></li>
<li>一些IDE还允许设置当前路径(只对IDE方式运行有效)。</li>
<li>右键exe名字也是可以指定运行路径的（这样就可以加载对应的配置文件)</li>
</ul>


<p>比如:<br/></p>

<p><img src="/images/fortrandebug/idewd.png" alt="IDE working directory" /><br/></p>

<h2>代码层级改变文件路径</h2>

<p>在程序中可以通过一些手段，动态的更改当前路径。</p>

<ul>
<li>IVF: changeDirQQ</li>
<li>gfortran: ChDir</li>
</ul>


<p>也可以通过一些手段，获得当前路径，</p>

<ul>
<li>IVF/gforran: GetCWD</li>
</ul>


<p>``` fortran</p>

<p>program testDir</p>

<pre><code>Implicit none
CHARACTER(len=512) ::  working_path
call GET_COMMAND_ARGUMENT(0 , working_path);
write(*,'(a,/,a)') 'exe path: ', trim(working_path);
call GETCWD(working_path)
write(*,'(a,/,a)') 'Working Directory: ', trim(working_path);
</code></pre>

<p>end program testDir</p>

<p>```</p>

<p>输出:&lt;br>
```
exe path:</p>

<p>D:\testCWD\Debug\test_cwd.exe</p>

<p>working directory:
D:\testCWD
```</p>

<h2>调试FAST</h2>

<p><img src="/images/fortrandebug/fast.jpg" alt="fast" />
最关键的是一个对应两个设置</p>

<ul>
<li>一个对应指的是第二步的Linker的output File的exe名字和第三步的General底下的TargetName对应上</li>
<li>两个设置是指在Debuging对Command Arguments和Working Directory的设置。Command Argument指定文件名字
Working Directory指定文件路径。</li>
</ul>


<p>设置完就可以开始调试了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu15.10-32bit-安装FastV8.15]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/"/>
    <updated>2016-04-15T14:46:04+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15</id>
    <content type="html"><![CDATA[<p>Fast8.15在4-15又发布了新版本，增加了相关功能，具体参考<a href="https://nwtc.nrel.gov/FAST8">FastV8.15</a>.
下面就32bit ubuntu机子的安装过程做简要记录。</p>

<!--more-->


<ol>
<li>运行fast源文件下的Compling 的makefile</li>
</ol>


<p>``` sh
gfortran: error: ../bin/libmap-1.20.10.so: 没有那个文件或目录
makefile:733: recipe for target &lsquo;../bin/FAST_glin32&rsquo; failed
make:  [../bin/FAST_glin32] Error 1</p>

<p>```</p>

<p>直接运行make，缺少libmap,可以参考<a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">fast安装</a></p>

<ol>
<li>安装LibMap</li>
</ol>


<p>把libMap-1的Compling底下的driver_makefile修改一下你的FAST本地路径。</p>

<p>```</p>

<h1>FAST_DIR     = ../Source</h1>

<h1>FAST_DIR     = C:/Users/bjonkman/Documents/DATA/DesignCodes/simulators/FAST/SVNdirectory/branches/BJonkman/Source</h1>

<p>FAST_DIR     = /paper/FAST_8.15/</p>

<p>```</p>

<p>直接定位到MapDir/src的makefile，进行make一下
```
/usr/bin/ld: cannot find -llapacke
/usr/bin/ld: cannot find -llapacke
collect2: error: ld returned 1 exit status
makefile:81: recipe for target &lsquo;all&rsquo; failed
make: *** [all] Error 1</p>

<p>```</p>

<p>这个原因是因为缺少lapacke开发者库,参考<a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">FAST安装</a>。
```
apt-get install lapacke-dev*</p>

<p>```</p>

<p>然后就可以make，并把生成的libmap-1.2.so放入到fastdir的bin文件夹，没有则创建。
这样就完成了</p>

<ol>
<li><p>测试</p></li>
<li><p>Test02.fst</p></li>
</ol>


<p>```
./FAST_glin32 Test02.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./AWT27/Test02_InflowWind.dat</p>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).
  Timestep: 0 of 20 seconds.</p>

<p> Timestep: 2 of 20 seconds. Estimated final completion at 15:12:15.                             <br/>
 Timestep: 4 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 6 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 8 of 20 seconds. Estimated final completion at 15:12:14.                             <br/>
 Timestep: 10 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 12 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 14 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 16 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 18 of 20 seconds. Estimated final completion at 15:12:14.                            <br/>
 Timestep: 20 of 20 seconds. Estimated final completion at 15:12:14.</p>

<p>  Total Real Time:       9.788 seconds
  Total CPU Time:        9.708 seconds
  Simulation CPU Time:   9.636 seconds
  Simulated Time:        20 seconds
  Time Ratio (Sim/CPU):  2.0756</p>

<p>  FAST terminated normally.</p>

<p>```</p>

<ul>
<li>Test26.fst</li>
</ul>


<p>不通过的原因是没有编译DISCON_DLL.</p>

<p>```
➞ ./FAST_glin32 Test26.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat</p>

<pre><code>Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
07-Jan-2014 at 12:50:45.

Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</code></pre>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).</p>

<p>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).</p>

<p> FAST_InitializeAll:SrvD_Init:BladedInterface_Init:The dynamic library
 ./5MW_Baseline/ServoData/DISCON_win32.dll could not be loaded. Check that the file exists in the
 specified location and that it is compiled for 32-bit applications.</p>

<p> FAST encountered an error during module initialization.
  Simulation error level: FATAL ERROR</p>

<p>  Aborting FAST.</p>

<p>```</p>

<ol>
<li>解决Test26无法运行</li>
</ol>


<p>首先，定位到Fast的Compling目录，基本尚不修改，测试make（默认32bit）,通过。</p>

<p>```
make -f makefile_DISCON_DLL
gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
 Obj_lin32/DISCON.obj</p>

<p>```</p>

<p>注意一定得把 生成的DISCON_glin32.so路径写入到对应的NREL5MW Servodata的配置文件，比如</p>

<p>```
Test26.fst文件：</p>

<p>&ldquo;5MW_Baseline/NRELOffshrBsline5MW_Onshore_ServoDyn.dat&rdquo;    ServoFile       &ndash; Name of file containing control and electrical-drive input parameters (quoted string)</p>

<p>&ldquo;unused&rdquo;      HydroFile       &ndash; Name of file containing hydrodynamic input parameters (quoted string)</p>

<p>NRELOffshrBsline5MW_Onshore_ServoDyn.dat 更改对应的DLL_FileName 为 ServoData/DISCON_glin32.so</p>

<p>```</p>

<p><strong>注意还是得按照FAST 非windows平台的编译顺序把register编译好,然后一次MAP++ 和FAST，以及DISCONDLL.</strong></p>

<p>```
─➞ ../bin/FAST_glin32 Test26.fst</p>

<hr />

<p> FAST (v8.15.00a-bjj, 12-Apr-2016)</p>

<p> Copyright &copy; 2016 National Renewable Energy Laboratory</p>

<p> This program comes with ABSOLUTELY NO WARRANTY. See the &ldquo;license.txt&rdquo; file distributed with this
 software for details.</p>

<hr />

<p>  Running FAST (v8.15.00a-bjj, 12-Apr-2016), compiled as a 32-bit application using single
  precision
  linked with NWTC Subroutine Library (v2.08.00, 5-Apr-2016)</p>

<p>  Heading of the FAST input file:</p>

<pre><code>FAST Certification Test #26: NREL 5.0 MW Baseline Wind Turbine (Onshore)
</code></pre>

<p>  Running ElastoDyn (v1.03.02a-bjj, 8-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running BeamDyn (v1.01.03, 12-Apr-2016).</p>

<p>  Running AeroDyn (v15.02.03, 12-Apr-2016).</p>

<p>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).</p>

<p>  Running BEM (v1.01.00a, 12-Apr-2016).
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
 Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3</p>

<p>  Running InflowWind (v3.02.00a-bjj, 11-Apr-2016).
  Opening InflowWind input file:  ./5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat</p>

<pre><code>Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
07-Jan-2014 at 12:50:45.

Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</code></pre>

<p>  Running ServoDyn (v1.05.00a-bjj, 11-Mar-2016).</p>

<p>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
  Timestep: 0 of 20 seconds.</p>

<p> FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
 and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
 Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.</p>

<p> Timestep: 1 of 20 seconds. Estimated final completion at 16:45:58.                             <br/>
 Timestep: 2 of 20 seconds. Estimated final completion at 16:45:53.                             <br/>
 Timestep: 3 of 20 seconds. Estimated final completion at 16:45:58.                             <br/>
 Timestep: 4 of 20 seconds. Estimated final completion at 16:45:57.                             <br/>
 Timestep: 5 of 20 seconds. Estimated final completion at 16:45:57.                             <br/>
 Timestep: 6 of 20 seconds. Estimated final completion at 16:45:53.</p>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FAST in Ubuntu64Bit 编译注意事项]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/"/>
    <updated>2015-10-22T23:38:33+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/FAST8">FAST(Fatigue,Aerodynamic,Struture,Turbulence)</a>,是一款风力机的气动、水动力、
励磁、结构等几个部分的模拟<a href="http://www.nrel.gov/docs/fy13osti/57228.pdf">工具</a></p>

<p>风力机系统的整体带入流风物理流动现象:</p>

<p><img src="/images/fast/WTSystem.png" alt="Physical phenomena affecting a floating wind turbine system" /></p>

<p>而本文主要讲的是如何在ubuntu64bit系统编译FAST使其可以使用。</p>

<!--more-->


<h2>1 操作系统的位数</h2>

<pre><code>找到Compiling文件夹下的makefile，然后将bits=32 改为64
</code></pre>

<h2>2.register.exe编译</h2>

<p>  首先编译Source/dependecy/Registry 的makefile，然后生成一个register.exe 供给fast makefile使用</p>

<h2>3. MAP++生成libmap.so</h2>

<p>  从官网<a href="https://nwtc.nrel.gov/MAP">https://nwtc.nrel.gov/MAP</a> 下载map源文件，然后编译 生成一个libmap.so
 注意： 必须是 lapack developer版本才可以，</p>

<p><code>
 apt-get install lapack*
</code>
  并把so文件放到FAST目录下的bin文件夹（没有则创建），然后make fast的makefile即可。</p>

<h2>4 DISCON_DLL编译使得NREL 5MW也能运行</h2>

<p>   之前的三个步骤,在bin目录生成的FAST_glint64只能运行Test1-18.fst对应的机型.</p>

<p>如果想运行Nrel-5MW（Test18-26.fst)必须是编译makefile_DISCON_DLL,并修改
  CertTest/5MW_Baseline/ServDyn 的CertTest/5MW_Baseline/NRELOffshrBsline5MW_Onshore_ServoDyn.dat 更改对应的<strong>DLL_FileName</strong> 为 <em>ServoData/DISCON_glin64.so</em></p>

<h3>4.1 编译方式</h3>

<p>```</p>

<pre><code>make -f makefile_DISCON_DLL
</code></pre>

<p>```</p>

<h3>4.2注意有可能编译不通过：</h3>

<p>   必须在makefile_DISCON_DLL中的  FFLAGS加入  -fPIC</p>

<p>```
FFLAGS  = -O2 -m$(BITS) -fbacktrace -ffree-line-length-none -x f95-cpp-input -fPIC -C</p>

<p>```
针对与Fast开发者可以参考<a href="https://nwtc.nrel.gov/FAST-Developers">FAST-Developers</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TurbSim 8个湍流模型的对比]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/08/10/turbsim-8ge-tuan-liu-mo-xing-de-dui-bi/"/>
    <updated>2015-08-10T01:00:47+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/08/10/turbsim-8ge-tuan-liu-mo-xing-de-dui-bi</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/TurbSim">TurbSim</a>,是NREL提供的一个小的开源工具， 用于产生湍流风，设置的时候可能对于不同模型会有不同的参数，基于范本进行了一番分析。当然测试文件在TurbSim的Test文件下的inp文件夹下。</p>

<p>如果对那些湍流模型做一个对比，那样是否可以更加清晰的看出不同呢？
于是就有了下面的shell分析脚本。</p>

<p>TurbSim产生的风力机一圈的入流截面模型（仅仅一个截面，全场是因为捕捉了很多个截面）</p>

<p><img src="/images/fast/turbsim.png" alt="Turbsim" /></p>

<!--more-->


<h2>Shell解析脚本</h2>

<p>``` sh</p>

<h1>!/bin/bash &ndash;</h1>

<h1>===============================================================================</h1>

<p>#</p>

<h1>FILE: a.sh</h1>

<h1></h1>

<h1>USAGE: ./a.sh</h1>

<h1></h1>

<h1>DESCRIPTION:</h1>

<h1></h1>

<h1>OPTIONS: &mdash;&ndash;</h1>

<h1>REQUIREMENTS: &mdash;&ndash;</h1>

<h1>BUGS: &mdash;&ndash;</h1>

<h1>NOTES: &mdash;&ndash;</h1>

<h1>AUTHOR: Ye Zhaoliang (), <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#x3a;&#x7a;&#104;&#x61;&#x6f;&#x74;&#117;&#114;&#x6b;&#107;&#x65;&#x79;&#64;&#x31;&#54;&#x33;&#46;&#x63;&#111;&#109;">&#122;&#104;&#97;&#x6f;&#x74;&#x75;&#114;&#107;&#107;&#101;&#121;&#x40;&#x31;&#x36;&#51;&#46;&#99;&#111;&#x6d;</a></h1>

<h1>ORGANIZATION: YZL</h1>

<h1>CREATED: 2015年08月10日 00:26</h1>

<h1>REVISION:  &mdash;&ndash;</h1>

<h1>===============================================================================</h1>

<h1>&mdash;&ndash;  FUNCTION  &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<h1>NAME:  _repeat1</h1>

<h1>DESCRIPTION:  优化版本</h1>

<h1>PARAMETERS:</h1>

<h1>RETURNS:</h1>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>_repeat1()
{</p>

<pre><code>#@ 使用方式： _repeat 要重复的字符串  重复次数
#@  Usage : _repeat string number
_REPEAT1=$1  #set and not empty, or unlimit recycle
while [[ ${#_REPEAT1} -lt $2 ]]
do
    _REPEAT1=$_REPEAT1$_REPEAT1$_REPEAT1 ## 3次优化
done
_REPEAT1=${_REPEAT1:0:$2} ##Trim到我们需要的长度
</code></pre>

<p>}</p>

<p>alert() #@ Description    产生一个方框的注释
{       #@ Usage    alert &ldquo;话语&rdquo;</p>

<pre><code>_repeat1 "${2:-#}" $(( ${#1} + 8 )) ## ${2:-#} 如果$2未定义则使用#
printf '%s\n' "$_REPEAT1" ## \a=BEL
printf '%2.2s %s %2.2s\n' "$_REPEAT1" "$1" "$_REPEAT1" ## \a=BEL
printf '%s\n' "$_REPEAT1"
</code></pre>

<p>}</p>

<h1>alert &ldquo;Do you really want to delete all the files?&rdquo;</h1>

<h2>RandSeed1 在不同湍流模型配置的不同</h2>

<p>{
alert  &ldquo;RandSeed1&rdquo;
grep -n &ldquo;RandSeed1&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;RandSeed2&rdquo;
grep -n &ldquo;RandSeed2&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrBHHTP&rdquo;
grep -n &ldquo;WrBHHTP&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrFHHTP&rdquo;
grep -n &ldquo;WrFHHTP&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrADHH&rdquo;
grep -n &ldquo;WrADHH&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrADFF&rdquo;
grep -n &ldquo;WrADFF&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrBLFF&rdquo;
grep -n &ldquo;WrBLFF&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrADTWR&rdquo;
grep -n &ldquo;WrADTWR&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrFMTFF&rdquo;
grep -n &ldquo;WrFMTFF&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WrACT&rdquo;
grep -n &ldquo;WrACT&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;NumGrid_Z&rdquo;
grep -n &ldquo;NumGrid_Z&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;NumGrid_Y&rdquo;
grep -n &ldquo;NumGrid_Y&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;HubHt&rdquo;
grep -n &ldquo;HubHt&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;GridHeight&rdquo;
grep -n &ldquo;GridHeight&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|sed &lsquo;/HubHt/d&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;GridWidth&rdquo;
grep -n &ldquo;GridWidth&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|sed &lsquo;/HubHt/d&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;VFlowAng&rdquo;
grep -n &ldquo;VFlowAng&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;HFlowAng&rdquo;
grep -n &ldquo;HFlowAng&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;TurbModel&rdquo;
grep -n &ldquo;TurbModel&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;IECstandard&rdquo;
grep -n &ldquo;IECstandard&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;IECturbc&rdquo;
grep -n &ldquo;IECturbc&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;IEC_WindType&rdquo;
grep -n &ldquo;IEC_WindType&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;ETMc&rdquo;
grep -n &ldquo;ETMc&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;WindProfileType&rdquo;
grep -n &ldquo;WindProfileType&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;RefHt&rdquo;
grep -n &ldquo;RefHt&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;URef&rdquo;
grep -n &ldquo;URef&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;ZJetMax&rdquo;
grep -n &ldquo;ZJetMax&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;PLExp&rdquo;
grep -n &ldquo;PLExp&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;Z0&rdquo;
grep -n &ldquo;Z0&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;RICH_NO&rdquo;
grep -n &ldquo;RICH_NO&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;ZI&rdquo;
grep -n &ldquo;ZI&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;PC_UW&rdquo;
grep -n &ldquo;PC_UW&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;PC_UV&rdquo;
grep -n &ldquo;PC_UV&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;PC_VW&rdquo;
grep -n &ldquo;PC_VW&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CohExp&rdquo;
grep -n &ldquo;CohExp&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CTEventPath&rdquo;
grep -n &ldquo;CTEventPath&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CTEventFile&rdquo;
grep -n &ldquo;CTEventFile&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;Randomize&rdquo;
grep -n &ldquo;Randomize&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;DistScl&rdquo;
grep -n &ldquo;DistScl&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CTLy&rdquo;
grep -n &ldquo;CTLy&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CTLz&rdquo;
grep -n &ldquo;CTLz&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
alert  &ldquo;CTStartTime&rdquo;
grep -n &ldquo;CTStartTime&rdquo; *.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
} > summary.out</p>

<p>```</p>

<h3>改进</h3>

<ol>
<li>去除无用的Turbulence and Boundary</li>
<li>增加了对GridWidth and GridHeight的处理</li>
</ol>


<p>```
grep -n &ldquo;GridHeight&rdquo; <em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|sed &lsquo;/HubHt/d&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t
grep -n &ldquo;GridWidth&rdquo; </em>.inp|awk -F: &lsquo;{print $1,$3}&rsquo;|sed &lsquo;/HubHt/d&rsquo;|awk &lsquo;{print substr($1,0,length($1)-4),&ldquo;\t\t&rdquo;,$2}&rsquo;|column -t</p>

<p>```
3.</p>

<h2>shell产生的结果如下：</h2>

<p>```</p>

<h6>#</h6>

<h2>RandSeed1</h2>

<h6>#</h6>

<p>GPLLJ        234516
HYDRO_TIDAL  2318573
Kaimal_15    123456
Kaimal       123456
KHtest       123456
smooth       4433456
vonKarm_15   123456
vonKarm      123456</p>

<h6>#</h6>

<h2>RandSeed2</h2>

<h6>#</h6>

<p>GPLLJ        789012
HYDRO_TIDAL  RANLUX
Kaimal_15    789012
Kaimal       789012
KHtest       &ldquo;RanLux&rdquo;
smooth       &ldquo;RanLux&rdquo;
vonKarm_15   789012
vonKarm      789012</p>

<h6>#</h6>

<h2>WrBHHTP</h2>

<h6>#</h6>

<p>GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       True
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>WrFHHTP</h2>

<h6>#</h6>

<p>GPLLJ        True
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   True
vonKarm      True</p>

<h6>#</h6>

<h2>WrADHH</h2>

<h6>#</h6>

<p>GPLLJ        False
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   True
vonKarm      True</p>

<h6>#</h6>

<h2>WrADFF</h2>

<h6>#</h6>

<p>GPLLJ        True
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>WrBLFF</h2>

<h6>#</h6>

<p>GPLLJ        False
HYDRO_TIDAL  True
Kaimal_15    False
Kaimal       False
KHtest       True
smooth       True
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>WrADTWR</h2>

<h6>#</h6>

<p>GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>WrFMTFF</h2>

<h6>#</h6>

<p>GPLLJ        False
HYDRO_TIDAL  False
Kaimal_15    True
Kaimal       True
KHtest       False
smooth       False
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>WrACT</h2>

<h6>#</h6>

<p>GPLLJ        True
HYDRO_TIDAL  False
Kaimal_15    False
Kaimal       False
KHtest       True
smooth       True
vonKarm_15   False
vonKarm      False</p>

<h6>#</h6>

<h2>NumGrid_Z</h2>

<h6>#</h6>

<p>GPLLJ        5
HYDRO_TIDAL  5
Kaimal_15    5
Kaimal       5
KHtest       5
smooth       5
vonKarm_15   5
vonKarm      5</p>

<h6>#</h6>

<h2>NumGrid_Y</h2>

<h6>#</h6>

<p>GPLLJ        5
HYDRO_TIDAL  5
Kaimal_15    5
Kaimal       5
KHtest       5
smooth       5
vonKarm_15   5
vonKarm      5</p>

<h6>#</h6>

<h2>HubHt</h2>

<h6>#</h6>

<p>GPLLJ        90.00
HYDRO_TIDAL  10
Kaimal_15    37.00
Kaimal       37.00
KHtest       37.00
smooth       84.00
vonKarm_15   37.00
vonKarm      37.00</p>

<h6>#</h6>

<h2>GridHeight</h2>

<h6>#</h6>

<p>GPLLJ        80.00
HYDRO_TIDAL  9.00
Kaimal_15    30.00
Kaimal       30.00
KHtest       50.00
smooth       70.00
vonKarm_15   30.00
vonKarm      30.00</p>

<h6>#</h6>

<h2>GridWidth</h2>

<h6>#</h6>

<p>GPLLJ        600.0
GPLLJ        90.0
GPLLJ        80.00
HYDRO_TIDAL  600
HYDRO_TIDAL  40
HYDRO_TIDAL  9.00
Kaimal_15    600.0
Kaimal_15    55.8
Kaimal_15    30.00
Kaimal       600.0
Kaimal       55.8
Kaimal       30.00
KHtest       600.0
KHtest       100.0
KHtest       50.00
smooth       600.0
smooth       100.0
smooth       70.00
vonKarm_15   600.0
vonKarm_15   55.8
vonKarm_15   30.00
vonKarm      600.0
vonKarm      55.8
vonKarm      30.00</p>

<h6>#</h6>

<h2>VFlowAng</h2>

<h6>#</h6>

<p>GPLLJ        0
HYDRO_TIDAL  0
Kaimal_15    5
Kaimal       5
KHtest       0
smooth       0
vonKarm_15   5
vonKarm      0</p>

<h6>#</h6>

<h2>HFlowAng</h2>

<h6>#</h6>

<p>GPLLJ        0
HYDRO_TIDAL  0
Kaimal_15    10
Kaimal       10
KHtest       0
smooth       0
vonKarm_15   10
vonKarm      0</p>

<h6>#</h6>

<h2>TurbModel</h2>

<h6>#</h6>

<p>GPLLJ        &ldquo;GP_LLJ&rdquo;
HYDRO_TIDAL  &ldquo;TIDAL&rdquo;
Kaimal_15    &ldquo;IECKAI&rdquo;
Kaimal       &ldquo;IECKAI&rdquo;
KHtest       &ldquo;NWTCUP&rdquo;
smooth       &ldquo;SMOOTH&rdquo;
vonKarm_15   &ldquo;IECVKM&rdquo;
vonKarm      &ldquo;IECVKM&rdquo;</p>

<h6>#</h6>

<h2>IECstandard</h2>

<h6>#</h6>

<p>GPLLJ        1
HYDRO_TIDAL  &ldquo;1-ED3&rdquo;
Kaimal_15    &ldquo;1-ED2&rdquo;
Kaimal       1
KHtest       1
smooth       1
vonKarm_15   1
vonKarm      1</p>

<h6>#</h6>

<h2>IECturbc</h2>

<h6>#</h6>

<p>GPLLJ        &ldquo;A&rdquo;
HYDRO_TIDAL  &ldquo;A&rdquo;
Kaimal_15    &ldquo;18.0&rdquo;
Kaimal       &ldquo;C&rdquo;
KHtest       &ldquo;KHtest&rdquo;
smooth       &ldquo;A&rdquo;
vonKarm_15   16.0
vonKarm      &ldquo;A&rdquo;</p>

<h6>#</h6>

<h2>IEC_WindType</h2>

<h6>#</h6>

<p>GPLLJ        NTM
HYDRO_TIDAL  &ldquo;NTM&rdquo;
Kaimal_15    NTM
Kaimal       NTM
KHtest       NTM
smooth       NTM
vonKarm_15   NTM
vonKarm      NTM</p>

<h6>#</h6>

<h2>ETMc</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>WindProfileType</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  &ldquo;H2L&rdquo;
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>RefHt</h2>

<h6>#</h6>

<p>GPLLJ        85.00
HYDRO_TIDAL  18
Kaimal_15    10.00
Kaimal       10.00
KHtest       37.00
smooth       84.00
vonKarm_15   10.00
vonKarm      10.00</p>

<h6>#</h6>

<h2>URef</h2>

<h6>#</h6>

<p>GPLLJ        12.0
HYDRO_TIDAL  18
HYDRO_TIDAL  1.2
Kaimal_15    15.0
Kaimal       6.0
KHtest       13.0
smooth       17.0
vonKarm_15   15.0
vonKarm      6.0</p>

<h6>#</h6>

<h2>ZJetMax</h2>

<h6>#</h6>

<p>GPLLJ        350
HYDRO_TIDAL  default
Kaimal_15    350
Kaimal       350
KHtest       350
smooth       350
vonKarm_15   350
vonKarm      260</p>

<h6>#</h6>

<h2>PLExp</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       1.527
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>Z0</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>RICH_NO</h2>

<h6>#</h6>

<p>GPLLJ        0.05
HYDRO_TIDAL  0.05
Kaimal_15    0.05
Kaimal       0.05
KHtest       0.02
smooth       0.05
vonKarm_15   0.05
vonKarm      0.05</p>

<h6>#</h6>

<h2>ZI</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>PC_UW</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>PC_UV</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>PC_VW</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>CohExp</h2>

<h6>#</h6>

<p>GPLLJ        default
HYDRO_TIDAL  default
Kaimal_15    default
Kaimal       default
KHtest       default
smooth       default
vonKarm_15   default
vonKarm      default</p>

<h6>#</h6>

<h2>CTEventPath</h2>

<h6>#</h6>

<p>GPLLJ        &ldquo;.\EventData&rdquo;
HYDRO_TIDAL  &ldquo;/home/lkilcher/work/nwtc/turbsim/trunk/Test/EventData/&rdquo;
Kaimal_15    &ldquo;.\EventData&rdquo;
Kaimal       &ldquo;.\EventData&rdquo;
KHtest       &ldquo;.\EventData&rdquo;
smooth       &ldquo;.\EventData&rdquo;
vonKarm_15   &ldquo;.\EventData&rdquo;
vonKarm      &ldquo;.\EventData&rdquo;</p>

<h6>#</h6>

<h2>CTEventFile</h2>

<h6>#</h6>

<p>GPLLJ        LES
HYDRO_TIDAL  &ldquo;Random&rdquo;
Kaimal_15    random
Kaimal       random
KHtest       &ldquo;les&rdquo;
smooth       &ldquo;les&rdquo;
vonKarm_15   random
vonKarm      random</p>

<h6>#</h6>

<h2>Randomize</h2>

<h6>#</h6>

<p>GPLLJ        true
HYDRO_TIDAL  true
HYDRO_TIDAL  1.0
HYDRO_TIDAL  0.5
HYDRO_TIDAL  0.5
Kaimal_15    true
Kaimal       true
KHtest       true
smooth       true
vonKarm_15   true
vonKarm      true</p>

<h6>#</h6>

<h2>DistScl</h2>

<h6>#</h6>

<p>GPLLJ        1.0
HYDRO_TIDAL  1.0
Kaimal_15    1.0
Kaimal       1.0
KHtest       1.0
smooth       1.0
vonKarm_15   1.0
vonKarm      1.0</p>

<h6>#</h6>

<h2>CTLy</h2>

<h6>#</h6>

<p>GPLLJ        0.5
HYDRO_TIDAL  0.5
Kaimal_15    0.5
Kaimal       0.5
KHtest       0.5
smooth       0.5
vonKarm_15   0.5
vonKarm      0.5</p>

<h6>#</h6>

<h2>CTLz</h2>

<h6>#</h6>

<p>GPLLJ        0.5
HYDRO_TIDAL  0.5
Kaimal_15    0.5
Kaimal       0.5
KHtest       0.5
smooth       0.5
vonKarm_15   0.5
vonKarm      0.5</p>

<h6>#</h6>

<h2>CTStartTime</h2>

<h6>#</h6>

<p>GPLLJ        30.0
HYDRO_TIDAL  30.0
Kaimal_15    30.0
Kaimal       30.0
KHtest       0.0
smooth       10.0
vonKarm_15   30.0
vonKarm      30.0
```</p>

<p> 进一步的细节可以参考<a href="https://nwtc.nrel.gov/system/files/TurbSim.pdf">Turbsim UserGuide</a></p>
]]></content>
  </entry>
  
</feed>
