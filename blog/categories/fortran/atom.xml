<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Fortran | 网络书屋(Web Reading Room)]]></title>
  <link href="http://jueqingsizhe66.github.io/blog/categories/fortran/atom.xml" rel="self"/>
  <link href="http://jueqingsizhe66.github.io/"/>
  <updated>2017-02-07T22:24:54+08:00</updated>
  <id>http://jueqingsizhe66.github.io/</id>
  <author>
    <name><![CDATA[Ye Zhaoliang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[一份有趣的fortran动态静态链接文]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/07/%5B%3F%5D-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen/"/>
    <updated>2017-02-07T20:03:04+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/07/[?]-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen</id>
    <content type="html"><![CDATA[<p>一张来自<a href="http://fcode.cn/">fcode</a>的有趣的静态和动态链接的比喻图，
<img src="/images/fortrandebug/usb.png" alt="staticdy" /></p>

<p>静态库是需要直接和exe文件打包在一起的，而动态库则是需要运行的时候才执行dll文件，
dll文件也是一个exe文件，只不过只能由对应的exe文件执行，无法人工执行。</p>

<ul>
<li><a href="#static">1. 静态链接</a></li>
<li><a href="#dynamic">2. 动态链接</a></li>
<li><a href="#compare">3. 两者比较</a></li>
<li><a href="#hun">4. fortran与c混编</a></li>
</ul>


<!--more-->




<h2 id="static">静态链接</h2>


<p>静态库lib,实际上是obj文件的集合，可认为是打包在一起的若干obj，</p>

<p>因此他的编译过程为：</p>

<ol>
<li><font color="red">编译子程序(f90)源代码，得到若干obj文件</font></li>
<li><font color="red">打包这些obj文件，成为<strong>lib静态库</strong></font></li>
</ol>


<p>他的使用比较简单：</p>

<p><font color="red">编译主程序(或其他子程序),链接时，<strong>带上lib</strong>文件即可</font>。</p>

<hr/>


<p><font color="red"><strong>注意</strong></font><br/>
在上面的f90源代码中可能包含了module片段。若干静态库中使用了module,那么编译还会产生mod内件。
<font color="green">每一个module对应一个同名的mod文件。</font></p>

<p>mod是什么？
mod文件可认为是module的"概述",与c语言的"头文件"的做哟个相似，但与C语言需要自己书写头文件不同，
fortran的mod文件由编译器<font color="red"><strong>自动生成</strong></font>。</p>

<p>也就是说，当<code>use Module</code>时，编译器需<strong>能够</strong>找到对应的mod文件。因此有必要把静态库里产生的mod文件
保存起来，以便使用静态库时加载(<font color="red"><strong>mod文件一定得在lib目录下,这点很容易被遗忘。</strong></font>。</p>

<hr/>


<p><font color="green">提前准备公用的源代码:</font></p>

<p>sub.90:
``` fortran
Subroutine sub()
  write(<em>,</em>) &lsquo;Xueqiu is a good man!&rsquo;
End Subroutine sub</p>

<p>```</p>

<p>func.f90:</p>

<p>```
MODULE FUNCMOD
  IMPLICIT NONE</p>

<p>CONTAINS</p>

<p>  INTEGER FUNCTION FUNC()</p>

<pre><code>WRITE(*,*) 'THIS IS A FUNC!'
FUNC = 1
</code></pre>

<p>  END FUNCTION FUNC
END MODULE FUNCMOD</p>

<p>```</p>

<p>main.f90:</p>

<p>```
Program testLib
  use funcmod
  Implicit None
  integer :: i
  i = func()
  call sub()
End Program testLib</p>

<p>```</p>

<hr/>


<hr/>


<hr/>


<h3> gfortran技术解决方案</h3>


<ul>
<li>第一步: 编译生成obj[和mod] 文件,</li>
</ul>


<p><code>
gfortran -c sub.f90 func.90
</code></p>

<p>生成文件列表如下:
<code>
funcmod.mod
func.o
sub.o
</code></p>

<ul>
<li>第二步: 然后再打包obj文件到lib文件</li>
</ul>


<p><code>
ar rv my.lib func.o sub.o
</code>
然后你现在就可以删掉func.o sub.o了(<code>rm -rf func.o sub.o</code>),
因为他们包含在my.lib中.</p>

<ul>
<li>第三步: 编译主文件，</li>
</ul>


<p><code>
gfortran -c main.f90
gfortran main.o my.lib -o main.exe
</code>
这样就会生成对应的main.exe了。</p>

<hr/>


<hr/>


<hr/>




<h3> vs2015+ivf2017的技术解决方案:</h3>


<ul>
<li>第一步:</li>
</ul>


<p>新建一个static library项目,并添加sub.f90,func.f90到source文件夹下。</p>

<p><img src="/images/fortrandebug/static/1.png" alt="static" /></p>

<ul>
<li>第二步: 生成解决方案</li>
</ul>


<p><img src="/images/fortrandebug/static/2.png" alt="static2" />
这样就在debug目录下得到*.lib文件</p>

<p>注意：链接需要二个文件*.obj
和*.mod文件，而myfirstLib.lib仅仅是把*.obj打包了一下，所以
还得再ivf的<font color="red"><strong>Additional Include</strong></font>中添加mod文件路径</p>

<ul>
<li>第三步:</li>
</ul>


<p>新建一个testLib  console(/subsystem:console )的项目 用于测试myfirstlib</p>

<p><img src="/images/fortrandebug/static/3.png" alt="test" />
注意由于在一个解决方案中存在多个项目所以得把test(包含主程序)设置为<font color="red">启动项目</font>。
<img src="/images/fortrandebug/static/4.png" alt="启动" /></p>

<ul>
<li>第四步:</li>
</ul>


<p>编译，生成解决方案。<font color="red"><strong>报错了</strong></font><br>。
<img src="/images/fortrandebug/static/5.png" alt="error" />
原因是没有找到*.o(func.o)包含的mod文件，解决方法是<font color="red">添加mod路径到additional include directories </font>
<img src="/images/fortrandebug/static/6.png" alt="correct" /></p>

<p>还有一个问题，我一般还需要<font color="red">生成的lib文件放在source目录下</font>，才可以编译成功，这点也需要小心。</p>

<p><font color="red"><strong>总结</strong></font>
设置lib路径的时候，在存在mod文件时候，一定得一同存在，否则未可能报符号丢失的错误。</p>

<hr/>


<hr/>


<hr/>




<h2 id="dynamic"> 动态链接</h2>


<p>动态库DLL,实际上也是可执行文件，与exe本质上是一样的。只不过dll通常
没有主程序而已（自己不能运行，只能由对应的主程序运行),他必须由exe在运行以后调用。</p>

<p>DLL的好处?
具有良好的可维护性，节约内存等特点。在windows(dll)，linux(so),mac等操作系统上，都
大量使用了DLL动态库。</p>

<p>动态链接库dll的编译过程是:</p>

<ol>
<li>编译子程序源代码，得到若干obj文件。</li>
<li>链接这些obj文件，得到dll文件（有可能带lib文件，如果是静态加载则无lib，如果是动态加载则有lib）</li>
<li>部分平台的编译器会得到导入库lib</li>
</ol>


<p>他的使用由两种方法(显示调用(动态),隐式调用(静态)):</p>

<ol>
<li>编译主程序(或其他子程序),链接时，带上导入库lib文件。</li>
<li>动态的利用系统函数加载DLL,如windows下的LoadLibrary和GetProcAddress。</li>
</ol>


<hr/>


<hr/>


<p>提前准备好公用的fortran源代码：</p>

<p><font color="red">sub.f90:</font>
``` fortran
Subroutine sub()
  !DEC$ ATTRIBUTES DLLEXPORT,ALIAS:&ldquo;sub&rdquo;::sub
  write(<em>,</em>) &lsquo;Xueqiu is a good man!&rsquo;
End Subroutine sub</p>

<p>```
<strong>注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&ldquo;sub&rdquo;::sub，是有用的exe间的符号对接。</strong></p>

<p><font color="red">func.f90:</font></p>

<p>``` fortran</p>

<p>Module funcmod
  Implicit none</p>

<p>contains</p>

<p>  Integer Function func()</p>

<pre><code>!DEC$ ATTRIBUTES DLLEXPORT,ALIAS:"func"::func
write(*,*) 'This is a func!'
func = 1
</code></pre>

<p>  End Function func
End Module funcmod</p>

<p>```</p>

<p><strong>注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&ldquo;func&rdquo;::func，是有用的exe间的符号对接。</strong></p>

<p><font color="red">main.f90:</font>></p>

<p>``` fortran
Program testDll
  use funcmod
  Implicit None
  integer :: i
  i = func()
  call sub()
End Program testDll</p>

<p>```</p>

<h3> gfortran的技术解决方案:</h3>


<ul>
<li>第一步: 生成so文件(linux下面)</li>
</ul>


<p><code>
gfotran sub.f90 func.f90 -shared -fPIC -o libmy.so
</code>
+ 第二步: 直接引用即可
<code>
gfortran main.f90 libmy.so -o main.exe
</code></p>

<ul>
<li>第三步:直接运行main.exe
有可能报错，在linux下可能需要 <code>export LD_LIBRARY_PATH=./</code>
也就是把当前目录也当作查找so文件的一个地方。</li>
</ul>


<h3> vs2015+ivf2017的技术解决方案:</h3>


<ul>
<li>第一步：新建一个Dll project
然后类似静态的方法，把func.f90,sub.f90当作一个项目，再新建一个testDll项目，并添加lib等，也要include进来目录
比如，
<img src="/images/fortrandebug/dll/main.png" alt="main" />再次基础上，在添加include路径（把mod文件添加进来）
<img src="/images/fortrandebug/dll/include.png" alt="include" /></li>
</ul>


<p>在运行的时候有可能出现运行错误<img src="/images/fortrandebug/dll/error.png" alt="error" />,这时候需要在Working Directory添加
运行dll路径，
<img src="/images/fortrandebug/dll/dll.png" alt="dll" />,</p>

<h2 id="compare"> 动态链接的静态加载和动态加载</h2>


<p><font color="blue">总之，静态库lib和动态库dll，是很多第三方库的主要形式。因此他们是学习第三方
函数库的基础知识，也是学习多种语言混编的基础。</font></p>

<ul>
<li><p>静态加载和动态加载的区别:</p></li>
<li><p>静态加载:不依赖ifort的运行库（可以到没有安装ifort的机器 上运行dll文件）  dll文件比较大</p></li>
<li>dll加载 :则会依赖ifort的运行库（dll比较小，但是如果没有ifort运行库 则会报dll错误（所以一般拷贝到别的机子的dll都是静态加载的
可采用depends walker这个软件，查看内部的dll信息。</li>
</ul>


<p>而我们可以用一张十分perfect的比较图，看出动态链接库的两种加载方式的不同，以及动态和静态的区别(10元)
<img src="/images/fortrandebug/dynamicstatic.png" alt="dynamicstatic" /></p>

<p>注意动态函数(subroutine)比静态多了一行<code>!DEC$ ATTRIBUTE DLLEXPORT,ALIAS:...</code></p>

<ul>
<li>动态加载例子
<img src="/images/fortrandebug/dll/load.png" alt="动态加载" /></li>
</ul>


<p>```  fortran
Module LoadDLL
  Implicit None
  Interface</p>

<pre><code>FUNCTION GetProcAddress( hModule, lpProcName)
  !DEC$ ATTRIBUTES DEFAULT, STDCALL, DECORATE, ALIAS:'GetProcAddress' :: GetProcAddress
  use ISO_C_Binding
  type( C_FUNPTR ) :: GetProcAddress
  integer hModule
  character(C_CHAR) , dimension(*) :: lpProcName
END FUNCTION GetProcAddress

Integer Function F_func()
End Function F_func

Subroutine F_Sub()
End Subroutine F_Sub
</code></pre>

<p>  End Interface</p>

<p>End Module LoadDLL</p>

<p>Program www_fcode_cn
  use LoadDLL
  use ISO_C_Binding
  use Kernel32 , only : LoadLibrary
  Implicit None
  Procedure(F_func) , pointer :: func
  Procedure(F_sub ) , pointer :: sub
  type( C_FUNPTR ) :: c_pointer
  integer :: hDLL , i
  character(len=32) :: dllname , funcname
  Do</p>

<pre><code>write(*,*) '您要调用哪个DLL？'
read(*,*) dllname
hDLL = LoadLibrary( trim(dllname)//c_null_char )
if ( hDLL &lt;= 0 ) then
  write(*,*) '对不起，我好像无法找到 '//trim(dllname)//' 哦~~！^_^'
else
  exit
end if
</code></pre>

<p>  End Do
  Do</p>

<pre><code>write(*,*) '您要调用哪个函数？'
read(*,*) funcname
if ( funcname=="quit" ) exit
c_pointer = GetProcAddress( hDLL , trim(funcname)//c_null_char )
if ( .not.C_ASSOCIATED(c_pointer) ) then
  write(*,*) trim(dllname)//' 里面好像没有 '//trim(funcname)//' 函数哦~~！^_^'
  cycle
end if
If ( funcname=="func" ) then
  call C_F_ProcPointer( c_pointer , func )
  i = func()
Else if ( funcname=="sub" ) then
  call C_F_ProcPointer( c_pointer , sub )
  call sub()
End If
</code></pre>

<p>  End Do<br/>
End Program www_fcode_cn</p>

<p>```</p>

<h2 id="hun"> fortran与c混编</h2>


<p>源于此:<a href="http://bbs.fcode.cn/thread-1117-1-1.html">http://bbs.fcode.cn/thread-1117-1-1.html</a></p>

<p><img src="/images/fortrandebug/hunbian/main.png" alt="混编主界面" />
混编时候注意两点:</p>

<ol>
<li>c 和 fortran 混编不需要 include</li>
<li>c/c++ 里面没有 module</li>
</ol>


<p>另外注意vc项目也得添加引用目录
<img src="/images/fortrandebug/hunbian/vcinclude.png" alt="引用目录" /></p>

<p>你也可能运行错误
<img src="/images/fortrandebug/hunbian/error.png" alt="errorV" />
注意上面红色的部分。
第一处：如果你强调必须 stdcall 协定，那么你需要在 fortran 中声明。（这个声明不是规范的，是IVF扩展的写法）
第二处：你的 C++ 里的 lens 是通过 strlen 计算出来的，而不是指针。所以 fortran 中必须加 value 修饰符，表示它是传值，而不是传址。（这是导致cpp_main.exe 中的 0x5d7005a9 (vlhm.dll) 处最可能的异常: 0xC0000005: 读取位置 0x00000021 时发生访问冲突）的原因。</p>

<p>最终正确结果如下:
<img src="/images/fortrandebug/hunbian/final.png" alt="correctV" /></p>

<p>源码信息如下:</p>

<p>TestFortranCpp.cpp</p>

<p>``` c++
// TestFortranCpp.cpp : 定义控制台应用程序的入口点。
//</p>

<h1>include &ldquo;stdafx.h&rdquo;</h1>

<h1>include &lt;stdio.h></h1>

<h1>include &lt;string.h></h1>

<p>extern &ldquo;C&rdquo; {void <em>stdcall   vlhm(char <em>, int); }
//extern &ldquo;C&rdquo; {void vlhm(char </em>,int); }
int </em>tmain(int argc, _TCHAR* argv[])
{</p>

<pre><code>char *inputfile = "E:\\phase6-power.opj";
//char *inputfile;
//char str[] = "C:\\Users\\www\\Desktop\\\\31005700.tem";
//inputfile=&amp;str[0];
vlhm(inputfile, strlen(inputfile));
return 0;
</code></pre>

<p>}</p>

<p>```</p>

<p>fileNameCheck.f90:</p>

<p>``` fortran
subroutine vlhm(pfilename, lens) Bind(C,Name=&ldquo;vlhm&rdquo;)
!DEC$ ATTRIBUTES STDCALL,DLLEXPORT::vlhm</p>

<p>  use,  Intrinsic :: ISO_C_Binding
!character(len=<em>)::filename            !c++主程序中传递进来的“Inputfile”变量
!write(</em>,<em>)&ldquo;dll里的filename值是：&rdquo;
!write(</em>,*)filename</p>

<p>  type(C_PTR) , value :: pfilename !c++主程序中传递进来的“Inputfile”变量，是C语言的指针
  integer, value::lens                                      !传入的字符串长度
  character(len=lens), target :: filename_a
  !character(len=lens) :: filename_a !pointer &amp; target
  character(len=lens),pointer::filename                     !这是Fortran的字符串</p>

<p>  call c_f_pointer( pfilename , filename )                   !把c语言的指针转换成fortran字符串</p>

<p>  filename_a = filename
  write(<em>,</em>)filename
  write(<em>,</em>)filename_a</p>

<p>  write(<em>,</em>) &lsquo;fine ok&rsquo;</p>

<p>end subroutine vlhm</p>

<p>```</p>

<p>进一步的细节资料可参考<a href="http://v.fcode.cn/video-library_dll.html">fcode视频官网</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran宫殿]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/08/09/fortrangong-dian/"/>
    <updated>2015-08-09T15:06:38+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/08/09/fortrangong-dian</id>
    <content type="html"><![CDATA[<p>任何语言应该都可以有类似宫殿的想法，在纵横交错的街道中，能过找到进口和出口，
并可以使用很多条道路完成你想去的地方，而不是拘泥于一条道路。Fortran也是如此。
诞生于1951年左右的第一个面向对象的高级语言Fortran 语言，也已经65岁左右了，它以其
快速有效的科学数值计算，一直运用于科学研究领域中。
浅显针对fortran的理解&mdash;&mdash;宫殿式的介绍.</p>

<!--more-->


<h2>宫殿</h2>

<p>  宫殿蕴含着纵横交错，阡陌交通，但是确实零落有序，复合规律。通过宫殿群来认识这门科学语言。</p>

<p>  <img src="/images/fortran/palace.jpg" alt="宫殿" /></p>

<h2>fortran</h2>

<p>fortran包含以下主要几个部分</p>

<ol>
<li><a href="#3.1">进口(初始化)</a></li>
<li><a href="#3.2">数组</a></li>
<li><a href="#3.3">过程定义(子程序和函数)</a></li>
<li><a href="#3.4">模块</a></li>
<li><a href="#3.5">出口</a></li>
<li><a href="#3.6">文件组合</a></li>
</ol>


<h3 id="3.1"> 进口</h3>


<p>   程序在开始设计的时候，需要变量初始化，也就是进行进口的布置。</p>

<p>   <img src="/images/fortran/wumen.jpg" alt="input" /></p>

<h3 id="3.2"> 数组arrays and allocatable </h3>


<p>   有时候我们发现一条街到应该相同的样式，于是我们采用数组把具有相同的
  数据形成放进一个一个的房屋。<img src="/images/fortran/wumen.jpg" alt="arrays" />
  fortran的dimension是相当常见的形式，因为他就是数组的体现。
  一般房屋的建造都是需要allocatable的属性，也就是政府指定的可用地，利用allocate建房，使用完，废弃了，就deallocate。<img src="/images/fortran/zhengdi.jpg" alt="zhengdi" /></p>

<h3 id="3.3">subroutine and function</h3>


<p>   房屋一多我们发现没法管理，于是我们就把很多的房屋放在对应的街道中去,也就是
subroutine或者function当中。</p>

<p><img src="/images/fortran/street.png" alt="街道" /></p>

<p>   另外有时候有一些已经在外建的subroutine和function一定得把他们的头和参数类型和end部分提交到program（政府）当中的INTERFACE当中，这样才能确定这块地的合法性等。
   这也是为什么fortran中有时会有额外的子程序的定义（和主文件不在同一个文件夹当中），为了让主文件能够识别，使用INTERFACE把它嵌入进来(后来引入module减少了interface的作用)。</p>

<p>   <img src="/images/fortran/zhai.jpg" alt="interface" /></p>

<h3 id="3.4"> 升级版的module</h3>


<p>  为了管理和维护房间(arrays)和街道(subs)，于是我们把他们放在一个一个区域当中。<img src="/images/fortran/module.png" alt="module" /></p>

<h3 id="3.5"> 出口 </h3>


<p>   当我们绕过了整个宫殿后，还需要布置一个或多个的出口。 <img src="/images/fortran/shenwu.jpg" alt="output" /></p>

<h3 id="3.6"> 然而我们发现我们需要更大的进口说明</h3>


<p>   有时候我们进一步组装多个输入文件，而为了方便，我们把他们组装成一个更大的进口装置，放置在最前面。</p>

<p>   <img src="/images/fortran/square.jpg" alt="square" /></p>

<h2>后续</h2>

<p>   无论模块化，还是函数化，亦或者模式化，都是基于原先大的过程式变成的改成，
   只不过是为了减少冗余、重复，同时简化和方便阅读，另外还有就是方便拓展。
   <em>从现在开始可以建立你自己的fortranlibrary modal</em> (<font color="red">一个不错的建议</font>)</p>

<p>   fortran2003出来了个type这个数据结构的创建，方便的把多个变量或者数组组合成为一种数据类型，这就有点像3D打印的功能：</p>

<p>```
  type creat_a</p>

<pre><code>real :: a
integer :: b
real,allocatable :: c(:)
</code></pre>

<p>  end type creat_a</p>

<p>  type(creat_a) :: creat_b,creat_c</p>

<p>  creat_b%a = 1.0
  creat_b%b = 2
  allocate (creat_b%c(3))
  creat_b%c = 6.0</p>

<p>  creat_c = creat_b
  creat_c%b = 8</p>

<p>```</p>

<p>type的作用类似Hashkell的data的作用，没有行为只有数据类型。
先开个头……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[积累和重写对于程序员很重要]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/06/22/ji-lei-he-zhong-xie-dui-yu-cheng-xu-yuan-hen-zhong-yao/"/>
    <updated>2015-06-22T15:35:19+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/06/22/ji-lei-he-zhong-xie-dui-yu-cheng-xu-yuan-hen-zhong-yao</id>
    <content type="html"><![CDATA[<p>积累，你才能厚积而薄发。
重写，你才能进一步认识你的积累.
重写有时候会带来对于知识的进一步深入的理解.</p>

<!--more-->


<p>今天听了<a href="http://www.fcode.cn">Fcode</a>的一个视频讲座，一个立志于开源的非营利小团队，还有一个专门的Fortran Coder的qq群。听完感觉，自己真的很有缺点，之前上过一个java培训班，其实套路都一样，写代码，重复写，直到你睡觉醒来还能写，喝了半斤52度二锅头还能写。</p>

<p>并且需要在一定的时间内回顾，重写之前你写过的东西，虽然听起来很简单，可是我经常也是忘记了这个该做的工作。</p>

<ul>
<li>积累</li>
<li>重写</li>
</ul>


<p>这两项对于学习任何一个科目都至关重要和必不可少。武功再高,也要练操。</p>

<p>fortran是简单，而且是基于解决数学、物理问题,擅长科学计算，而不是利用它做一个漂亮的界面。基本上fortran的很多算法都可以通过网络资源搜索得到，并进行适当修改，这也需要你去积累。但是fortran给你思维层次的改造不是特别明显，所以从这个角度来说，我并不觉得他是一门好的语言，但是他的计算能力还真的不错，特别是矩阵计算能力。也许我也该经常整理fortran相关的编程知识。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu Gtk-fortran]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2015/05/19/ubuntu-gtk-fortran/"/>
    <updated>2015-05-19T17:03:25+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2015/05/19/ubuntu-gtk-fortran</id>
    <content type="html"><![CDATA[<p>Fortran：一门古老的<a href="http://micro.ustc.edu.cn/Fortran/ZJDing/">计算机数值科学计算语言</a>,1950.</p>

<p>Fortran的强项就是数值计算，图形编程是一个鸡肋所在，但是有时候又需要做一些图形的展示，借助于<a href="http://www.gtk.org/">GTK+ project</a>可以方便我们达到目的.</p>

<p>GTK是c语言编写的源程序，运用到fortran需要相应的库转换,在github上找到一个<a href="https://github.com/jueqingsizhe66/gtk-fortran">gtk-fortran库</a>.下面是ubuntu上面的搭建过程(windows 未实现,可以参考 gtk+makefile)</p>

<!--more-->


<h2>Ubuntu 搭建</h2>

<h3>环境搭建</h3>

<p>GTK3+是跨平台的，既可以在windows上使用，也可以在linux上使用
下面的代码可以直接打包进一个gtk.sh文件，直接运行sh gtk.sh进行安装
``` sh</p>

<h1>1 刚装好的Ubuntu系统中已经有GCC了，但是这个GCC几乎什么文件都不能编译，因为缺少一些必须的头文件，所以要安装build-essential这个软件包</h1>

<p>sudo apt-get install build-essential</p>

<h1>2 安装GTK/GNOME开发环境  需要下载一系列的安装包，时间比较长</h1>

<p>sudo apt-get install gnome-devel gnome-devel-docs</p>

<h1>3 用于在编译GTK程序时自动找出头文件及库文件位置　　</h1>

<p>sudo apt-get install pkg-config</p>

<h1>4安装 devhelp GTK文档查看程序</h1>

<p>sudo apt-get install devhelp</p>

<h1>5安装 gtk/glib 的API参考手册及其它帮助文档</h1>

<p>sudo apt-get install libglib2.0-doc libgtk2.0-doc</p>

<h1>6  安装基于GTK的界面GTK是开发Gnome窗口的c/c++语言图形库</h1>

<p>sudo apt-get install glade libglade2-dev</p>

<h2>或者sudo apt-get install glade-gnome glade-common glade-doc</h2>

<h1>7安装gtk3.0 或者 将gtk+3.0所需的所有文件统通下载安装完毕 (安装时间较长)</h1>

<p>sudo apt-get install libgtk3*</p>

<h2>查看信息</h2>

<h1>查看 2.x 版本</h1>

<h1>pkg-config &mdash;modversion gtk+-3.0</h1>

<h1>查看pkg-config的版本</h1>

<h1>$pkg-config -version</h1>

<h1>查看是否安装了gtk</h1>

<h1>pkg-config &mdash;list-all | grep gtk</h1>

<p>```</p>

<p>这个流程做完了，就可以进行gtk测试,当然仅仅是c语言的测试</p>

<h3>测试文件</h3>

<p>``` c
//Helloworld.c</p>

<h1>include &lt;gtk/gtk.h></h1>

<p>int main(int argc,char *argv[])<br/>
{</p>

<pre><code>GtkWidget    *window;  
GtkWidget    *label;  

gtk_init(&amp;argc,&amp;argv);  

/* create the main, top level, window */  
window = gtk_window_new(GTK_WINDOW_TOPLEVEL);  

/* give it the title */  
gtk_window_set_title(GTK_WINDOW(window),"Hello World");  

/* connect the destroy signal of the window to gtk_main_quit 
 * when the window is about to be destroyed we get a notification and 
 * stop the main GTK+ loop 
 */  
g_signal_connect(window,"destroy",G_CALLBACK(gtk_main_quit),NULL);  

/* create the "Hello, World" label */  
label = gtk_label_new("GTK可以运行了！");  

/* and insert it into the main window */  
gtk_container_add(GTK_CONTAINER(window),label);  

/* make sure that everything, window and label, are visible */  
gtk_widget_show_all(window);  

/* start the main loop, and let it rest until the application is closed */  
gtk_main();  

return 0;  
</code></pre>

<p>}</p>

<p>```</p>

<h3>编译</h3>

<p><code>sh
gcc -o Helloworld Helloworld.c `pkg-config --cflags --libs gtk+-3.0`
</code></p>

<h3>运行</h3>

<p>``` sh
./Helloworld</p>

<p>```</p>

<p>如果你得到一个小窗口"GTK可以运行了" 证明你的gtk环境是正确的。</p>

<p>然后我们开始进一步配置gtk-fortran</p>

<ol>
<li>下载
<a href="https://github.com/jueqingsizhe66/gtk-fortran">https://github.com/jueqingsizhe66/gtk-fortran</a></li>
<li>编译</li>
</ol>


<p>``` sh
mkdir build
cd build</p>

<p>在gtk-fortran目录下：/home/happycamp-of-fortran/gtk-fortran/build
cmake ..
make
make install</p>

<p>```</p>

<p>会得到如下结果:
<code>sh
Install the project...
-- Install configuration: "release"
-- Installing: /usr/local/lib/libgtk-2-fortran.a
-- Installing: /usr/local/lib/libgtk-2-fortran.so.0.1
-- Installing: /usr/local/lib/libgtk-2-fortran.so
-- Installing: /usr/local/include/gtk-2-fortran/atk.mod
-- Installing: /usr/local/include/gtk-2-fortran/cairo.mod
-- Installing: /usr/local/include/gtk-2-fortran/gdk.mod
-- Installing: /usr/local/include/gtk-2-fortran/gdk_pixbuf.mod
-- Installing: /usr/local/include/gtk-2-fortran/g.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_container.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_button.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_entry.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_tree.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_menu.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_combobox.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_spin_slider.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_chooser.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_dialog.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_progress.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_accelerator.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_infobar.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_assistant.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_hl_misc.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_draw_hl.mod
-- Installing: /usr/local/include/gtk-2-fortran/gdk_pixbuf_hl.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_sup.mod
-- Installing: /usr/local/include/gtk-2-fortran/pango.mod
-- Installing: /usr/local/include/gtk-2-fortran/gdk_events.mod
-- Installing: /usr/local/include/gtk-2-fortran/gtk_os_dependent.mod
-- Installing: /usr/local/bin/gtk-2-fortran-modscan
-- Installing: /usr/local/share/gtk-fortran/gtk-2-fortran-index.csv
-- Installing: /usr/local/share/gtk-fortran/gtk-2-enumerators.lis
-- Installing: /usr/local/lib/pkgconfig/gtk-2-fortran.pc
-- Installing: /usr/local/share/man/man1/gtk-2-fortran-modscan.1
</code></p>

<p>3: 测试软件
然后你就会发现
cd 到 /home/happycamp-of-fortran/gtk-fortran/examples
然后
<code>`` sh
root at javazhao-N53SM [19:27:20ä��午] in /home/happycamp-of-fortran/gtk-fortran/examples on git:master?
$ gfortran gtkhello2.f90 -o gtkhello2</code>pkg-config &mdash;cflags &mdash;libs gtk-2-fortran`</p>

<p>就可以了. 一定记住加入的是gtk-2-fortran 这个库。而不是gtk+-2.0或者gtk+-3.0,这两个库是针对c语言的。
$ ./gtkhello2</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
