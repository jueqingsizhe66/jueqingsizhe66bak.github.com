<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[网络书屋(Web Reading Room)]]></title>
  <link href="http://jueqingsizhe66.github.io/atom.xml" rel="self"/>
  <link href="http://jueqingsizhe66.github.io/"/>
  <updated>2017-08-13T11:41:34+08:00</updated>
  <id>http://jueqingsizhe66.github.io/</id>
  <author>
    <name><![CDATA[Ye Zhaoliang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What Vim Teaches You?]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you/"/>
    <updated>2017-08-13T05:14:47+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you</id>
    <content type="html"><![CDATA[<p>vim真正教会了你什么？</p>

<p>vim带给你激情，也给了你生活的智趣，从一开始你练习<a href="http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/">Learn-vim-progressively</a>,并且现在还在练习macro和vim&rsquo;s text object.
也在不断的学习marks and tags思想，让生活轨迹有迹可循，你使用<a href="#ctrlspace">CtrlSpace</a>来保证你的workspace保存下来，并切换文件和buffer；
随着知识的增长，你使用<a href="#vimwiki">vimwiki</a>来管理你的知识，并结合<a href="https://github.com/mattn/calendar-vim">calendar</a>在vimwiki来管理你的日记。为了让文件查找，文件编辑更加方便，你使用
<a href="https://github.com/Shougo">shoudo</a>的<a href="https://github.com/Shougo/vimfiler.vim">vimfiles</a>来增强你的vim，使得你的vim变得更像一把瑞士军刀。</p>

<ul>
<li><a href="#ctrl-space">1. Ctrl-Space Plugin</a></li>
<li><a href="#vimwiki">2. Knowledge tool: Vimwiki</a></li>
<li><a href="#vimfiler">3. Vimfiles: file operation</a></li>
<li><a href="#star">4. Menu for your vim:Startify</a></li>
<li><a href="#att">5. Attach File </a></li>
</ul>


<!--more-->


<p>为了多一点对称美，你使用高丽棒作者<a href="https://github.com/junegunn">junegunn</a>的<a href="https://github.com/junegunn/vim-easy-align">vim-easy-align</a> (<font color="red">Note: <a href="https://github.com/junegunn/vim-easy-align/blob/master/EXAMPLES.md#formatting-yaml-or-json">many examples</a></font>),为了少犯错误，你加入了<a href="https://github.com/chip/vim-fat-finger">vim-fat-finger</a>,使用iabbrev来缩写你需要写的单词，或者修正错误的单词,为了编辑更加有效,你甚至引入了<a href="https://github.com/terryma/vim-multiple-cursors">vim-multiline-cursor</a>, 并进一步的你引入了<a href="https://github.com/tpope">tpope</a>的<a href="https://github.com/tpope/vim-surround">vim-surround</a>让你在书写racket(当然你也可以使用<a href="https://github.com/ruanyl/bigvim">delimiteMate</a>补全括号插件)或者lisp代码的时候更加方便一些，并为了重复或者递归使用，你也引入他的<a href="https://github.com/tpope/vim-repeat">vim-repeat</a> (vim中的很多插件都是支持增强的，比如f的增强插件<a href="https://rhysd.github.io/clever-f.vim/">clever-f</a>);为了更快捷的编辑文件行，除了使用vim text object, 你也引入了<a href="https://github.com/matze/vim-move">vim-move</a>和<a href="https://github.com/easymotion/vim-easymotion">vim-easymotion</a> (<font color="red">Very Good</font>)来移动行,使得vim文本更加结构化。</p>

<p>想着让你的vim运行得更快一些，你把你一直用的<a href="https://github.com/VundleVim/Vundle.vim">vundle</a>改为了的<a href="https://github.com/junegunn">junegunn</a><a href="https://github.com/junegunn/vim-plug">vim-plug</a>来管理你的插件,确没见得有太大的改进，简洁地使用plugins自然就快了。</p>

<p><img src="http://jueqingsizhe66.github.io/images/Aboutvim/fuck.jpg" alt="Mybeautifulvim" /></p>

<p>可以看到你的其实也增加了<a href="#star">Startify</a>的配置。</p>

<p>然而，上面这些都是你想让vim做的，下面要写的则是<font color="red">vim plugins带给你关于写作的新的概念和思想</font>，这也才是本文的重点。</p>

<p>刚开始接触vim的时候，你是用了scrooloose的<a href="https://github.com/scrooloose/nerdtree">nerdtree</a> ,<a href="https://github.com/majutsushi/tagbar">tagbar</a>,<a href="https://github.com/vim-airline/vim-airline">vim airline</a>等，你也使用了各种<a href="https://github.com/WolfgangMehner/vim-plugins">language support vim plugins</a>,也知道vim使用<a href="https://github.com/tpope">tpope</a>的<a href="https://github.com/airblade/vim-gitgutter">vim-gitgutter</a>结合git管理code, 现在让我们来看第一个vim插件ctrl-space</p>

<h3 id="ctrlspace"> 1. Ctrl-Space Plugin</h3>


<p>Github Repo: Click <a href="https://github.com/vim-ctrlspace/vim-ctrlspace">here</a></p>

<p><font color="red">核心概念:</font></p>

<p>当你在vim中使用<code>:h ctrlspace</code>时候会搜索到这些资料，</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>【1.vim desktop】: Let's imagine [ Vim ] is a writing desk. 
</span><span class='line'>【2.projects draws】 : Your [ projects ] are like drawers. 
</span><span class='line'>【3.Bookmark  favorite project】:  The [ Bookmark ] List simply displays your favorite projects.
</span><span class='line'>【4.Buffer  paper】: A [ buffer ] is like a sheet of paper lying on the desk. 
</span><span class='line'>        named buffers
</span><span class='line'>        unsaved buffers
</span><span class='line'>【5.workspace  an status snapshot of current project】:All your [ buffers ], [ tabs ], and [ tab ] layouts can be persisted as a workspace.
</span><span class='line'>It's like taking a picture of your desk with an instant camera. You can
</span><span class='line'>save multiple workspaces per project with Workspace List.
</span><span class='line'>【6.workspace  session】 : The word "workspace" can be considered a synonym of a "session". The
</span><span class='line'>ability of having so many sessions available at hand creates a lot of
</span><span class='line'>interesting use cases! For example, you can have a workspace for each task
</span><span class='line'>or feature you are working on. It's very easy to switch from one workspace
</span><span class='line'>to another.</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>然后以后可以使用大写的B，跳转到Bookmark标签栏，类似于CtrlSpace的哲学思想，会跳转到某个bookmark下的目录，通过C也可以，直接Enter《CR》键也是可以的。
</span><span class='line'>删除觉得不需要了，就D一下即可。</span></code></pre></td></tr></table></div></figure>


<p><tag>: The easiest way to think about tab pages in Vim is to consider them to be viewports, layouts, or workspaces</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tags是一个在编程中经常会使用
</span><span class='line'>而且在git的版本中也经常涉及到很多打tag的工作 (git tag  or  git tag  -a)   git checkout某个tag等
</span><span class='line'>
</span><span class='line'>其实tags只不过是对事物的一种抽象，这也是你在现实当中经常看到的class field method 注释等等，其实都可以把他们理解为一种tag，一种convinience tag</span></code></pre></td></tr></table></div></figure>


<p>在vimwiki的wiki文件的简单实用方法(经常用！！！):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>:标签名字:
</span><span class='line'>
</span><span class='line'>[[文件名#标签名字]]即可</span></code></pre></td></tr></table></div></figure>


<p>相同vim tag概念</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>"" tab encapsulation
</span><span class='line'>" tab 操作
</span><span class='line'>" http://vim.wikia.com/wiki/Alternative_tab_navigation
</span><span class='line'>" http://stackoverflow.com/questions/2005214/switching-to-a-particular-tab-in-vim
</span><span class='line'>
</span><span class='line'>" tab切换
</span><span class='line'>map &lt;leader&gt;th :tabfirst&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;tl :tablast&lt;cr&gt;
</span><span class='line'>
</span><span class='line'>map &lt;leader&gt;tj :tabnext&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;tk :tabprev&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;tn :tabnext&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;tp :tabprev&lt;cr&gt;
</span><span class='line'>
</span><span class='line'>map &lt;leader&gt;te :tabedit&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;td :tabclose&lt;cr&gt;
</span><span class='line'>map &lt;leader&gt;tm :tabm&lt;cr&gt;
</span><span class='line'>
</span><span class='line'>" normal模式下切换到确切的tab
</span><span class='line'>noremap &lt;leader&gt;1 1gt
</span><span class='line'>noremap &lt;leader&gt;2 2gt
</span><span class='line'>noremap &lt;leader&gt;3 3gt
</span><span class='line'>noremap &lt;leader&gt;4 4gt
</span><span class='line'>noremap &lt;leader&gt;5 5gt
</span><span class='line'>noremap &lt;leader&gt;6 6gt
</span><span class='line'>noremap &lt;leader&gt;7 7gt
</span><span class='line'>noremap &lt;leader&gt;8 8gt
</span><span class='line'>noremap &lt;leader&gt;9 9gt
</span><span class='line'>noremap &lt;leader&gt;0 :tablast&lt;cr&gt;
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>" Toggles between the active and last active tab "
</span><span class='line'>" The first tab is always 1 "
</span><span class='line'>let g:last_active_tab = 1
</span><span class='line'>" nnoremap &lt;leader&gt;gt :execute 'tabnext ' . g:last_active_tab&lt;cr&gt;
</span><span class='line'>" nnoremap &lt;silent&gt; &lt;c-o&gt; :execute 'tabnext ' . g:last_active_tab&lt;cr&gt;
</span><span class='line'>" vnoremap &lt;silent&gt; &lt;c-o&gt; :execute 'tabnext ' . g:last_active_tab&lt;cr&gt;
</span><span class='line'>nnoremap &lt;silent&gt; &lt;leader&gt;tt :execute 'tabnext ' . g:last_active_tab&lt;cr&gt;
</span><span class='line'>autocmd TabLeave * let g:last_active_tab = tabpagenr()
</span><span class='line'>
</span><span class='line'>" 新建tab  Ctrl+t
</span><span class='line'>nnoremap &lt;C-t&gt;     :tabnew&lt;CR&gt;
</span><span class='line'>inoremap &lt;C-t&gt;     &lt;Esc&gt;:tabnew&lt;CR&gt;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h4>默认工作类型目录</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Markers will be also used as a storage for `cs_workspaces` (workspaces of
</span><span class='line'>the current project) and `cs_files` (cached files of the current project).
</span><span class='line'>
</span><span class='line'>Default value: &gt;
</span><span class='line'>
</span><span class='line'>    let g:CtrlSpaceProjectRootMarkers = [
</span><span class='line'>         \ ".git",
</span><span class='line'>         \ ".hg",
</span><span class='line'>         \ ".svn",
</span><span class='line'>         \ ".bzr",
</span><span class='line'>         \ "_darcs",
</span><span class='line'>         \ "CVS"
</span><span class='line'>         \ ]</span></code></pre></td></tr></table></div></figure>


<p><font color="RED">Summary:</font></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   A buffer is the in-memory text of a file.
</span><span class='line'>   A window is a viewport on a buffer.
</span><span class='line'>   A tab page is a collection of windows.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>A window is a viewport onto a buffer.  You can use multiple windows on one
</span><span class='line'>buffer, or several windows on different buffers.
</span><span class='line'>
</span><span class='line'>A buffer is a file loaded into memory for editing.  The original file remains
</span><span class='line'>unchanged until you write the buffer to the file.
</span></code></pre></td></tr></table></div></figure>




<h3 id="vimwiki">2. Knowledge tool: Vimwiki</h3>


<p>Github Repo: Click <a href="https://github.com/vimwiki/vimwiki">here</a></p>

<h4>vimwki setup in vimrc:</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>• """"""""""""""""""""""""""""""""""""""""""""""""""  
</span><span class='line'>• " vimwiki  
</span><span class='line'>• let g:vimwiki_use_mouse = 1  
</span><span class='line'>• let g:vimwiki_list_ignore_newline = 0  
</span><span class='line'>• let g:vimwiki_hl_headers = 0  
</span><span class='line'>• " vimwiki打开折叠  
</span><span class='line'>• "let g:vimwiki_folding = 1  
</span><span class='line'>• let g:vimwiki_camel_case = 0  
</span><span class='line'>• let g:vimwiki_list_ignore_newline = 0  
</span><span class='line'>• let g:vimwiki_CJK_length = 1  
</span><span class='line'>•   
</span><span class='line'>• "设定文件浏览器目录为当前目录  
</span><span class='line'>• set bsdir=buffer      
</span><span class='line'>• "set autochdir  
</span><span class='line'>•   
</span><span class='line'>• " 日历插件  
</span><span class='line'>• map ca :Calendar&lt;cr&gt;  
</span><span class='line'>•   
</span><span class='line'>• map &lt;S-Space&gt; :&lt;C-Space&gt;  
</span><span class='line'>•   
</span><span class='line'>• " vimwiki  
</span><span class='line'>• let g:vimwiki_list = [{'path': '~/Wiki/wiki/', 'path_html': '~/Wiki/', 'auto_export': 1}]  
</span><span class='line'>• " 转化为Html文件  
</span><span class='line'>• map &lt;S-F4&gt; :Vimwiki2HTML&lt;cr&gt;  
</span><span class='line'>•   
</span><span class='line'>• " 设置颜色  
</span><span class='line'>• hi VimwikiHeader1 guifg=#FF0000  
</span><span class='line'>• hi VimwikiHeader2 guifg=#00FF00  
</span><span class='line'>• hi VimwikiHeader3 guifg=#0000FF  
</span><span class='line'>• hi VimwikiHeader4 guifg=#FF00FF  
</span><span class='line'>• hi VimwikiHeader5 guifg=#00FFFF  
</span><span class='line'>hi VimwikiHeader6 guifg=#FFFF00  </span></code></pre></td></tr></table></div></figure>


<h4>vimwiki tagbar 集成</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>------------------------------------------------------------------------------
</span><span class='line'>Tagbar integration                                            *vimwiki-tagbar*
</span><span class='line'>
</span><span class='line'>As an alternative to the Table of Contents, you can use the Tagbar plugin
</span><span class='line'>(http://majutsushi.github.io/tagbar/) to show the headers of your wiki files
</span><span class='line'>in a side pane.
</span><span class='line'>Download the Python script from
</span><span class='line'>https://raw.githubusercontent.com/vimwiki/utils/master/vwtags.py and follow
</span><span class='line'>the instructions in it.</span></code></pre></td></tr></table></div></figure>


<p>效果如下，</p>

<p><img src="http://jueqingsizhe66.github.io/images/AboutVim/tagbar.png" alt="tagbar" /></p>

<h3 id="vimfiler"> 3. Vimfiles: A tool for file operations </h3>


<p>Github Repo: click <a href="https://github.com/Shougo/vimfiler.vim"> here </a></p>

<p>vimfiler setup in vimrc</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>"for vimfiler
</span><span class='line'>let g:vimfiler_enable_auto_cd=1
</span><span class='line'>"call vimfiler#set_execute_file('txt', 'notepad')
</span><span class='line'>call vimfiler#set_execute_file('txt', 'gvim')
</span><span class='line'>call vimfiler#set_execute_file('c', ['gvim', 'notepad'])
</span><span class='line'>
</span><span class='line'>let g:vimfiler_as_default_explorer = 1
</span><span class='line'>
</span><span class='line'>" Enable file operation commands.
</span><span class='line'>" Edit file by tabedit.
</span><span class='line'>"call vimfiler#custom#profile('default', 'context', {
</span><span class='line'>"      \ 'safe' : 0,
</span><span class='line'>"      \ 'edit_action' : 'tabopen',
</span><span class='line'>"      \ })
</span><span class='line'>
</span><span class='line'>" Like Textmate icons.
</span><span class='line'>let g:vimfiler_tree_leaf_icon = ' '
</span><span class='line'>"let g:vimfiler_tree_closed_icon = '▸'
</span><span class='line'>"let g:vimfiler_tree_opened_icon = '▾'
</span><span class='line'>let g:vimfiler_file_icon = '-'
</span><span class='line'>let g:vimfiler_marked_file_icon = '*'
</span><span class='line'>
</span><span class='line'>let g:vimfiler_safe_mode_by_default=0 
</span><span class='line'>  " Use trashbox.
</span><span class='line'>  " Windows only and require latest vimproc.
</span><span class='line'>let g:unite_kind_file_use_trashbox = 1
</span><span class='line'>""  you can create a .vim file, then source it
</span><span class='line'>"need everything.exe
</span><span class='line'>"nnoremap &lt;Leader&gt;f :Unite file buffer file_rec file_mru everything&lt;CR&gt;
</span><span class='line'>nnoremap &lt;Leader&gt;f :VimFiler&lt;CR&gt;
</span><span class='line'>nnoremap &lt;leader&gt;l :Unite line&lt;CR&gt;
</span><span class='line'>let g:unite_source_everything_limit = 100
</span><span class='line'>let g:unite_source_everything_full_path_search = 1
</span><span class='line'>let g:unite_source_everything_posix_regexp_search = 1
</span><span class='line'>let g:unite_source_everything_async_minimum_length = 3
</span><span class='line'>let g:unite_source_everything_cmd_path = 'C:\\Users\\YeZhao\\.vim\\es\\es.exe'
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>由于vimfiler的使用也了解到了 <a href="https://github.com/ggreer/the_silver_searcher">ag</a>插件（一个特别好用的搜索插件,在ubuntu底下直接使用ag &ldquo;expression&rdquo; 找到当前文件夹所有文件内容  包含表达式的行数据 相当快速）</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>H作用打开shell  x打开文件夹的意思
</span><span class='line'>
</span><span class='line'>L打开磁盘
</span><span class='line'>Load
</span><span class='line'>&回到project目录  那是相当有用的
</span><span class='line'>~回到.vim目录
</span><span class='line'>
</span><span class='line'>e编写文件
</span><span class='line'>N 创建文件
</span><span class='line'>K创建文件夹
</span><span class='line'>
</span><span class='line'>#全选
</span><span class='line'>*全部选？
</span><span class='line'>
</span><span class='line'>c复制
</span><span class='line'>d删除
</span><span class='line'>m移动
</span><span class='line'>
</span><span class='line'>先用m表示选定 然后d删除(重要操作)
</span><span class='line'>m移动
</span><span class='line'>c复制</span></code></pre></td></tr></table></div></figure>


<p><strong><u>有意思的是:</u></strong></p>

<p>使用m然后r，可以跳出一个新的编辑窗口，进行文件名的修改，这是相当好的实现。</p>

<p>转化为HTML</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="p">:</span>Vimwiki2HTML – Convert current wiki page <span class="k">to</span> HTML
</span><span class='line'><span class="p">:</span>VimwikiAll2HTML – Convert <span class="k">all</span> your wiki pages <span class="k">to</span> HTML
</span></code></pre></td></tr></table></div></figure>




<h3 id="star"> 4. Startify Plugin</h3>


<p>Github Repo: click <a href="https://github.com/mhinz/vim-startify"> here </a></p>

<h4>vim 全屏</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> <span class="k">w</span>:full_screen<span class="p">=</span><span class="m">0</span>
</span><span class='line'>    map :<span class="k">call</span> FullScreen<span class="p">()</span>
</span><span class='line'>func<span class="p">!</span> FullScreen<span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">w</span>:full_screen<span class="p">==</span><span class="m">1</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">w</span>:full_screen<span class="p">=</span><span class="m">0</span>
</span><span class='line'>    :<span class="k">simalt</span> <span class="p">~</span>R
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    :<span class="k">simalt</span> <span class="p">~</span><span class="k">X</span>
</span><span class='line'>    <span class="k">let</span> <span class="k">w</span>:full_screen<span class="p">=</span><span class="m">1</span>
</span><span class='line'>    <span class="k">endif</span>
</span><span class='line'>endfunc
</span></code></pre></td></tr></table></div></figure>


<h4>vim-easy-align常用命令</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>Nope
</span></code></pre></td></tr></table></div></figure>


<h4>vim-surround 常用命令</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="m">1</span>. <span class="k">cs</span>&quot;&#39;
</span><span class='line'><span class="m">2</span>. <span class="k">cs</span>&#39;&quot;
</span><span class='line'><span class="m">3</span>. <span class="k">cs</span>&#39;<span class="p">&lt;</span><span class="k">q</span><span class="p">&gt;</span>
</span><span class='line'><span class="m">4</span>. <span class="nb">cst</span>&quot;
</span><span class='line'><span class="m">5</span>. <span class="k">cs</span>&quot;<span class="k">t</span>
</span><span class='line'><span class="m">6</span>. <span class="k">ds</span>&quot;
</span><span class='line'><span class="m">7</span>. ysiw&quot;
</span><span class='line'><span class="m">8</span>. yssb <span class="p">==</span> yss<span class="p">)</span>
</span><span class='line'><span class="m">9</span>. S&quot;  可视化模式选择快 然后大S，这点类似于Multiple<span class="p">-</span>Cursor的Ctrl<span class="p">+</span><span class="k">N</span>命令
</span></code></pre></td></tr></table></div></figure>


<h4>vim copy file name</h4>

<p>你使用<a href="https://github.com/AdamWhittingham/vim-copy-filename">vim-copy-filename</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot;&quot; for vim-copy-filename</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">cp</span> :CopyRelativePath<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">cl</span> :CopyRelativePathAndLine<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span>cP :CopyAbsolutePath<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">cf</span> :CopyFileName<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'>nmap <span class="p">&lt;</span>leader<span class="p">&gt;</span><span class="k">cd</span> :CopyDirectoryPath<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>额外一些插件的备注</p>

<ol>
<li><a href="https://github.com/haya14busa"> Haya14busa </a>提供的<a href="https://github.com/haya14busa/incsearch.vim"> incsearch </a> 增加了statusline的查找词当前数 和总个数</li>
<li><a href="https://github.com/itchyny/vim-cursorword"> Vim-cursorword </a>表示添加下划线。</li>
<li><a href="https://github.com/AndrewRadev/splitjoin.vim"> AndrewRadev/splitjoin.vim  </a>是提供类似于perl的当行模式的插件[gS gJ]。在scheme估计比较少用到。</li>
</ol>


<p>一直遗忘的一个快捷查看命令
<code>Ctrl+E</code> 往下滚屏  <code>Ctrl+Y</code> 往上滚屏</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>运行的话<span class="p">,</span>进入底线命令模式<span class="p">,</span>用:<span class="p">!</span>perl %就可以运行<span class="p">,</span>或者可以绑定一个快捷键组合<span class="p">,</span> %表示当前文件的意思
</span></code></pre></td></tr></table></div></figure>


<p>最后，编辑器界面展示的应全是代码，不应该有<u>工具条、菜单、滚动条</u>浪费空间的元素，另外，编程是种<font color="red">精神高度集中的脑力劳动</font>，不应出现<s>闪烁光标、花哨鼠标</s>这些分散注意力的东东</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>写到这边我去睡觉了，梦中梦到了前半辈子比较重要的三个女人，我妈以及另外两个从小长大的妇女<span class="p">(</span>不说女生了<span class="p">),</span>街道上偶遇她们正在端着一个冰盒沿街发送，也不像是生了孩子似的，但梦中是那么真实又带着虚的东西（所以人是一个最精良的仪器，拥有最直觉的第六感，又拥有最会惹事的直觉），我妈骑着自行车从我们三身边走过，前方又出现一个特别活泼的<span class="s2">&quot;妇女&quot;</span><span class="p">,</span>在我的环境中还有篮球这一个概念，我的梦（由我的身体<span class="p">+</span>癫痫的精神状态<span class="p">+</span>疲惫产生的一种组合的事件）把我带到一个篮球场，后来我又去了
</span><span class='line'>
</span><span class='line'>我一个哥们那边，终于有男的出现，我发现我走过的路总是不缺乏女生<span class="p">(</span>所以我是趋向于好色之徒<span class="p">,</span>本来也是<span class="p">),</span> 我梦到了我儿时的
</span><span class='line'>阴影我特别怕的一个男生，喜欢拿刀砍人，犯冲，特别好斗，但缺少脑子。我写出来了，因为我想克服它。梦向黄大仙一样，它放屁的效果具有致幻的效果，能让人陷入幻境中不得自拔，人每天晚上也像黄大仙附体一样坐着春秋大梦。
</span><span class='line'>
</span><span class='line'>但从我身边路过的那些女生，都已经变得不真实，我身边有一个wife如胶似漆的黏着我，怎么我就不懂珍惜呢。时代的进步，需要梦的催化，世界上无德的传销机构也在利用着洗脑在铸造着同一类人，这些人把思维当作无趣，而非智趣。
</span><span class='line'>
</span><span class='line'>匆匆而过三十载，岁月不饶人，也不等人<span class="p">(</span>也就是你学会了用时间的非定常特性来观察人生）。乐观、不自信一直伴随着我成长，然而我却不知道痛苦才是生活的本源，享受
</span><span class='line'>痛苦，才能拥有些许的快乐。Enjoy Painess<span class="p">!</span>但我不想把pain带给亲人，身边的人。我是一个自私的人，没有团队精神，不太会
</span><span class='line'>替别人考虑的人（当然自从有了她，我得替她考虑，但是考虑得还很少，我很对不起她）
</span><span class='line'>
</span><span class='line'>也就是生活的智趣源于痛苦，痛苦的根源诞生了时代的进步，和智趣的发展。
</span><span class='line'>
</span><span class='line'>写到这边，就先停笔把，继续回到<span class="k">vim</span>当中，他也像人，能够感知到字符的变化，感知文本结构（你赋予了它思考的能力），能够
</span><span class='line'>让你编辑得更顺畅些;<span class="k">vim</span>像刀、人也可以像刀，磨砺你自己这把最重要的一把刀把！
</span></code></pre></td></tr></table></div></figure>


<h3 id="att"> 5. Attach File </h3>


<p>Windows Version dotVim Repo: [ here ]
Ubuntu Version dotVim Repo: [ here ]</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you/'>http://jueqingsizhe66.github.io/blog/2017/08/13/what-vim-teaches-you/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CPS Intutive]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive/"/>
    <updated>2017-08-11T23:03:15+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive</id>
    <content type="html"><![CDATA[<p>通过deep&amp;coB 和deepB的不同CPS实现，说明letcc版本是直接跳出surrounding，而不管周边的其他计算。
并且可以这样认为所有的scheme lambda表达式都可以理解为kn表达式的过程<font color="red">(好处1)</font>，这种直观的解释方便理解
绕来绕去的过程。并且cps style尾巴的k既可以是变量也可以是函数 <font color="red">(好处2)</font>。</p>

<!--more-->


<h2>1. 普通形式</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;; Normal Form</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">append2</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lisa</span> <span class="nv">lisb</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lisa</span><span class="p">)</span> <span class="nv">lisb</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lisa</span><span class="p">)</span> <span class="p">(</span><span class="nf">append2</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lisa</span><span class="p">)</span> <span class="nv">lisb</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">fact</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>         <span class="mi">1</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="p">(</span><span class="nf">fact</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">fact</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>2. Tail form</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">append3</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lisa</span> <span class="nv">lisb</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">ap2</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="nv">a</span><span class="p">)</span> <span class="nv">b</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">ap2</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">a</span><span class="p">)</span> <span class="nv">b</span><span class="p">)))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">ap2</span> <span class="p">(</span><span class="nb">reverse </span><span class="nv">lisa</span><span class="p">)</span> <span class="nv">lisb</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">fact2</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">fact-help</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">help</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">zero? </span><span class="nv">n</span><span class="p">)</span>
</span><span class='line'>                              <span class="nv">help</span>
</span><span class='line'>                              <span class="p">(</span><span class="nf">fact-help</span> <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">n</span> <span class="nv">help</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">fact-help</span> <span class="nv">n</span> <span class="mi">1</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">fact2</span> <span class="mi">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. deep&amp;coB</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deep&amp;coB</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">()</span>
</span><span class='line'>         <span class="p">(</span><span class="k">set! </span><span class="nv">toppings</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">k</span> <span class="ss">&#39;pizza</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">k</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="o">&#39;</span><span class="p">()))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="mi">6</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>         <span class="c1">; &#39;((((((pizza))))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="mi">4</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span> <span class="c1">; &#39;((((pizza))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>cps风格 lambda(x) x ,可以使用k1  k2 k3 的风格进行替换,cps风格仅仅是编程的风格，letcc是其中的一种体现.</p>

<h2>4. deepB</h2>

<p>letcc风格 直接跳出！！（也就是不管其他计算，直接他就是返回值！！）</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">toppings</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deepB</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">jump</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">set! </span><span class="nv">toppings</span> <span class="nv">jump</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">&#39;pizza</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">deepB</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>5. bons and kons</h2>

<p>进一步理解cps风格也可以看看kons和bons的实现</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="o">#</span><span class="nv">lang</span> <span class="nv">racket</span>
</span><span class='line'><span class="c1">; kons the magnificent</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">kons</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">kar</span> <span class="nv">kdr</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">selector</span><span class="p">)</span>          <span class="c1">; returns lambda (selector)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">selector</span> <span class="nv">kar</span> <span class="nv">kdr</span><span class="p">))))</span>     <span class="c1">; calls selector with kar and kdr arguments</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; kar</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">kar</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>                   <span class="c1">; applies selector on (a d) and returns &#39;a (car)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">c</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; kdr</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">kdr</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>                   <span class="c1">; applies selector on (a d) and returns d (cdr)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">c</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">d</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Examples of kons kar kdr</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="nf">kar</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;a</span> <span class="o">&#39;</span><span class="p">()))</span>                 <span class="c1">; &#39;a</span>
</span><span class='line'><span class="p">(</span><span class="nf">kdr</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;a</span> <span class="o">&#39;</span><span class="p">()))</span>                 <span class="c1">; &#39;()</span>
</span><span class='line'><span class="p">(</span><span class="nf">kar</span> <span class="p">(</span><span class="nf">kdr</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;a</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">()))))</span> <span class="c1">; &#39;b</span>
</span><span class='line'><span class="p">(</span><span class="nf">kar</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;a</span> <span class="p">(</span><span class="nf">kons</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">())))</span> <span class="c1">; &#39;a</span>
</span><span class='line'><span class="c1">; Another cons</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">bons</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">kar</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">kdr</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">selector</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">selector</span>
</span><span class='line'>         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="k">set! </span><span class="nv">kdr</span> <span class="nv">x</span><span class="p">))</span>
</span><span class='line'>         <span class="nv">kar</span>
</span><span class='line'>         <span class="nv">kdr</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Another kar</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">bar</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">c</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">s</span> <span class="nv">a</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">a</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Another kdr</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">bdr</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">c</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">s</span> <span class="nv">a</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">d</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; set-kdr</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">set-kdr</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">c</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">((</span><span class="nf">c</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">s</span> <span class="nv">a</span> <span class="nv">d</span><span class="p">)</span> <span class="nv">s</span><span class="p">))</span> <span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; create kons using set-kdr and bons</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">kons2</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">d</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">c</span> <span class="p">(</span><span class="nf">bons</span> <span class="nv">a</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">set-kdr</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)</span>
</span><span class='line'>      <span class="nv">c</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Example of kons2 bar and bdr</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="nf">bar</span> <span class="p">(</span><span class="nf">kons2</span> <span class="ss">&#39;a</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>       <span class="c1">; &#39;a</span>
</span><span class='line'><span class="p">(</span><span class="nf">bdr</span> <span class="p">(</span><span class="nf">kons2</span> <span class="ss">&#39;a</span> <span class="o">&#39;</span><span class="p">(</span><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span><span class="p">)))</span>       <span class="c1">; &#39;(1 2 3)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">bad</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nf">will-stop?</span> <span class="nv">bad</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">eternity</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">eternity</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">eternity</span> <span class="nv">x</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="https://cgi.soic.indiana.edu/~c311/lib/exe/fetch.php?media=cps-notes.scm">cps变换教程</a></li>
<li><a href="http://www.ece.uc.edu/~franco/C511/html/Scheme/ycomb.html">Y combinator推导</a></li>
</ul>


<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive/'>http://jueqingsizhe66.github.io/blog/2017/08/11/cps-intutive/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Little Scheme to Season Scheme]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme/"/>
    <updated>2017-08-11T23:01:17+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme</id>
    <content type="html"><![CDATA[<p>The Little Scheme(TLS) 提出了<a href="#rember">rember</a>,<a href="#multirember">multirember</a>,<a href="#mrs">multirember*</a>以及<a href="#mrsc">multirember&amp;Col collector</a>等系列函数的定义，而在The Season  Scheme(TSS) 进一步改进了rember系列函数，
使用<a href="#rlet">let</a>、<a href="#rletrec">letrec</a>、<a href="#rletcc">letcc</a>进行改写，并结合leftmost和deep函数的想法，又提出了<a href="#rs">rember*</a>的函数，该函数表示删除最左边的函数。在此过程中，剖析每一个简单的函数(并由此带来<strong>智趣</strong>)，
并进行改进，升级，提炼，从中可以体味到<a href="http://blog.sina.com.cn/s/blog_bffd70da0101f4sl.html">华罗庚老先生</a>说的&#8221;书越读越薄，并积厚薄书&#8221;的感觉,从繁杂中感受直观的本质，
借以理解事物，从另外一个角度看待事物。</p>

<ul>
<li><a href="#TLS">一、The Little Scheme</a>

<ul>
<li><a href="#rember">rember</a></li>
<li><a href="#multirember">multirember</a></li>
<li><a href="#mrs">multiremberStar</a></li>
<li><a href="#mrsc">multiremberStarCol</a></li>
</ul>
</li>
<li><a href="#TSS">二、The Season Scheme</a>

<ul>
<li><a href="#rlet">rember-let</a></li>
<li><a href="#rletrec">rember-letrec</a></li>
<li><a href="#rletcc">rember-letcc</a></li>
<li><a href="#rs">rember star</a></li>
<li><a href="#di">depthStar improvement</a></li>
</ul>
</li>
</ul>


<!--more-->




<h2 id="TLS"> 一、The Little Scheme </h2>


<hr/>


<p>scheme的核心数据结构是List，通过list进行算法的演算，而rember是其中的一种算法，用于去除其中的一个元素。
并在rember的同级函数中，也定义了subst，member，insert left, insert right等。在TLS书中也提出了这些函数的相同之处并最终使用insert-g来统一各个函数，这是不错的思想。</p>

<h3 id="rember">1.1 rember </h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember-f</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">test?</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">((</span><span class="nf">test?</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">((</span><span class="nf">multirember-f</span> <span class="nv">test?</span><span class="p">)</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another related procedures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">insertL</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">old</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">old</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">old</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nf">insertL</span> <span class="nv">new</span> <span class="nv">old</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">insertLR</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">insertLR</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>进一步可以参考 <a href="http://jueqingsizhe66.github.io/blog/2015/05/18/the-little-scheme-and-part-of-tss/">TLS and TSS Backup</a></p>

<hr/>


<p>为了更进一步删除一个列表(未嵌套多个list)时候所有的元素(定义为lat version)</p>

<h3 id="multirember">1.2 multirember </h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multirember-f</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">test?</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">((</span><span class="nf">test?</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>               <span class="p">((</span><span class="nf">multirember-f</span> <span class="nv">test?</span><span class="p">)</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">((</span><span class="nf">multirember-f</span> <span class="nv">test?</span><span class="p">)</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another related procedures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;(insertL &#39;a &#39;b &#39;(a b c (a b c)))</span>
</span><span class='line'><span class="c1">;&#39;(a a b c (a b c))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;(insertLR &#39;water &#39;a &#39;b &#39;(a bc b c d (a c b)))</span>
</span><span class='line'><span class="c1">;&#39;(water a bc b c d (a c b))</span>
</span><span class='line'>
</span><span class='line'> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">insertLR</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<h3 id="mrs">1.3 multirember* </h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="k">cond </span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">evens-only*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">even? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">evens-only*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">evens-only*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">evens-only*</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">evens-only*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another related procedures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR*let</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rest</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">cond </span>
</span><span class='line'>            <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="nv">rest</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="nv">rest</span><span class="p">)))</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">rest</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">rest</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rest</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR*letrec</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">mul-help</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>           <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">cond </span>
</span><span class='line'>             <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>             <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mul-help</span> <span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">multiinsertLR*let</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">multiinsertLR*</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">multiinsertLR</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">multiinsertLR*letrec</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR*letreclet</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">mul-help</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>           <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rest</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>           <span class="p">(</span><span class="k">cond </span>
</span><span class='line'>             <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="nv">rest</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="nv">rest</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">rest</span><span class="p">)))))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>           <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">rest</span> <span class="p">(</span><span class="nf">mul-help</span>  <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rest</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">mul-help</span> <span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">multiinsertLR*letreclet</span> <span class="ss">&#39;water</span> <span class="ss">&#39;a</span> <span class="ss">&#39;b</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">a</span> <span class="nv">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">)))</span>
</span><span class='line'><span class="o">&#39;</span><span class="p">(</span><span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span> <span class="nv">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="p">(</span><span class="nf">water</span> <span class="nv">a</span> <span class="nv">b</span> <span class="nv">water</span> <span class="nv">c</span> <span class="nv">d</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<h3 id="mrsc">1.4 multiremberstar and collector </h3>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multirember*co</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span> <span class="nv">null?</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="k">quote </span><span class="p">())</span> <span class="p">(</span><span class="k">quote </span><span class="p">())))</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span> <span class="nv">car</span> <span class="nv">lat</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">multirember*co</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span> <span class="nv">newlat</span> <span class="nv">seen</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">col</span> <span class="nv">newlat</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                                            <span class="nv">seen</span><span class="p">)))))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">multirember*co</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">seen</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">newlat</span><span class="p">)</span> <span class="nv">seen</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">multirember*co</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">al</span> <span class="nv">as</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">multirember*co</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">dl</span> <span class="nv">ds</span><span class="p">)</span>
</span><span class='line'>                                           <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">al</span> <span class="nv">dl</span><span class="p">)</span>
</span><span class='line'>                                                <span class="p">(</span><span class="nb">cons </span><span class="nv">as</span> <span class="nv">ds</span><span class="p">))))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another related procedures:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">col</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">null? </span><span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">a-friend</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">length </span><span class="nv">x</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">a-friend-y</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">length </span><span class="nv">y</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">a-friend-z</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">a-friend-zp</span>
</span><span class='line'>   <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span> <span class="nv">y</span> <span class="nv">z</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">y</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">z</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">evens-only*col</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">col</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">1</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">even? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">evens-only*col</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">newlat</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">L</span><span class="p">)</span> <span class="nv">R</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">evens-only*col</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                                      <span class="p">(</span><span class="nf">col</span> <span class="nv">newlat</span> <span class="nv">L</span>
</span><span class='line'>                                           <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">R</span><span class="p">)))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">evens-only*col</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">al</span> <span class="nv">ale</span> <span class="nv">ari</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">evens-only*col</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>                                         <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">dl</span> <span class="nv">dle</span> <span class="nv">dri</span><span class="p">)</span>
</span><span class='line'>                                           <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">al</span> <span class="nv">dl</span><span class="p">)</span>
</span><span class='line'>                                                <span class="p">(</span><span class="nb">* </span><span class="nv">ale</span> <span class="nv">dle</span><span class="p">)</span>
</span><span class='line'>                                                <span class="p">(</span><span class="nb">+ </span><span class="nv">ari</span> <span class="nv">dri</span><span class="p">))))))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLRo</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">col</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">multiinsertLRo</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="nv">newlat</span><span class="p">))</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">+ </span><span class="nv">L</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">R</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">multiinsertLRo</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="nv">newlat</span><span class="p">))</span>
</span><span class='line'>                              <span class="nv">L</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">R</span> <span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">multiinsertLRo</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">newlat</span><span class="p">)</span>
</span><span class='line'>                              <span class="nv">L</span>
</span><span class='line'>                              <span class="nv">R</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">multiinsertLR*o</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="nv">lat</span> <span class="nv">col</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">atom?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="k">and </span><span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">pair? </span><span class="nv">x</span><span class="p">))</span> <span class="p">(</span><span class="nb">not </span><span class="p">(</span><span class="nb">null? </span><span class="nv">x</span><span class="p">)))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">col</span> <span class="o">&#39;</span><span class="p">()</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldL</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">multiinsertLR*o</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldL</span> <span class="nv">newlat</span><span class="p">))</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nb">+ </span><span class="nv">L</span> <span class="mi">1</span><span class="p">)</span> <span class="nv">R</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">oldR</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">multiinsertLR*o</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">oldR</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">new</span> <span class="nv">newlat</span><span class="p">))</span>
</span><span class='line'>                                 <span class="nv">L</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">R</span> <span class="mi">1</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">multiinsertLR*o</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">newlat</span> <span class="nv">L</span> <span class="nv">R</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">newlat</span><span class="p">)</span>
</span><span class='line'>                                 <span class="nv">L</span>
</span><span class='line'>                                 <span class="nv">R</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">multiinsertLR*o</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">al</span> <span class="nv">ale</span> <span class="nv">ari</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">multiinsertLR*o</span> <span class="nv">new</span> <span class="nv">oldL</span> <span class="nv">oldR</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                                           <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">dl</span> <span class="nv">dle</span> <span class="nv">dri</span><span class="p">)</span>
</span><span class='line'>                                             <span class="p">(</span><span class="nf">col</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">al</span> <span class="nv">dl</span><span class="p">)</span>
</span><span class='line'>                                                  <span class="p">(</span><span class="nb">+ </span><span class="nv">ale</span> <span class="nv">dle</span><span class="p">)</span>
</span><span class='line'>                                                  <span class="p">(</span><span class="nb">+ </span><span class="nv">ari</span> <span class="nv">dri</span><span class="p">))))))))))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<h2 id="TSS"> 二、The Season Scheme </h2>




<hr/>


<p>由<a href="#member">member</a>和rember又可以深入进行剖析，于是引进了member的升级版本two-in-a-lat,未包含TSS的最后一个two-in-a-lat的实现，并通过let,letrec,letcc改写TLS中的rember系列函数，在结合<a href="#lm">leftmost</a>和<a href="#deep">deep(Later on,deep有两外一层意思就是产生n层的pizza)</a>函数，升级rember到删除最左边的一个元素。</p>

<p>Member实际上在所有的函数的实现中都有对应的组成，他是一个十分重要的组成部分，包括基于member的<a href="#union">union</a>,<a href="#intersect">intersect</a>,<a href="#intersectall">intersectall</a>函数的，一个相对基础的函数。</p>

<h4 id="member">the  definition of member</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">member?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">member </span><span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; member-letrec version</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">member?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">yes?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                 <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="no">#t</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">yes?</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">yes?</span> <span class="nv">l</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>现在让我们看看two-in-a-lat的引申(通过member)</p>

<h4 id="two">Two -in -a -lat</h4>


<p>包含two-in-a-lat(用member2代替),并附加sum-of-prefix和scramble函数的实现，目的是说如果你想让函数知道额外的信息，可以通过增加参数的方法。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">member-letrec-ju?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">yes?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">yes?</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">yes?</span> <span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">member2?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">preceding</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">preceding</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">member2?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; (member2? &#39;a &#39;(a b c))  bugs!</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">memberContinue?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">M2?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">preceding</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">preceding</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">M2?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">M2?</span> <span class="o">&#39;</span><span class="p">()</span> <span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">memberContinueAlter?</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">M2?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">preceding</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                      <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">pre</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)))</span>
</span><span class='line'>                         <span class="p">(</span><span class="k">or </span><span class="p">(</span><span class="nb">eq? </span><span class="nv">preceding</span> <span class="nv">pre</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">(</span><span class="nf">M2?</span> <span class="nv">pre</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">)))))))))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">M2?</span> <span class="o">&#39;</span><span class="p">()</span> <span class="nv">lat</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">sum-of-prefixes</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">sum-of-prefixes-b</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">sonssf</span> <span class="nv">tup</span><span class="p">)</span>     <span class="c1">; sonssf stands for &#39;sum of numbers seen so far&#39;</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">null? </span><span class="nv">tup</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">sonssf</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">sum-of-prefixes-b</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">+ </span><span class="nv">sonssf</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">cdr </span><span class="nv">tup</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">sum-of-prefixes-b</span> <span class="mi">0</span> <span class="nv">tup</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;  (sum-of-prefixes &#39;(1 2 3 4))</span>
</span><span class='line'><span class="c1">; &#39;(1 3 6 10)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">sum-of-prefixes1</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">S</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">sss</span> <span class="nv">tup</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="nv">tup</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>               <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">+ </span><span class="nv">sss</span> <span class="nv">first</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">S</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">sss</span> <span class="nv">first</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tup</span><span class="p">)))))))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">S</span> <span class="mi">0</span> <span class="nv">tup</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">scramble-b</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span> <span class="nv">rev-pre</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">one?</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">= </span><span class="nv">n</span>  <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">sub1</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">define </span><span class="nv">pick</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">one?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">pick</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">tup</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">pick</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)</span> <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)</span> <span class="nv">rev-pre</span><span class="p">))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">scramble-b</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tup</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)</span> <span class="nv">rev-pre</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">scramble</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">scramble-b</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span> <span class="nv">rev-pre</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="k">define </span><span class="nv">one?</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">= </span><span class="nv">n</span>  <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="k">define </span><span class="nv">sub1</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>                <span class="p">(</span><span class="k">define </span><span class="nv">pick</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                      <span class="p">((</span><span class="nf">one?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">pick</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="nv">tup</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)))</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">pick</span> <span class="nv">first</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rev-pre</span><span class="p">))</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">scramble-b</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tup</span><span class="p">)</span>
</span><span class='line'>                                 <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rev-pre</span><span class="p">)))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">scramble-b</span> <span class="nv">tup</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">scramble2</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">one?</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">= </span><span class="nv">n</span>  <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">sub1</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">- </span><span class="nv">n</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">pick</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">n</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nf">one?</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">pick</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">n</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">scramble-b</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">tup</span> <span class="nv">rev-pre</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="nv">tup</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nb">car </span><span class="nv">tup</span><span class="p">)))</span>
</span><span class='line'>                     <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">pick</span> <span class="nv">first</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rev-pre</span><span class="p">))</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">scramble-b</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">tup</span><span class="p">)</span>
</span><span class='line'>                                       <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="nv">rev-pre</span><span class="p">)))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">scramble-b</span> <span class="nv">tup</span> <span class="o">&#39;</span><span class="p">()))))</span>
</span></code></pre></td></tr></table></div></figure>


<hr/>




<h3 id="rlet">2.1 rember-let </h3>


<p>Note: use let to define the repeated expression, so simplify the definition of the procedure.</p>

<hr/>




<h3 id="rletrec">2.2 rember-letrec </h3>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">;;; see at the TSS</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>        <span class="p">((</span><span class="nf">R</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>                <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                 <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">R</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">R</span> <span class="nv">lat</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<p>如果我们想要进一步实现<a href="#rbf">rember-beyond-first</a>(保留删除元素之前的所有元素)和<a href="#rul">rember-upto-last</a>(只保留删除元素之后的元素)</p>

<h3 id="rletcc">2.3 rember-letcc </h3>




<h4 id="rbf">Rember-Beyond-first</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; The rember-beyond-first function rembers everything beyond first match</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember-beyond-first</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">R</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lat</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">)</span> <span class="p">(</span><span class="nf">R</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">R</span> <span class="nv">lat</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">rember-beyond-first</span>
</span><span class='line'>  <span class="ss">&#39;roots</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">noodles</span> <span class="nv">spaghetti</span> <span class="nv">spatzle</span> <span class="nv">bean-thread</span> <span class="nv">roots</span> <span class="nv">potatoes</span> <span class="nv">yam</span> <span class="nv">others</span> <span class="nv">rice</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;(noodles spaghetti spaghetti bean-thread)</span>
</span></code></pre></td></tr></table></div></figure>


<hr/>




<h4 id="rul">Rember-upto-last</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define-syntax </span><span class="nv">letcc</span>
</span><span class='line'>  <span class="p">(</span><span class="k">syntax-rules </span><span class="p">()</span>
</span><span class='line'>    <span class="p">((</span><span class="nf">letcc</span> <span class="nv">?k</span> <span class="nv">?body</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="nb">call/cc </span><span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">?k</span><span class="p">)</span> <span class="nv">?body</span> <span class="o">...</span><span class="p">)))))</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember-upto-last</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span> <span class="c1">; Look Ma, no cons   </span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letcc</span> <span class="nv">skip</span>
</span><span class='line'>      <span class="p">(</span><span class="k">letrec </span>
</span><span class='line'>          <span class="p">((</span><span class="nf">R</span>
</span><span class='line'>            <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">void</span><span class="p">))</span>
</span><span class='line'>                <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="k">let </span><span class="p">()</span>
</span><span class='line'>                        <span class="p">(</span><span class="nf">R</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                          <span class="p">((</span><span class="nb">eq? </span><span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">skip</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">void</span><span class="p">)))))))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">R</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">lat</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="nf">rember-upto-last</span>
</span><span class='line'>  <span class="ss">&#39;roots</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nv">noodles</span> <span class="nv">spaghetti</span> <span class="nv">spatzle</span> <span class="nv">bean-thread</span> <span class="nv">roots</span> <span class="nv">potatoes</span> <span class="nv">yam</span> <span class="nv">others</span> <span class="nv">rice</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;(potatoes yam others rice)</span>
</span></code></pre></td></tr></table></div></figure>


<hr/>




<h3 id="rs">2.4 remberstar </h3>




<h4 id="lm">the  definition of leftmost</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">leftmost-fixed-let</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">a</span> <span class="p">(</span><span class="nf">leftmost-fixed</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>           <span class="p">((</span><span class="nf">atom?</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">leftmost-fixed</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;(leftmost-fixed-let &#39;((() a b) (c d))) ;; bug fixed</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="c1">;(leftmost-fixed-let &#39;(((y) b) (c d)))   ; &#39;y</span>
</span><span class='line'><span class="c1">;(leftmost-fixed-let &#39;(((y) ()) () (e))) ; &#39;y</span>
</span><span class='line'><span class="c1">;(leftmost-fixed-let &#39;(((() y) ())))     ; &#39;y</span>
</span><span class='line'><span class="c1">;(leftmost-fixed-let &#39;(((()) ()))) ; &#39;()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">;;letcc version</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">leftmost-letcc</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">lm</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span> <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>               <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>               <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">out</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">begin</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">lm</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">out</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">lm</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="nv">out</span><span class="p">)))))))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>       <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">skip</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">lm</span> <span class="nv">l</span> <span class="nv">skip</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>




<h4 id="deep">the  definition of deep</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deep</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="ss">&#39;pizza</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">deep</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">toppings</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deepB</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>        <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">jump</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="k">set! </span><span class="nv">toppings</span> <span class="nv">jump</span><span class="p">)</span>
</span><span class='line'>          <span class="ss">&#39;pizza</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">deepB</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">))</span> <span class="o">&#39;</span><span class="p">())))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deep&amp;co</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span> <span class="p">(</span><span class="nf">k</span> <span class="ss">&#39;pizza</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">deep&amp;co</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="p">(</span><span class="nf">k</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="o">&#39;</span><span class="p">()))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;co</span> <span class="mi">0</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>          <span class="c1">; &#39;pizza</span>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;co</span> <span class="mi">6</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>          <span class="c1">; &#39;((((((pizza))))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;co</span> <span class="mi">2</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span> <span class="c1">; &#39;((pizza))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">deep&amp;coB</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">m</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">zero? </span><span class="nv">m</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">()</span>
</span><span class='line'>         <span class="p">(</span><span class="k">set! </span><span class="nv">toppings</span> <span class="nv">k</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">k</span> <span class="ss">&#39;pizza</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="p">(</span><span class="nf">sub1</span> <span class="nv">m</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">k</span> <span class="p">(</span><span class="nb">cons </span><span class="nv">x</span> <span class="o">&#39;</span><span class="p">()))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="mi">6</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span>         <span class="c1">; &#39;((((((pizza))))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">deep&amp;coB</span> <span class="mi">4</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">x</span><span class="p">)</span> <span class="nv">x</span><span class="p">))</span> <span class="c1">; &#39;((((pizza))))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<p>接下来，再看看由leftmost结合rember得到rember star.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; The rember1* function removes the leftmost occurrence of a in l</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember1*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>         <span class="p">((</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">rember1*</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">equal? </span><span class="p">(</span><span class="nf">rember1*</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="c1">; if the list with &#39;a&#39; removed doesn&#39;t change</span>
</span><span class='line'>           <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">rember1*</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))))</span>  <span class="c1">; then recurse</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>            <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">rember1*</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))))))))</span> <span class="c1">; otherwise remove &#39;a&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; Examples of rember1*</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*</span>
</span><span class='line'>  <span class="ss">&#39;salad</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">((</span><span class="nf">Swedish</span> <span class="nv">rye</span><span class="p">)</span> <span class="p">(</span><span class="nf">French</span> <span class="p">(</span><span class="nf">mustard</span> <span class="nv">salad</span> <span class="nv">turkey</span><span class="p">))</span> <span class="nv">salad</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;((Swedish rye) (French (mustard turkey)) salad)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*</span>
</span><span class='line'>  <span class="ss">&#39;meat</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">((</span><span class="nf">pasta</span> <span class="nv">meat</span><span class="p">)</span> <span class="nv">pasta</span> <span class="p">(</span><span class="nf">noodles</span> <span class="nv">meat</span> <span class="nv">sauce</span><span class="p">)</span> <span class="nv">meat</span> <span class="nv">tomatoes</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;((pasta) pasta (noodles meat sauce) meat tomatoes)</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面是letrec version of rember1*</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember1*-letrec</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>        <span class="p">((</span><span class="nf">R</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>                <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">second</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                     <span class="p">((</span><span class="nb">eq? </span><span class="nv">first</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">second</span><span class="p">)</span>
</span><span class='line'>                     <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="p">(</span><span class="nf">R</span> <span class="nv">second</span><span class="p">))))))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">first</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">(</span><span class="nf">second</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                      <span class="p">((</span><span class="nb">equal? </span><span class="p">(</span><span class="nf">R</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">first</span><span class="p">)</span> <span class="c1">; if the list with &#39;a&#39; removed doesn&#39;t change</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">cons </span><span class="nv">first</span> <span class="p">(</span><span class="nf">R</span> <span class="nv">second</span><span class="p">)))</span>  <span class="c1">; then recurse</span>
</span><span class='line'>                      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nf">R</span> <span class="nv">first</span><span class="p">)</span> <span class="nv">second</span><span class="p">)))))))))</span> <span class="c1">; otherwise remove &#39;a&#39;</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">R</span> <span class="nv">l</span><span class="p">))))</span>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*-letrec</span>
</span><span class='line'>  <span class="ss">&#39;salad</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">((</span><span class="nf">Swedish</span> <span class="nv">rye</span><span class="p">)</span> <span class="p">(</span><span class="nf">French</span> <span class="p">(</span><span class="nf">mustard</span> <span class="nv">salad</span> <span class="nv">turkey</span><span class="p">))</span> <span class="nv">salad</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*-letrec</span>
</span><span class='line'>  <span class="ss">&#39;meat</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">((</span><span class="nf">pasta</span> <span class="nv">meat</span><span class="p">)</span> <span class="nv">pasta</span> <span class="p">(</span><span class="nf">noodles</span> <span class="nv">meat</span> <span class="nv">sauce</span><span class="p">)</span> <span class="nv">meat</span> <span class="nv">tomatoes</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>the version of letcc (我暂时不太理解)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; rember1* via letcc</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">rember1*-letcc</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>        <span class="p">((</span><span class="nf">rm</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">l</span> <span class="nv">oh</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                 <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">oh</span> <span class="ss">&#39;no</span><span class="p">))</span>
</span><span class='line'>                 <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">eq? </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">rm</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="nv">oh</span><span class="p">))))</span>
</span><span class='line'>                 <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                  <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">new-car</span>
</span><span class='line'>                         <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>                          <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">oh</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">rm</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="nv">oh</span><span class="p">)))))</span>
</span><span class='line'>                    <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">atom?</span> <span class="nv">new-car</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)</span> <span class="p">(</span><span class="nf">rm</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)</span> <span class="nv">oh</span><span class="p">))</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">cons </span><span class="nv">new-car</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">new-l</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>              <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">oh</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">rm</span> <span class="nv">a</span> <span class="nv">l</span> <span class="nv">oh</span><span class="p">)))))</span>
</span><span class='line'>        <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">atom?</span> <span class="nv">new-l</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">l</span>
</span><span class='line'>            <span class="nv">new-l</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Tests of rember1*-letcc</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*-letcc</span>
</span><span class='line'> <span class="ss">&#39;salad</span>
</span><span class='line'> <span class="o">&#39;</span><span class="p">((</span><span class="nf">Swedish</span> <span class="nv">rye</span><span class="p">)</span> <span class="p">(</span><span class="nf">French</span> <span class="p">(</span><span class="nf">mustard</span> <span class="nv">salad</span> <span class="nv">turkey</span><span class="p">))</span> <span class="nv">salad</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;((Swedish rye) (French (mustard turkey)) salad)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*-letcc</span>
</span><span class='line'> <span class="ss">&#39;meat</span>
</span><span class='line'> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pasta</span> <span class="nv">meat</span><span class="p">)</span> <span class="nv">pasta</span> <span class="p">(</span><span class="nf">noodles</span> <span class="nv">meat</span> <span class="nv">sauce</span><span class="p">)</span> <span class="nv">meat</span> <span class="nv">tomatoes</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;((pasta) pasta (noodles meat sauce) meat tomatoes)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">rember1*-letcc</span>
</span><span class='line'> <span class="ss">&#39;a</span>
</span><span class='line'> <span class="o">&#39;</span><span class="p">((</span><span class="nf">foo</span> <span class="nv">bar</span><span class="p">)</span> <span class="nv">baz</span><span class="p">))</span>
</span><span class='line'><span class="c1">; ==&gt; &#39;((foo bar) baz)</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>




<h4 id="union">the  definition of union</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">union2</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">set1</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">letrec </span><span class="p">((</span><span class="nf">member?</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">a</span> <span class="nv">lat</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="k">cond </span><span class="p">((</span><span class="nb">null? </span><span class="nv">lat</span><span class="p">)</span> <span class="no">#f</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">((</span><span class="nb">eq? </span><span class="nv">a</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lat</span><span class="p">))</span> <span class="no">#t</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">member?</span> <span class="nv">a</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lat</span><span class="p">))))))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">A</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">set1</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                   <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">p1</span> <span class="p">(</span><span class="nf">A</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">set1</span><span class="p">))))</span>
</span><span class='line'>                     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">member?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>                         <span class="nv">p1</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">p1</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">A</span> <span class="nv">set1</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">union2</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">a</span> <span class="nv">b</span> <span class="nv">c</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="nv">d</span> <span class="nv">e</span> <span class="nv">f</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>




<h4 id="intersect">the  definition of intersect</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">intersect</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">set1</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">set1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>  <span class="c1">; don&#39;t forget the 1st commandment</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">member?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">set1</span><span class="p">)</span> <span class="p">(</span><span class="nf">intersect</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">intersect</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">set1</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; Examples of intersect</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="c1">;(intersect &#39;(a b x c d) &#39;(q w e x r t y a))     ; &#39;(a x)</span>
</span><span class='line'><span class="c1">;(intersect &#39;(a b x c d) &#39;())                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect &#39;() &#39;())                             ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect &#39;() &#39;(a b x c d))                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect &#39;(a b x c d) &#39;(a b x c d))           ; &#39;(a b x c d)</span>
</span></code></pre></td></tr></table></div></figure>


<p>intersect letrec version</p>

<p><font color="red">use letrec to remove arguments that do not change for recursive applications</font></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">intersect-letrec</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">set1</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">I</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">set</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="nv">set</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>              <span class="p">((</span><span class="nf">member?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">set</span><span class="p">)</span> <span class="nv">set2</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">set</span><span class="p">)</span> <span class="p">(</span><span class="nf">I</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">set</span><span class="p">))))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">I</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">set</span><span class="p">)))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">I</span> <span class="nv">set1</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Test of intersect-letrec</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="c1">;(intersect-letrec &#39;(a b x c d) &#39;(q w e x r t y a))     ; &#39;(a x)</span>
</span><span class='line'><span class="c1">;(intersect-letrec &#39;(a b x c d) &#39;())                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect-letrec &#39;() &#39;())                             ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect-letrec &#39;() &#39;(a b x c d))                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersect-letrec &#39;(a b x c d) &#39;(a b x c d))           ; &#39;(a b x c d)</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>




<h4 id="intersectall">the  definition of intersectall</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; The intersectall function finds intersect of a bunch of sets</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">intersectall</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">lset</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">intersect</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">)</span>
</span><span class='line'>                   <span class="p">(</span><span class="nf">intersectall</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Examples of intersectall</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="c1">;(intersectall &#39;((a) (a) (a)))                   ; &#39;(a)</span>
</span><span class='line'><span class="c1">;(intersectall &#39;((a) () (a)))                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall &#39;())                              ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall &#39;((a b c d) (b c d e) (c d e f))) ; &#39;(c d)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Obeying the 12th commandment</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">intersectall-letrec</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">A</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lset</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">intersect</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="nf">A</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">))))))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>        <span class="p">((</span><span class="nb">null? </span><span class="nv">lset</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>        <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">A</span> <span class="nv">lset</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Tests of intersectall-letrec</span>
</span><span class='line'><span class="c1">;;</span>
</span><span class='line'><span class="c1">;(intersectall-letrec &#39;((a) (a) (a)))                   ; &#39;(a)</span>
</span><span class='line'><span class="c1">;(intersectall-letrec &#39;((a) () (a)))                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall-letrec &#39;())                              ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall-letrec &#39;((a b c d) (b c d e) (c d e f))) ; &#39;(c d)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">intersectall-ap</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lset</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">call-with-current-continuation</span>
</span><span class='line'>      <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">hop</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>          <span class="p">((</span><span class="nf">A</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">lset</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">))</span> <span class="p">(</span><span class="nf">hop</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>                  <span class="p">((</span><span class="nb">null? </span><span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">))</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                    <span class="p">(</span><span class="nf">I</span> <span class="p">(</span><span class="nb">car </span><span class="nv">lset</span><span class="p">)</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">A</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">lset</span><span class="p">)))))))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">I</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">s1</span> <span class="nv">s2</span><span class="p">)</span>
</span><span class='line'>                <span class="p">(</span><span class="nf">letrec</span>
</span><span class='line'>                  <span class="p">((</span><span class="nf">J</span> <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">s1</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                          <span class="p">((</span><span class="nb">null? </span><span class="nv">s1</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>                          <span class="p">((</span><span class="nf">member?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">s1</span><span class="p">)</span> <span class="nv">s2</span><span class="p">)</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">cons </span><span class="p">(</span><span class="nb">car </span><span class="nv">s1</span><span class="p">)</span> <span class="p">(</span><span class="nf">J</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">s1</span><span class="p">))))</span>
</span><span class='line'>                          <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>                            <span class="p">(</span><span class="nf">J</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">s1</span><span class="p">)))))))</span>
</span><span class='line'>                  <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>                    <span class="p">((</span><span class="nb">null? </span><span class="nv">s2</span><span class="p">)</span> <span class="p">(</span><span class="nf">hop</span> <span class="o">&#39;</span><span class="p">()))</span>
</span><span class='line'>                    <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">J</span> <span class="nv">s1</span><span class="p">)))))))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>            <span class="p">((</span><span class="nb">null? </span><span class="nv">lset</span><span class="p">)</span> <span class="o">&#39;</span><span class="p">())</span>
</span><span class='line'>            <span class="p">(</span><span class="k">else </span><span class="p">(</span><span class="nf">A</span> <span class="nv">lset</span><span class="p">))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; Tests of intersectall-ap</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="c1">;(intersectall-ap &#39;((a) (a) (a)))                   ; &#39;(a)</span>
</span><span class='line'><span class="c1">;(intersectall-ap &#39;((a) () (a)))                    ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall-ap &#39;())                              ; &#39;()</span>
</span><span class='line'><span class="c1">;(intersectall-ap &#39;((a b c d) (b c d e) (c d e f))) ; &#39;(c d)</span>
</span></code></pre></td></tr></table></div></figure>


<p>最后再透过deep star的写法优化过程来体会TSS的函数精髓。</p>

<hr/>




<h3 id="di">depthStar improvement </h3>


<p>通过<a href="#depth">depth</a>进一步阐释letrec的意义（从原始的depth到<a href="#depthlet">depth-let</a>
然后<a href="#letif">depth-let-if</a>，以及更为清晰版本的<a href="#letmax">depth-let-max</a>,然后最后浓缩到最后的6行代码<a href="#max">depth-max</a>。</p>

<h4 id="depth">depth</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="c1">; The depth* function finds the max depth of an s-expression</span>
</span><span class='line'><span class="c1">;</span>
</span><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">depth*</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">depth*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>          <span class="p">((</span><span class="nb">&gt; </span><span class="p">(</span><span class="nf">depth*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))</span>
</span><span class='line'>              <span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">depth*</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">else</span>
</span><span class='line'><span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))))))))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">depth*</span> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pickled</span><span class="p">)</span> <span class="nv">peppers</span> <span class="p">(</span><span class="nf">peppers</span> <span class="nv">pickled</span><span class="p">)))</span>                          <span class="c1">; 2</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">margarine</span> <span class="p">((</span><span class="nf">bitter</span> <span class="nv">butter</span><span class="p">)</span> <span class="p">(</span><span class="nf">makes</span><span class="p">)</span> <span class="p">(</span><span class="nf">batter</span> <span class="p">(</span><span class="nf">bitter</span><span class="p">)))</span> <span class="nv">butter</span><span class="p">))</span> <span class="c1">; 4</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span> <span class="c1">; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>let version:</p>

<h4 id="depthlet">depth-let</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">depth*-let</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">depth*-let</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rightPart</span> <span class="p">(</span><span class="nf">depth*-let</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">leftPart</span> <span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*-let</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>           <span class="p">((</span><span class="nb">&gt; </span><span class="nv">rightPart</span>
</span><span class='line'>               <span class="nv">leftPart</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">rightPart</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>            <span class="nv">leftPart</span><span class="p">)))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let</span> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pickled</span><span class="p">)</span> <span class="nv">peppers</span> <span class="p">(</span><span class="nf">peppers</span> <span class="nv">pickled</span><span class="p">)))</span>                          <span class="c1">; 2</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">margarine</span> <span class="p">((</span><span class="nf">bitter</span> <span class="nv">butter</span><span class="p">)</span> <span class="p">(</span><span class="nf">makes</span><span class="p">)</span> <span class="p">(</span><span class="nf">batter</span> <span class="p">(</span><span class="nf">bitter</span><span class="p">)))</span> <span class="nv">butter</span><span class="p">))</span> <span class="c1">; 4</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span> <span class="c1">; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>let-if version:</p>

<h4 id="letif">depth-let-if</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">depth*-let-if</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">depth*-let-if</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rightPart</span> <span class="p">(</span><span class="nf">depth*-let-if</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">leftPart</span> <span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*-let-if</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">&gt; </span><span class="nv">rightPart</span> <span class="nv">leftPart</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">rightPart</span>
</span><span class='line'>            <span class="nv">leftPart</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-if</span> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pickled</span><span class="p">)</span> <span class="nv">peppers</span> <span class="p">(</span><span class="nf">peppers</span> <span class="nv">pickled</span><span class="p">)))</span>                          <span class="c1">; 2</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-if</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">margarine</span> <span class="p">((</span><span class="nf">bitter</span> <span class="nv">butter</span><span class="p">)</span> <span class="p">(</span><span class="nf">makes</span><span class="p">)</span> <span class="p">(</span><span class="nf">batter</span> <span class="p">(</span><span class="nf">bitter</span><span class="p">)))</span> <span class="nv">butter</span><span class="p">))</span> <span class="c1">; 4</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-if</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span> <span class="c1">; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>depth-let-max version:</p>

<h4 id="letmax">depth-let-max</h4>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="k">define </span><span class="nv">depth*-let-max</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">depth*-let-max</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>       <span class="p">(</span><span class="k">let </span><span class="p">((</span><span class="nf">rightPart</span> <span class="p">(</span><span class="nf">depth*-let-max</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>             <span class="p">(</span><span class="nf">leftPart</span> <span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*-let-max</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">)))))</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">max </span><span class="nv">rightPart</span> <span class="nv">leftPart</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-max</span> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pickled</span><span class="p">)</span> <span class="nv">peppers</span> <span class="p">(</span><span class="nf">peppers</span> <span class="nv">pickled</span><span class="p">)))</span>                          <span class="c1">; 2</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-max</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">margarine</span> <span class="p">((</span><span class="nf">bitter</span> <span class="nv">butter</span><span class="p">)</span> <span class="p">(</span><span class="nf">makes</span><span class="p">)</span> <span class="p">(</span><span class="nf">batter</span> <span class="p">(</span><span class="nf">bitter</span><span class="p">)))</span> <span class="nv">butter</span><span class="p">))</span> <span class="c1">; 4</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-let-max</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span> <span class="c1">; 3</span>
</span></code></pre></td></tr></table></div></figure>


<p>depth-max version:</p>

<h4 id="max">depth-max</h4>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='scheme'><span class='line'><span class="p">(</span><span class="k">define </span><span class="nv">depth*-max</span>
</span><span class='line'>  <span class="p">(</span><span class="k">lambda </span><span class="p">(</span><span class="nf">l</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">cond</span>
</span><span class='line'>      <span class="p">((</span><span class="nb">null? </span><span class="nv">l</span><span class="p">)</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="p">((</span><span class="nf">atom?</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">depth*-max</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">else</span>
</span><span class='line'>         <span class="p">(</span><span class="nb">max </span><span class="p">(</span><span class="nf">depth*-max</span> <span class="p">(</span><span class="nb">cdr </span><span class="nv">l</span><span class="p">))</span> <span class="p">(</span><span class="nf">add1</span> <span class="p">(</span><span class="nf">depth*-max</span> <span class="p">(</span><span class="nb">car </span><span class="nv">l</span><span class="p">))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-max</span> <span class="o">&#39;</span><span class="p">((</span><span class="nf">pickled</span><span class="p">)</span> <span class="nv">peppers</span> <span class="p">(</span><span class="nf">peppers</span> <span class="nv">pickled</span><span class="p">)))</span>                          <span class="c1">; 2</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-max</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">margarine</span> <span class="p">((</span><span class="nf">bitter</span> <span class="nv">butter</span><span class="p">)</span> <span class="p">(</span><span class="nf">makes</span><span class="p">)</span> <span class="p">(</span><span class="nf">batter</span> <span class="p">(</span><span class="nf">bitter</span><span class="p">)))</span> <span class="nv">butter</span><span class="p">))</span> <span class="c1">; 4</span>
</span><span class='line'><span class="p">(</span><span class="nf">depth*-max</span> <span class="o">&#39;</span><span class="p">(</span><span class="nv">c</span> <span class="p">(</span><span class="nf">b</span> <span class="p">(</span><span class="nf">a</span> <span class="nv">b</span><span class="p">)</span> <span class="nv">a</span><span class="p">)</span> <span class="nv">a</span><span class="p">))</span> <span class="c1">; 3</span>
</span></code></pre></td></tr></table></div></figure>




<hr/>


<p>常用链接，</p>

<ul>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/14/si-ji-mo-si-de-le-yuan-schemers/">Scheme清单</a></li>
<li><a href="https://groups.google.com/forum/#!forum/racket-users">Google racket User group</a></li>
<li><a href="https://groups.google.com/forum/#!topic/racket-users/cPuTr8lrXCs">Gossip about the decision tree</a></li>
<li>GreghenderShoot 1970

<ul>
<li><a href="https://github.com/greghendershott">Github Repo</a></li>
<li><a href="https://github.com/greghendershott/fear-of-macros">Fear of macro</a> Tell us the history of macro, overcome the fear of macro</li>
<li><a href="https://github.com/greghendershott/frog">frog</a> one static website generator tool</li>
<li><a href="http://www.greghendershott.com/">His Website</a></li>
</ul>
</li>
<li>Tonyg

<ul>
<li><a href="https://github.com/tonyg?tab=repositories">Github Repo</a></li>
<li><a href="http://tonyg.github.io/racket-bitsyntax/">His opensource tools: Bitsyntax</a></li>
</ul>
</li>
<li><a href="https://botbot.me/freenode/racket/">racket freenote robot, Gossip Platform</a></li>
<li>Husk scheme

<ul>
<li><a href="https://github.com/justinethier/husk-scheme">husk repo</a></li>
<li><a href="http://justinethier.github.io/husk-scheme/manual/getting-started.html">husk get started</a></li>
</ul>
</li>
<li><a href="https://github.com/alaricsp/chicken-scheme">chicken scheme</a></li>
<li><a href="http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-2.html#%_toc_start">R5RS html file</a></li>
<li>root of lisp

<ul>
<li><a href="http://www.paulgraham.com/rootsoflisp.html">original site</a></li>
<li><a href="https://github.com/hlpp/scheme/tree/master/tests">define implement</a></li>
</ul>
</li>
</ul>


<p>BTW, one very good vim tips, you can use <a href="https://github.com/Shougo/vimfiler.vim">Vimfiler</a>, with shortkey <code>m and then r</code> to rename
the file in the editor page.</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme/'>http://jueqingsizhe66.github.io/blog/2017/08/11/from-little-scheme-to-season-scheme/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windows FAST0816编译失败]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai/"/>
    <updated>2017-07-05T17:13:57+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai</id>
    <content type="html"><![CDATA[<p>在之前的fast使用中一直没有碰到编译proj file失败的事情，但再816却出现了，于是添加了额外的编译debug路径，解决了
问题。</p>

<!--more-->


<p><img src="http://jueqingsizhe66.github.io/images/fast/fast816.png" alt="pic" /></p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai/'>http://jueqingsizhe66.github.io/blog/2017/07/05/windows-fast0816bian-yi-shi-bai/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[批量修改pdf文件名以及创建wiki Links]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/07/05/pi-liang-xiu-gai-pdfwen-jian-ming-yi-ji-chuang-jian-wiki-links/"/>
    <updated>2017-07-05T17:03:07+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/07/05/pi-liang-xiu-gai-pdfwen-jian-ming-yi-ji-chuang-jian-wiki-links</id>
    <content type="html"><![CDATA[<p>bash、awk、sed等的好处，就是可以专一的完成你的需求，但是也存在很多不足，借着批量重命令和批量导出链接到vimwiki的wiki中，形成[[local:文件名路径]]的过程，巩固学习linux命令, it is homework(learning process)。</p>

<!--more-->


<h2>提取路径，用于vimwiki中，当作快速链接</h2>

<ul>
<li><p>如果IFS是&#8221;&ldquo;，那么相当于一个文件名特别长会分成很多行显示，所以这边设置为
IFS=$&lsquo;\n&rsquo;</p></li>
<li><p>[a-z]star替换原先的star，目的是去除点号。</p></li>
<li>使用echo和管道命令传递信息给sed或者awk等</li>
<li>在sed中似乎用^$等位置字符进行替换,如果是文件夹则进行名字替换，并且遍历当前文件夹</li>
<li>使用双重for循环进行控制</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>IFS=$'\n';
</span><span class='line'>count=1;
</span><span class='line'>countDir=1;
</span><span class='line'>specialCharacter='pages';
</span><span class='line'>generateChapter() # @Description : 对不同文件进行不同处理
</span><span class='line'>                  # @usage       : generatechapter
</span><span class='line'>{
</span><span class='line'>    # 妙用find 得到当前目录的相对路径 不需要不断的进入目录
</span><span class='line'>    for var2 in `find . -name "[a-z]*"`
</span><span class='line'>    do
</span><span class='line'>        if [[ -d  $var2 ]] # &lt; cannot . Error
</span><span class='line'>        then
</span><span class='line'>            #echo "fuck"
</span><span class='line'>            var=`echo $var2|sed 's/^./F:\/ScienceBase.Attachments\/WindEnergy/g'|sed 's/^/[[local:/g'|sed 's/$/]]/g'`
</span><span class='line'>            printf "= $countDir. [ ] $var =\n" # 使用#号来删除之前的点号
</span><span class='line'>            countDir=$(($countDir+1));
</span><span class='line'>
</span><span class='line'>            for tempVar in `find $var2 -name "*.pdf"`
</span><span class='line'>            do
</span><span class='line'>                temp1=`echo $tempVar|sed 's/^./F:\/ScienceBase.Attachments\/WindEnergy/g'` 
</span><span class='line'>    #            # echo ${var2} ${var2:0:$((${var2}-18))}.pdf  
</span><span class='line'>                 varr=`echo $temp1|sed 's/^/[[local:/g'|sed 's/$/]]/g'`;
</span><span class='line'>                #var=`echo $var2|sed 's/^./F:\/ScienceBase.Attachments\/WindEnergy/g'|sed 's/^/[[local:/g'|sed 's/$/]]/g'` 
</span><span class='line'>                printf "\t$count. [ ] ${varr}\n" # 这边需要去除到第一个点号,这是才得到的处理方法
</span><span class='line'>                count=$(($count+1));
</span><span class='line'>
</span><span class='line'>            done
</span><span class='line'>            count=1;
</span><span class='line'>        fi
</span><span class='line'>        
</span><span class='line'>
</span><span class='line'>    done
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>generateChapter
</span></code></pre></td></tr></table></div></figure>


<h2>删除不必要的名字特殊字符，重命名</h2>

<ul>
<li>删除文件pdf名字不必要的（pages 110&mdash;30）等信息。</li>
<li>使用awk printf产生逗号分隔字符串，使用xargs -d, mv提取以逗号分隔的字段，
并且对文件名进行重命名（在我找的多种方法中，就他有效）</li>
<li>xargs -n 2 表示按照空格划分的方式 提取两个参数，逐个进行。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash -
</span><span class='line'>#===============================================================================
</span><span class='line'>#
</span><span class='line'>#          FILE: b.sh
</span><span class='line'>#
</span><span class='line'>#         USAGE: ./b.sh
</span><span class='line'>#
</span><span class='line'>#   DESCRIPTION: 
</span><span class='line'>#
</span><span class='line'>#       OPTIONS: ---
</span><span class='line'>#  REQUIREMENTS: ---
</span><span class='line'>#          BUGS: ---
</span><span class='line'>#         NOTES: ---
</span><span class='line'>#        AUTHOR: Ye Zhao Liang (Vimer), zhaoturkkey@163.com
</span><span class='line'>#  ORGANIZATION: BrokenSun
</span><span class='line'>#       CREATED: 2017/7/4 23:01:31
</span><span class='line'>#      REVISION:  ---
</span><span class='line'>#===============================================================================
</span><span class='line'>
</span><span class='line'>IFS=$'\n';
</span><span class='line'>count=1;
</span><span class='line'>countDir=1;
</span><span class='line'>specialCharacter='pages';
</span><span class='line'>generateChapter() # @Description : 对不同文件进行不同处理
</span><span class='line'>                  # @usage       : generatechapter
</span><span class='line'>{
</span><span class='line'>    # 妙用find 得到当前目录的相对路径 不需要不断的进入目录
</span><span class='line'>    #for var2 in `find . -name "*"`
</span><span class='line'>    for var2 in `find . -name "windEnergy201*"`
</span><span class='line'>    do
</span><span class='line'>        if [[ -d  $var2 ]] # &lt; cannot . Error
</span><span class='line'>        then
</span><span class='line'>                cd $var2;
</span><span class='line'>                for var in `find . -name "*"`;do echo $var|awk '/pages/{printf("%s,%s",$0,substr($0,0,length($0)-22)".pdf")|"xargs -d, mv ";}';done 
</span><span class='line'>                cd ..;
</span><span class='line'>        fi
</span><span class='line'>
</span><span class='line'>    done
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>generateChapter
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><font color="red">注意可以使用 ，学到技巧1中的检测工具，查看你的修改是否完全正确，如果出现文件名中有逗号的情况，通常pages没有删掉，原因是xargs也是按照，号进行分割，所以改进方法是使用分号输出</font></p>

<p>改进代码</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for var in `find . -name "*"`;do echo $var|awk '/pages/{printf("%s;%s",$0,substr($0,0,length($0)-22)".pdf")|"xargs -d; mv ";}';done 
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>最终结果</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>= 1. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system]] =
</span><span class='line'>  1. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch1.pdf]]
</span><span class='line'>  2. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch10.pdf]]
</span><span class='line'>  3. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch11.pdf]]
</span><span class='line'>  4. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch12.pdf]]
</span><span class='line'>  5. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch13.pdf]]
</span><span class='line'>  6. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch14.pdf]]
</span><span class='line'>  7. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch15.pdf]]
</span><span class='line'>  8. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch16.pdf]]
</span><span class='line'>  9. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch2.pdf]]
</span><span class='line'>  10. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch3.pdf]]
</span><span class='line'>  11. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch4.pdf]]
</span><span class='line'>  12. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch5.pdf]]
</span><span class='line'>  13. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch6.pdf]]
</span><span class='line'>  14. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch7.pdf]]
</span><span class='line'>  15. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch8.pdf]]
</span><span class='line'>  16. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/ch9.pdf]]
</span><span class='line'>  17. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/fmatter.pdf]]
</span><span class='line'>  18. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/index.pdf]]
</span><span class='line'>  19. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/harmonic power system/scard.pdf]]
</span><span class='line'>= 2. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/Offshore Wind Energy Generation Control, Protection, and Integration to Electrical Systems/offshoreWindEnergy]] =
</span><span class='line'>  1. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/Offshore Wind Energy Generation Control, Protection, and Integration to Electrical Systems/offshoreWindEnergy/app1.pdf]]
</span><span class='line'>  2. [ ] [[local:F:/ScienceBase.Attachments/WindEnergy/Offshore Wind Energy Generation Control, Protection, and Integration to Electrical Systems/offshoreWindEnergy/app2.pdf]]
</span></code></pre></td></tr></table></div></figure>


<h2>学到的技巧</h2>

<ol>
<li>awk两种表示判断,if判断得用分号
<a href="http://blog.csdn.net/qq_31382921/article/details/55094907">如果不用分号隔开会报错</a></li>
</ol>


<p><strong>注意分号！！！</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>awk '{if ($1==1) print "A"; else if ($1==2) print "B"; else print "C"}'</span></code></pre></td></tr></table></div></figure>


<p>对应的bash使用的是if,then,else,fi的形式，且不用分号间隔语句</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'> for var in `find . -name "*"`
</span><span class='line'>    do
</span><span class='line'>        if [[ -d  $var ]] # &lt; cannot . Error
</span><span class='line'>        then
</span><span class='line'>            printf "$var\n" # 使用#号来删除之前的点号
</span><span class='line'>        else
</span><span class='line'>            printf "\t${var}\n" # 这边需要去除到第一个点号,这是才得到的处理方法
</span><span class='line'>        fi
</span><span class='line'>
</span><span class='line'>    done
</span></code></pre></td></tr></table></div></figure>


<p>awk的&#8217;/page/{}&lsquo;等效于&#8217;if($0~/dfd/){}&rsquo;</p>

<p>下面的命令，也是一种检查上述程序正确与否的一种工具,可以看出哪些pdf文件依然有pages的字段</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>YeZhao@DESKTOP-YeZhao /cygdrive/f/ScienceBase.Attachments/WindEnergy
</span><span class='line'>$ find . -name "*"|awk '{if($0~/pages/){print $0}}'
</span><span class='line'>./windEnergy2009-i6/Characterizing future large, rapid changes in aggregated wind power using Numerical Weather Prediction spatial fields (pages 542–555).pdf
</span><span class='line'>./windEnergy2012-i1/Modeling wake effects in large wind farms in complex terrain the problem, the methods and the issues (pages 161–182).pdf
</span><span class='line'>./windEnergy2012-i2/The Betz–Joukowsky limit on the contribution to rotor aerodynamics by the British, German and Russian scientific schools (pages 335–344).pdf
</span><span class='line'>./windEnergy2012-i3/Computational fluid dynamics simulation of the aerodynamics of a high solidity, small-scale vertical axis wind turbine (pages 349–361).pdf
</span><span class='line'>./windEnergy2012-i3/Correction factors for NRG #40 anemometers potentially affected by dry friction whip characterization, analysis, and validation (pages 489–502).pdf
</span><span class='line'>./windEnergy2012-i4/Analysis of wake measurements from the ECN Wind Turbine Test Site Wieringermeer, EWTW (pages 575–591).pdf
</span><span class='line'>./windEnergy2012-i5/Atmospheric stability and turbulence fluxes at Horns Rev—an intercomparison of sonic, bulk and WRF model data (pages 717–731).pdf
</span><span class='line'>./windEnergy2013-11/Modeling, simulation and control of a wind turbine with a hydraulic transmission system (pages 1259–1276).pdf
</span><span class='line'>./windEnergy2013-8/Indicial lift response function an empirical relation for finite-thickness airfoils, and effects on aeroelastic simulations (pages 681–693).pdf
</span><span class='line'>./windEnergy2013-8/Simulating the dynamics of wind turbine blades part I, model development and verification (pages 694–710).pdf
</span><span class='line'>./windEnergy2013-8/Simulating the dynamics of wind turbine blades part鈥塈I, model validation and uncertainty quantification (pages 741–758).pdf
</span><span class='line'>./windEnergy2014-2/An assessment of the impact of reduced averaging time on small wind turbine power curves, energy capture predictions and turbulence intensity measurements (pages 337–342).pdf
</span><span class='line'>./windEnergy2014-9/Dynamic response analysis of wind turbines under blade pitch system fault, grid loss, and shutdown events (pages 1385–1409).pdf
</span><span class='line'>./windEnergy2015-10/Rapid optimization of stall-regulated wind turbine blades using a frequency-domain method Part 1, loads analysis (pages 1703–1723).pdf
</span><span class='line'>./windEnergy2015-11/Application and validation of incrementally complex models for wind turbine aerodynamics, isolated wind turbine in uniform inflow conditions (pages 1893–1916).pdf
</span><span class='line'>./windEnergy2015-2/Wind turbine boundary layer arrays for Cartesian and staggered configurations Part II, low-dimensional representations via the proper orthogonal decomposition (pages 297–315).pdf
</span><span class='line'>./windEnergy2015-2/Wind turbine boundary layer arrays for Cartesian and staggered configurations-Part I, flow field and power measurements (pages 277–295).pdf
</span><span class='line'>./windEnergy2015-4/Utilization of machine-learning algorithms for wind turbine site suitability modeling in Iowa, USA (pages 713–727).pdf
</span><span class='line'>./windEnergy2015-6/Rapid optimization of stall-regulated wind turbine blades using a frequency-domain method Part 2, cost function selection and results (pages 955–977).pdf
</span><span class='line'>./windEnergy2015-7/Variable geometry wind turbine for performance enhancement, improved survivability and reduced cost of energy (pages 1303–1311).pdf
</span><span class='line'>./windEnergy2016-11/Reliability of wind turbines modeled by a Poisson process with covariates, unobserved heterogeneity and seasonality (pages 1991–2002).pdf
</span><span class='line'>./windEnergy2016-2/Cylindrical vortex wake model skewed cylinder, application to yawed or tilted rotors (pages 345–358).pdf
</span><span class='line'>./windEnergy2016-6/Effects of low temperature on the mechanical properties of glass fibre–epoxy composites static tension, compression, R = 0.1 and R =鈭▒ 1 fatigue of ±45laminates (pages 1023–1041).pdf
</span><span class='line'>./windEnergy2016-6/Failure rate, repair time and unscheduled O&M cost analysis of offshore wind turbines (pages 1107–1119).pdf
</span><span class='line'>./windEnergy2017-02/Verifying the Blade Element Momentum Method in unsteady, radially varied, axisymmetric loading using a vortex ring model (pages 269–288).pdf
</span></code></pre></td></tr></table></div></figure>


<p>2.awk的<a href="http://blog.csdn.net/panpan639944806/article/details/19932543">BEGIN</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function name()
</span><span class='line'>{}
</span><span class='line'>
</span><span class='line'>BEGIN{
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>}
</span><span class='line'>END{
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>3.awk <a href="http://blog.sina.com.cn/s/blog_67e34ceb0100ybvg.html">gsub</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "a b c 2011-11-22 a:d" | awk 'gsub(/-/,"",$4)'</span></code></pre></td></tr></table></div></figure>


<p>4.awk变量定义</p>

<p>BEGIN中<a href="http://blog.csdn.net/shangboerds/article/details/49449291">定义1</a>
<a href="http://jingyan.baidu.com/article/d45ad148fb46f269552b80cf.html">awk -v单行</a>定义变量</p>

<p><a href="http://www.linuxidc.com/Linux/2015-04/115781.htm">awk内置变量</a>, 包括FS,OFS,NR,NFR,NF,$0,$1,$2,ARGC,ARGV<a href="http://blog.csdn.net/panpan639944806/article/details/19932543">1</a>等。</p>

<p>5.awk定义函数</p>

<p>awk的<a href="http://bbs.chinaunix.net/thread-1424218-1-1.html">函数定义</a>是在BEGIN{},{},END{}之外的，和他们平级的关系</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/usr/bin/awk -f
</span><span class='line'>#===============================================================================
</span><span class='line'>#
</span><span class='line'>#          File:  func.awk
</span><span class='line'># 
</span><span class='line'>#   Description:  awk -f func.awk file
</span><span class='line'>#           file内容为400
</span><span class='line'># 
</span><span class='line'>#   VIM Version:  7.0+
</span><span class='line'>#        Author:  Ye Zhao Liang (Vimer), zhaoturkkey@163.com
</span><span class='line'>#  Organization:  BrokenSun
</span><span class='line'>#       Version:  1.0
</span><span class='line'>#       Created:  2017/7/5 16:06:33
</span><span class='line'>#      Revision:  ---
</span><span class='line'>#       License:  Copyright (c) 2017, Ye Zhao Liang
</span><span class='line'>#===============================================================================
</span><span class='line'># 
</span><span class='line'>function b()
</span><span class='line'>{
</span><span class='line'>print "b.in.$1="$1;
</span><span class='line'>}
</span><span class='line'>{
</span><span class='line'>v=100; y=200
</span><span class='line'>print "a.in.v="v;
</span><span class='line'>print "a.in.y="y;
</span><span class='line'>
</span><span class='line'>a(y);
</span><span class='line'>b();
</span><span class='line'>print "a.out.v="v;
</span><span class='line'>print "a.out.y="y;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>function a(y)
</span><span class='line'>{
</span><span class='line'>print "(a)v="v;
</span><span class='line'>v=v+$1+y;
</span><span class='line'>y=300;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>6.bash四种变量截取</p>

<ol type="a">
<li>${var#.*}  从左到右，满足#之后条件的最小长度</li>
<li>${var##.*}  从左到右，满足##之后条件的最大长度</li>
<li>${var%.*}  从右到左，满足%之后条件的最小长度</li>
<li>${var%%.*}  从右到左，满足%%之后条件的最小长度</li>
</ol>


<p>在awk中可以使用substr($1,0,length($1)&ndash;..)实现类似的功能。</p>

<p>7.bash中的包含关系</p>

<p>包含： 即一个大的部分包含小的部分（member)
等价： 即两个东西等价(equal)
比较：一般是两个数，另外也可以是字符串。</p>

<p>bash几种<a href="http://www.cnblogs.com/ginsonwang/p/5525340.html">包含关系用法</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>strA="helloworld"
</span><span class='line'>strB="low"
</span><span class='line'>if [[ $strA =~ $strB ]]
</span><span class='line'>then
</span><span class='line'>    echo "包含"
</span><span class='line'>else
</span><span class='line'>    echo "不包含"
</span><span class='line'>fi</span></code></pre></td></tr></table></div></figure>


<p>8.awk去除左右空格</p>

<p>第5个知识点阐述了函数的定义方式,现在来运用一下，
awk<a href="http://blog.csdn.net/bitcarmanlee/article/details/51090048">去除左右空格</a>，再一次使用中发现所有的文件名后缀中多了一个空格，于是尝试消掉空格，想着用awk实现。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function ltrim(s) { sub(/^[ \t\r\n]+/, "", s); return s }
</span><span class='line'>function rtrim(s) { sub(/[ \t\r\n]+$/, "", s); return s }
</span><span class='line'>function trim(s) { return rtrim(ltrim(s)); }
</span><span class='line'>BEGIN{
</span><span class='line'>        FS=","
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>        $0 = rtrim($0);
</span><span class='line'>        if($2!="-" && $3=="-")
</span><span class='line'>                a[$4]++;
</span><span class='line'>        {
</span><span class='line'>        if($4!="-")
</span><span class='line'>                b[$4]++;
</span><span class='line'>        else
</span><span class='line'>                b[$5]++;
</span><span class='line'>        }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>END{
</span><span class='line'>        print "   client    incr_num_day";
</span><span class='line'>        for(i in a) printf("%10s   %d\n",i,a[i])
</span><span class='line'>        print "\n\n   client    all_num";                                                                                                                                                     
</span><span class='line'>        for(j in b) printf("%10s   %d\n",j,b[j]);
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>9.awk调用系统命令</p>

<p><a href="http://blog.csdn.net/cy_cai/article/details/41908921">方法</a></p>

<ol type="a">
<li>ready:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch c.txt
</span><span class='line'>touch d.txt</span></code></pre></td></tr></table></div></figure>


<p>II. a.txt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>c.txt
</span><span class='line'>d.txt</span></code></pre></td></tr></table></div></figure>


<p>III. code:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>awk '{cmd="rm "$0;system(cmd)}' a.txt   </span></code></pre></td></tr></table></div></figure>


<p>10.awk重定向和管道</p>

<p>有时候直接可以在awk使用管道，提供给shell,比如<a href="http://blog.chinaunix.net/uid-25324849-id-3079511.html">print|Sort</a>,</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>awk '{print $1, $2 | "sort" }'</span></code></pre></td></tr></table></div></figure>


<p>11.windows下的cygwin使用脚本</p>

<p>必须得使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dos2unix.exe *脚本名字
</span><span class='line'>dos2unix.exe a.sh
</span><span class='line'>dos2unix.exe func.awk</span></code></pre></td></tr></table></div></figure>


<p>这样执行shell才有效。</p>

<p>12.awk性能比shell更高</p>

<p>参考<a href="http://www.cnblogs.com/chengmo/archive/2010/10/04/1842073.html">链接</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>性能比较
</span><span class='line'>
</span><span class='line'>[chengmo@localhost nginx]# time (awk 'BEGIN{ total=0;for(i=0;i&lt;=10000;i++){total+=i;}print total;}')
</span><span class='line'>50005000
</span><span class='line'>
</span><span class='line'>real    0m0.003s
</span><span class='line'>user    0m0.003s
</span><span class='line'>sys     0m0.000s
</span><span class='line'>[chengmo@localhost nginx]# time(total=0;for i in $(seq 10000);do total=$(($total+i));done;echo $total;)
</span><span class='line'>50005000
</span><span class='line'>
</span><span class='line'>real    0m0.141s
</span><span class='line'>user    0m0.125s
</span><span class='line'>sys     0m0.008s </span></code></pre></td></tr></table></div></figure>


<p>结论：在awk中执行算术运算，比在bash中执行更好一些。</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/07/05/pi-liang-xiu-gai-pdfwen-jian-ming-yi-ji-chuang-jian-wiki-links/'>http://jueqingsizhe66.github.io/blog/2017/07/05/pi-liang-xiu-gai-pdfwen-jian-ming-yi-ji-chuang-jian-wiki-links/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Racket Man Wanna Learn Datetype and Cases]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases/"/>
    <updated>2017-05-30T14:14:59+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases</id>
    <content type="html"><![CDATA[<p>无意中，想到了<a href="http://racket-lang.org/"> racket </a>，scheme家族中一员，那么亲切，lovely.</p>

<!--more-->




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='racket'><span class='line'><span class="nv">Welcome</span> <span class="nv">to</span> <span class="nv">Racket</span> <span class="nv">v6</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">/ </span><span class="mi">66</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="mi">33</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">/ </span><span class="mf">52.44</span> <span class="mf">0.834493</span><span class="p">)</span>
</span><span class='line'><span class="mf">62.840551089104395</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">/ </span><span class="mf">52.44</span> <span class="mf">0.834493</span><span class="p">)</span><span class="mi">-62</span>
</span><span class='line'><span class="mf">62.840551089104395</span>
</span><span class='line'><span class="mi">-62</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">/ </span><span class="mf">52.44</span> <span class="mf">0.834493</span><span class="p">)</span> <span class="mi">62</span><span class="p">)</span>
</span><span class='line'><span class="mf">0.8405510891043946</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">- </span><span class="p">(</span><span class="nb">/ </span><span class="mf">52.44</span> <span class="mf">0.834493</span><span class="p">)</span> <span class="mi">62</span><span class="p">)</span> <span class="mi">360</span><span class="p">)</span>
</span><span class='line'><span class="mf">302.59839207758205</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="nv">exit</span><span class="c1">;</span>
</span><span class='line'><span class="o">#</span><span class="nv">&lt;procedure:exit&gt;</span>
</span><span class='line'><span class="nv">&gt;</span> <span class="p">(</span><span class="nf">exit</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>复习列表:</p>

<ol>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/19/the-implementation-of-define-datetype/">datetype</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/23/casesde-zuo-yong/">cases</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/25/first-interpreter-from-eopl/">First Interpreter From EOPL</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/27/the-second-interpreter-from-one/">The Second Interpreter from one</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/27/the-third-interpreter-implementing-proc/">The third Interpreter with proc feature</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/27/the-fourth-interpreter-about-the-traceproc/">the fourth Interpreter with traceproc feature</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/02/28/the-fifth-interpreter-with-the-implementation-of-letrec-important/">The fifth Interpreter with letrec feature</a></li>
<li>Read the EOPL book</li>
</ol>


<p>Deadline: 2017-06-30</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases/'>http://jueqingsizhe66.github.io/blog/2017/05/30/racket-man-wanna-learn-datetype-and-cases/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu17.04 Install FAST8.16]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16/"/>
    <updated>2017-05-19T15:05:44+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16</id>
    <content type="html"><![CDATA[<p>Something Noted in the process of installation FAST8.16 in the 32bit ubuntu17.04 system.</p>

<!--more-->


<h3>1. Download <a href="https://nwtc.nrel.gov/FAST8"> Fast8.16</a> and decompress</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir FAST-816
</span><span class='line'>cd FAST-816
</span><span class='line'>mv FAST*.tar.gz FAST-816
</span><span class='line'>tar -xvf FAST*.tar.gz
</span></code></pre></td></tr></table></div></figure>


<h3>2. Download <a href="https://nwtc.nrel.gov/system/files/MAP_v1.20.10.tar.gz"> Map </a> for generating map.so and decompress</h3>

<p>FAST_DIR 告诉MAP FAST项目存在哪里</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd FAST-816
</span><span class='line'>mkdir LIBMAP
</span><span class='line'>cd LIBMAP
</span><span class='line'>mv ../../*.MAP*.tar.gz .
</span><span class='line'>tar -xvf *MAP*.tar.gz
</span><span class='line'>
</span><span class='line'>cd compiling
</span><span class='line'>vim driver_makefile&lt;&lt;EOF
</span><span class='line'>
</span><span class='line'>----- FAST_DIR     = ../Source
</span><span class='line'>+++++ FAST_DIR     = /paper/FAST-816/
</span><span class='line'>
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>cd ../src/
</span><span class='line'>
</span><span class='line'>vim makefile&lt;&lt;EOF
</span><span class='line'>
</span><span class='line'>----- BITS = -m64
</span><span class='line'>+++++ BITS = -m32  32bit系统
</span><span class='line'>
</span><span class='line'>EOF
</span><span class='line'>
</span><span class='line'>make#################something error here</span></code></pre></td></tr></table></div></figure>


<h3>make Libmap.so something error here</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a.o mapinit.o maperror.o lineroutines.o numeric.o outputstream.o mapapi.o lmroutines.o jacobian.o residual.o  -lm -llapacke 
</span><span class='line'>/usr/bin/ld: 找不到 -llapacke
</span><span class='line'>/usr/bin/ld: 找不到 -llapacke
</span><span class='line'>collect2: error: ld returned 1 exit status
</span><span class='line'>makefile:81: recipe for target 'all' failed
</span><span class='line'>make: *** [all] Error 1
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://jueqingsizhe66.github.io/blog/2016/04/15/ubuntu15-dot-10-32bit-an-zhuang-fastv8-dot-15/">fixed it</a>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt-get install lapacke-dev*</span></code></pre></td></tr></table></div></figure>


<h3>make again</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>make ### OK generate libmap-1.2.so
</span><span class='line'>
</span><span class='line'>mkdir /paper/FAST-816/bin
</span><span class='line'>cp libmap-1.20.10.so /paper/FAST-816/bin
</span></code></pre></td></tr></table></div></figure>


<h3>3. Now Install FAST</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /paper/FAST-816/compiling/
</span><span class='line'>make 
</span><span class='line'>make -f makefile_DISCON_DLL ## for Test18-26.fst case</span></code></pre></td></tr></table></div></figure>


<p><strong>gcc -fbacktrack FAST_Subs 可能再gcc-6会有点问题，部分f90文件得删除该选项</strong>
删掉-fbacktrace测试通过</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 2 ❯ make
</span><span class='line'>gfortran -I Obj_lin32 -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -DNO_LibLoad -DUSE_DLL_INTERFACE -c ../Source/FAST_Subs.f90 -o Obj_lin32/FAST_Subs.o -J Obj_lin32 -B Obj_lin32
</span><span class='line'>gfortran: internal compiler error: 已杀死 (program f951)
</span><span class='line'>Please submit a full bug report,
</span><span class='line'>with preprocessed source if appropriate.
</span><span class='line'>See &lt;file:///usr/share/doc/gcc-6/README.Bugs&gt; for instructions.
</span><span class='line'>makefile:416: recipe for target 'FAST_Subs.o' failed
</span><span class='line'>make: *** [FAST_Subs.o] Error 4
</span></code></pre></td></tr></table></div></figure>


<h3>4. Run Test1-18.fst</h3>

<p>You can go to /paper/FAST-816/bin to check whether FAST_Glin32 and libmap.so have been generated or not</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /paper/FAST-816/bin
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>❯ ./FAST_glin32 ../CertTest/Test02.fst
</span><span class='line'>
</span><span class='line'> **************************************************************************************************
</span><span class='line'> FAST (v8.16.00a-bjj, 27-Jul-2016)
</span><span class='line'>
</span><span class='line'> Copyright (C) 2016 National Renewable Energy Laboratory
</span><span class='line'>
</span><span class='line'> This program comes with ABSOLUTELY NO WARRANTY. See the "license.txt" file distributed with this
</span><span class='line'> software for details.
</span><span class='line'> **************************************************************************************************
</span><span class='line'>
</span><span class='line'>  Running FAST (v8.16.00a-bjj, 27-Jul-2016), compiled as a 32-bit application using single
</span><span class='line'>  precision
</span><span class='line'>  linked with NWTC Subroutine Library (v2.09.00, 23-Jul-2016)
</span><span class='line'>
</span><span class='line'>  Heading of the FAST input file:
</span><span class='line'>    FAST Certification Test #02: AWT-27CR2 with many DOFs with startup and shutdown and steady wind
</span><span class='line'>
</span><span class='line'>  Running ElastoDyn (v1.04.00a-bjj, 26-Jul-2016).
</span><span class='line'>
</span><span class='line'>  Running AeroDyn (v15.03.00, 27-Jul-2016).
</span><span class='line'>
</span><span class='line'>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).
</span><span class='line'>
</span><span class='line'>  Running BEM (v1.02.00, 29-Jun-2016).
</span><span class='line'>
</span><span class='line'>  Running InflowWind (v3.03.00, 26-Jul-2016).
</span><span class='line'>  Opening InflowWind input file:  ../CertTest/AWT27/Test02_InflowWind.dat
</span><span class='line'>
</span><span class='line'>  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).
</span><span class='line'>  Timestep: 0 of 20 seconds.
</span><span class='line'>
</span><span class='line'> Timestep: 2 of 20 seconds. Estimated final completion at 16:05:13.                               
</span><span class='line'> Timestep: 4 of 20 seconds. Estimated final completion at 16:05:12.    </span></code></pre></td></tr></table></div></figure>


<h3>5. Modify the ServoData for servo module</h3>

<p><a href="http://jueqingsizhe66.github.io/blog/2015/10/22/fast-in-ubuntu64bit-bian-yi-zhu-yi-shi-xiang/">DISON_DLL running</a>
因为FAST在运行Test18-26.fst的case时候会去读取5MW_BASELINE[只针对的是5MW]底下的ServoData的文件,
所以对应dll-filename得修改一下。</p>

<ol>
<li>make DISCON SO file</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>❯ make -f makefile_DISCON_DLL
</span><span class='line'>gfortran  -O2 -m32 -fbacktrace -ffree-line-length-none -x f95-cpp-input -C -DIMPLICIT_DLLEXPORT -fPIC -c ../CertTest/5MW_Baseline/ServoData/Source/DISCON.f90 -o Obj_lin32/DISCON.obj -J Obj_lin32 -B Obj_lin32
</span><span class='line'>gfortran -shared -O2 -m32 -fbacktrace -fPIC -I Obj_lin32 -o ../CertTest/5MW_Baseline/ServoData/DISCON_glin32.so \
</span><span class='line'> Obj_lin32/DISCON.obj
</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Change DLL_FileName in the configure data file</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /paper/FAST-816/CertTest/5MW_Baseline
</span><span class='line'>vim NRELOffshrBsline5MW_Onshore_ServoDyn.dat 
</span><span class='line'>
</span><span class='line'>修改DLL_FileName为 ServoData/DISCON_glin32.so</span></code></pre></td></tr></table></div></figure>


<p>Test RESULT:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  Running BeamDyn (v1.01.04, 26-Jul-2016).
</span><span class='line'>
</span><span class='line'>  Running AeroDyn (v15.03.00, 27-Jul-2016).
</span><span class='line'>
</span><span class='line'>  Running AirfoilInfo (v1.01.00a-bjj, 5-Apr-2016).
</span><span class='line'>
</span><span class='line'>  Running BEM (v1.02.00, 29-Jun-2016).
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 1
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 1
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 1
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 1
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 2
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 2
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 2
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 2
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 1, Blade = 3
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 2, Blade = 3
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 3, Blade = 3
</span><span class='line'> Warning: Turning off Unsteady Aerodynamics because C_nalpha is 0.  BladeNode = 4, Blade = 3
</span><span class='line'>
</span><span class='line'>  Running InflowWind (v3.03.00, 26-Jul-2016).
</span><span class='line'>  Opening InflowWind input file:  ../CertTest/5MW_Baseline/NRELOffshrBsline5MW_InflowWind_12mps.dat
</span><span class='line'>
</span><span class='line'>    Reading a 31x31 grid (145 m wide, 17.5 m to 162.5 m above ground) with a characteristic wind
</span><span class='line'>    speed of 12 m/s. This full-field file was generated by TurbSim (v1.06.00, 21-Sep-2012) on
</span><span class='line'>    07-Jan-2014 at 12:50:45.
</span><span class='line'>
</span><span class='line'>    Processed 1442 time steps of 20-Hz full-field data (72.05 seconds).
</span><span class='line'>
</span><span class='line'>  Running ServoDyn (v1.06.00a-bjj, 26-Jul-2016).
</span><span class='line'>
</span><span class='line'>  Running ServoDyn Interface for Bladed Controllers (using GNU Fortran for Linux, 14-Oct-2015).
</span><span class='line'>  Timestep: 0 of 20 seconds.
</span><span class='line'>
</span><span class='line'> FAST_Solution0:CalcOutputs_And_SolveForInputs:SolveOption2:SrvD_CalcOutput:Running with torque
</span><span class='line'> and pitch control of the NREL offshore 5MW baseline wind turbine from DISCON.dll as written by J.
</span><span class='line'> Jonkman of NREL/NWTC for use in the IEA Annex XXIII OC3 studies.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'> Timestep: 1 of 20 seconds. Estimated final completion at 16:20:36.                               
</span></code></pre></td></tr></table></div></figure>


<p>Okay, All things have been done.</p>

<p>Happy FAST programming.</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16/'>http://jueqingsizhe66.github.io/blog/2017/05/19/ubuntu17-dot-04-install-fast8-dot-16/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[See From NoteExpress]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress/"/>
    <updated>2017-05-18T22:03:06+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress</id>
    <content type="html"><![CDATA[<p><a href="http://www.inoteexpress.com/aegean/"> NoteExpress </a>是一个文档管理软件，用于管理参考文件，可以方便的word等进行关联插入相关参考文献。
然而他有一个样式编辑器,很普通，却是让我有点触动。</p>

<!--more-->


<h3>三个定义</h3>

<ol>
<li>过滤系统：让你的程序获得合适的数据，在运算系统之前.[struts的拦截器];你需要进行过滤，才能得到满足运算需要的<strong>数据</strong></li>
<li>运算系统：合适的数据进行算法运算，矩阵运算等</li>
<li>样式系统: 运算完的数据进行输出,很多美化的工作。</li>
</ol>


<p>linux的ls可以有很多选项，可以让你的结果不一样，这个选项的效果其实跟样式系统的效果是一致的，都是你对
现实的输出不满意，于是修改，使得你的输出更加perfect</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ls 
</span><span class='line'>ls -ls 
</span><span class='line'>ls -lsh  # 显示文件大小按照人类比较好识别的方式
</span><span class='line'>ls -lsha # 显示隐藏文件</span></code></pre></td></tr></table></div></figure>


<p><a href="http://www.cnblogs.com/ggjucheng/archive/2013/01/13/2858470.html"> awk </a>是linux重要的过滤工具，他就好象是一个鱼网过滤器一样，按照孔的形状过滤字段, 也叫做字段级别过滤器。
<a href="http://www.iteye.com/topic/587673"> sed </a>是一个行修改工具，行级别过滤器, <a href="http://blog.csdn.net/itsenlin/article/details/21129405"> 有几种典型的模式 </a>s,p,d,x,g,h etc</p>

<p>但就是这么简单的几个系统，却是组成了很多业务系统的实现过程的定义，你可以很容易把它替换成为你当前正在处理的阶段，see here to there.</p>

<h3>One Sentence</h3>

<p>每个人都应该有自己的样式系统，this is your style, nobody can change you!
Different Style System makes you different.
人应该有点脾气.</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress/'>http://jueqingsizhe66.github.io/blog/2017/05/18/see-from-noteexpress/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Can You See Them From Here?]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/05/18/can-you-see-them-from-here/"/>
    <updated>2017-05-18T20:44:59+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/05/18/can-you-see-them-from-here</id>
    <content type="html"><![CDATA[<h2>[[<strong>Here Song</strong>]]</h2>

<pre><code>I am here to look forward,
Nothing or many things?
I am embarrassed.

what should I do here?
What is your plan? what is your target?
Come on,Come on!
Be confident, do and do it at the best,
so you can see more from here

Life is a road with many ups and downs.
Looking at the stars in the sky, Doing at the desk in the grounds.
</code></pre>

<!--more-->


<h2>理解你的Here，才能到达There</h2>

<p>Go there Base on Here !</p>

<pre><code>千里之行，始于足下;
百层高楼，起于垒土;
</code></pre>

<p>You are Here!</p>

<ol>
<li><a href="http://think-like-a-git.net/sections/rebase-from-the-ground-up/a-helpful-mnemonic-for-git-rebase-arguments.html">git rebase Here There</a></li>
</ol>


<p><img src="http://jueqingsizhe66.github.io/images/linux/gitflow.png" alt="gitFlow" /></p>

<p>The home faraway
<img src="http://jueqingsizhe66.github.io/images/linux/railway.jpg" alt="railway" /></p>

<p>See the sumrise, here to go! Let&rsquo;s go!
<img src="http://jueqingsizhe66.github.io/images/linux/time.jpg" alt="sumrise" /></p>

<ol>
<li>somethings added later</li>
</ol>


<p><a href="http://people.csail.mit.edu/sperezde/pre-print-oopsla16.pdf"> To this point </a> , you should understand that use <code>to this point</code> to let your draft become a beautiful road way in your paper.</p>

<p>To this point , you should understand why you do this action at the current time!
To this point , we can realized that there are a rule about the yaw aerodynamic characteristic.</p>

<p>With time goes on or from now on, maybe the result before us show me some infos. See from history.</p>

<p>Your need to find the failure time in the history, understand it, understand why.</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/05/18/can-you-see-them-from-here/'>http://jueqingsizhe66.github.io/blog/2017/05/18/can-you-see-them-from-here/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql乱码回顾]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/13/mysqlluan-ma-hui-gu/"/>
    <updated>2017-02-13T08:50:12+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/13/mysqlluan-ma-hui-gu</id>
    <content type="html"><![CDATA[<p>mysql是一个中型的数据库操作系统平台,他的<a href="http://www.linuxidc.com/Linux/2013-04/83581.htm">基本组成</a>由存储引擎、各个命令模块、优化器、缓存器、解析器、用户模块、链接器(connector)等组成，
<img src="http://jueqingsizhe66.github.io/images/java/mysql/mysql-archetype.png" alt="mysql architect" /></p>

<p>其中存储引擎现在一般选用innodb居多(具体可以查看<a href="http://c.biancheng.net/cpp/html/1465.html">各个存储引擎的区别</a>)</p>

<!--more-->


<p>mysql操作级别：</p>

<ol>
<li>数据库级别</li>
<li>表级别</li>
<li>字段级别</li>
</ol>


<p>而这三个级别就影响这数据库的乱码级别。
一般事先使用<code>show variables like '%char%'</code> 来查看mysql的所有字符信息，参考<a href="http://www.jb51.net/article/74769.htm">mysql乱码解决</a>,
根据该文基本上可以解决问题，另外可以进一步查看各个字符集和mysql查询涉及到的<a href="http://www.jb51.net/article/31135.htm">各个字符集的关系(对应命令的求解)</a>,
查阅了<a href="http://www.pc6.com/infoview/Article_63586.html">多个链接</a>,都显示<code>set names gbk</code>对最终的显示有影响，根据我的使用经验来讲，</p>

<p><font color="red">当你使用<code>set names gbk</code>则可以显示正常，而<code>set names utf8</code>则出现乱码</font></p>

<p>我在建立数据库的时候也使用了<code>create database rupeng chracter set utf8</code>等，但试过一遍只有最终加上<code>set names gbk</code>有效果。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set character_set_database=utf8;
</span><span class='line'>set character_set_server=utf8;
</span><span class='line'>set character_set_client=gbk;
</span><span class='line'>set character_set_connection=gbk;</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>系统变量：
</span><span class='line'>client    为客户端使用的字符集。
</span><span class='line'>connection    为连接数据库的字符集设置类型，如果程序没有指明连接数据库使用的字符集类型则按照服务器端默认的字符集设置。
</span><span class='line'>database  为数据库服务器中某个库使用的字符集设定，如果建库时没有指明，将使用服务器安装时指定的字符集设置。
</span><span class='line'>results   为数据库给客户端返回时使用的字符集设定，如果没有指明，使用服务器默认的字符集。
</span><span class='line'>server    为服务器安装时指定的默认字符集设定。
</span><span class='line'>system    为数据库系统使用的字符集设定。
</span><span class='line'>
</span><span class='line'>– character_set_client：客户端来源数据使用的字符集
</span><span class='line'>– character_set_connection：连接层字符集
</span><span class='line'>– character_set_database：当前选中数据库的默认字符集
</span><span class='line'>– character_set_results：查询结果字符集
</span><span class='line'>– character_set_server：默认的内部操作字符集
</span><span class='line'>– character_set_system：系统元数据(字段名等)字符集
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.csdn.net/sunqing0316/article/details/46680617">mysql字符集转换过程</a></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>1. MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection；
</span><span class='line'>2. 进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：
</span><span class='line'>• 使用每个数据字段的CHARACTER SET设定值；
</span><span class='line'>• 若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)；
</span><span class='line'>• 若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值；
</span><span class='line'>• 若上述值不存在，则使用character_set_server设定值。
</span><span class='line'>3. 将操作结果从内部操作字符集转换为character_set_results。</span></code></pre></td></tr></table></div></figure>


<p>参考<a href="http://www.2cto.com/database/201410/341144.html">myeclipse-mysql</a>,有一个原则就是不要让你的character出现<code>latin1</code>编码即可</p>

<p>我们操作所有数据库<a href="http://mysql.com/">mysql中型</a>,<a href="https://www.sqlite.org/">sqlite</a>,<a href="https://www.postgresql.org/">postgreSql流行</a>,<a href="http://www.ibm.com/analytics/us/en/technology/db2/">db2(IBM)企业级</a>,<a href="https://www.oracle.com/index.html">oracle大型运用企业级</a>,<a href="https://www.ibm.com/analytics/us/en/technology/informix/">informix(IBM)</a>,
<a href="https://www.microsoft.com/zh-cn/sql-server/">sql server</a></p>

<ul>
<li><a href="http://www.yiibai.com/mysql/mysql_quick_start.html">mysql快速入门学习</a></li>
<li><a href="http://www.w3school.com.cn/sql/sql_intro.asp">W3C sql入门教程</a></li>
<li><a href="http://blog.csdn.net/hgd613/article/details/50433135">左连接</a></li>
<li><a href="http://database.51cto.com/art/200511/12708.htm">51cto数据库论坛</a></li>
</ul>


<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/13/mysqlluan-ma-hui-gu/'>http://jueqingsizhe66.github.io/blog/2017/02/13/mysqlluan-ma-hui-gu/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java开发nexus私服搭建]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/10/javakai-fa-nexussi-fu-da-jian/"/>
    <updated>2017-02-10T00:04:33+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/10/javakai-fa-nexussi-fu-da-jian</id>
    <content type="html"><![CDATA[<p>针对一台全新的电脑，安装java开发的maven私服，记录如下，并在IDEA中进行测试。</p>

<p>涉及到javase安装，maven安装，nexus私服安装，nexus本地配置，nexus界面介绍</p>

<!--more-->


<ol>
<li>安装JAVA jdk ,下载<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">javaSE安装包</a>,注意JDK和JRE不要放在同一文件夹下</li>
<li>配置JAVA_HOME为JDk目录，并添加JDK的bin目录(%JAVA_HOME%\bin)到path中
<img src="http://jueqingsizhe66.github.io/images/java/nexus/java.png" alt="java" /></li>
<li>下载<a href="http://maven.apache.org/">maven</a>,并解压缩，配置MAVEN_HOME为maven的根目录，并添加%MAVEN_HOME%\bin到path
中
<img src="http://jueqingsizhe66.github.io/images/java/nexus/home.png" alt="home" />
<img src="http://jueqingsizhe66.github.io/images/java/nexus/bin.png" alt="bin" />
<img src="http://jueqingsizhe66.github.io/images/java/nexus/java.png" alt="mvn" /></li>
</ol>


<p>显示了<code>mvn -v</code>,也就表示装完了maven
4. 下载<a href="https://www.sonatype.com/download-oss-sonatype">nexus2.14</a>,在windows下使用管理员身份打开cmd，并cd到nexus的bin目录，进行安装</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nexus install
</span><span class='line'>nexus start</span></code></pre></td></tr></table></div></figure>


<p>注意一定得配置bin\jsw\wrapper.conf的java bin信息，否则出错。
<img src="http://jueqingsizhe66.github.io/images/java/nexus/wrapper.png" alt="wrapper" /></p>

<p>出现的错误为无法启动，
<img src="http://jueqingsizhe66.github.io/images/java/nexus/success.png" alt="success" /></p>

<hr/>


<p>做完前面的几步之后只是，把配置环境弄完了，还得进行私服镜像配置。
首先打开nexus私服页面，使用<code>http://localhost:8089/nexus/#welcome</code></p>

<p><img src="http://jueqingsizhe66.github.io/images/java/nexus/nexus.png" alt="nexus" /></p>

<p>默认的登陆密码是</p>

<pre><code>账号：admin
密码：admin123
</code></pre>

<p>登陆完的界面
<img src="http://jueqingsizhe66.github.io/images/java/nexus/repositories.png" alt="login" /></p>

<p>配置中心仓库:</p>

<p>中心仓库设置download remote indexes为真，为设置本地私服提供源。
<img src="http://jueqingsizhe66.github.io/images/java/nexus/central.png" alt="central" /></p>

<p>配置了release和snapshot仓库
<img src="http://jueqingsizhe66.github.io/images/java/nexus/release.png" alt="release" />
<img src="http://jueqingsizhe66.github.io/images/java/nexus/snapshot.png" alt="snapshot" /></p>

<p>然后配置了第三方插件
<img src="http://jueqingsizhe66.github.io/images/java/nexus/third.png" alt="third" /></p>

<p><strong>进入最关键的public Repositories设置</strong></p>

<p><img src="http://jueqingsizhe66.github.io/images/java/nexus/public.png" alt="public" /></p>

<p>有时候可以使用试用Scheduled Tasks观看库的index是否正常进行。
<img src="http://jueqingsizhe66.github.io/images/java/nexus/schedule.png" alt="scheduled" /></p>

<hr/>




<h2 id="imp">镜像私服配置</h2>


<p>maven中的settings.xml登陆私服的账户密码设置
<img src="http://jueqingsizhe66.github.io/images/java/nexus/user.png" alt="user" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  &lt;servers&gt;
</span><span class='line'>    &lt;server&gt; 
</span><span class='line'>        &lt;id&gt;nexus-release&lt;/id&gt;
</span><span class='line'>        &lt;username&gt;admin&lt;/username&gt;
</span><span class='line'>        &lt;password&gt;admin123&lt;/password&gt;
</span><span class='line'>    &lt;/server&gt; 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    &lt;server&gt; 
</span><span class='line'>        &lt;id&gt;nexus-snapshot&lt;/id&gt;
</span><span class='line'>        &lt;username&gt;admin&lt;/username&gt;
</span><span class='line'>        &lt;password&gt;admin123&lt;/password&gt;
</span><span class='line'>    &lt;/server&gt; 
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    &lt;server&gt; 
</span><span class='line'>        &lt;id&gt;nexus&lt;/id&gt;
</span><span class='line'>        &lt;username&gt;admin&lt;/username&gt;
</span><span class='line'>        &lt;password&gt;admin123&lt;/password&gt;
</span><span class='line'>    &lt;/server&gt; 
</span><span class='line'>      &lt;!-- server
</span><span class='line'>     | Specifies the authentication information to use when connecting to a particular server, identified by
</span><span class='line'>     | a unique name within the system (referred to by the 'id' attribute below).
</span><span class='line'>     |
</span><span class='line'>     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are
</span><span class='line'>     |       used together.
</span><span class='line'>     |
</span><span class='line'>    &lt;server&gt;
</span><span class='line'>      &lt;id&gt;deploymentRepo&lt;/id&gt;
</span><span class='line'>      &lt;username&gt;repouser&lt;/username&gt;
</span><span class='line'>      &lt;password&gt;repopwd&lt;/password&gt;
</span><span class='line'>    &lt;/server&gt;
</span><span class='line'>    --&gt;
</span><span class='line'>
</span><span class='line'>    &lt;!-- Another sample, using keys to authenticate.
</span><span class='line'>    &lt;server&gt;
</span><span class='line'>      &lt;id&gt;siteServer&lt;/id&gt;
</span><span class='line'>      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;
</span><span class='line'>      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;
</span><span class='line'>    &lt;/server&gt;
</span><span class='line'>    --&gt;
</span><span class='line'>  &lt;/servers&gt;
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p><strong>镜像配置</strong></p>

<p>注意url链接的端口设置</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>
</span><span class='line'>&lt;mirrors&gt;
</span><span class='line'>&lt;mirror&gt;
</span><span class='line'>    &lt;id&gt;nexus&lt;/id&gt;
</span><span class='line'>    &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;
</span><span class='line'>    &lt;url&gt;http://localhost:8089/nexus/content/groups/public/&lt;/url&gt;
</span><span class='line'>&lt;/mirror&gt;
</span><span class='line'>&lt;/mirrors&gt;
</span><span class='line'>&lt;profiles&gt;
</span><span class='line'>&lt;profile&gt;
</span><span class='line'>    &lt;id&gt;nexus&lt;/id&gt;
</span><span class='line'>&lt;repositories&gt;
</span><span class='line'>    &lt;repository&gt;
</span><span class='line'>        &lt;id&gt;central&lt;/id&gt;
</span><span class='line'>        &lt;url&gt;http://central&lt;/url&gt;
</span><span class='line'>        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
</span><span class='line'>        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
</span><span class='line'>    &lt;/repository&gt;
</span><span class='line'>&lt;/repositories&gt;
</span><span class='line'>&lt;pluginRepositories&gt;
</span><span class='line'>    &lt;pluginRepository&gt;
</span><span class='line'>        &lt;id&gt;central&lt;/id&gt;
</span><span class='line'>        &lt;url&gt;http://central&lt;/url&gt;
</span><span class='line'>        &lt;releases&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/releases&gt;
</span><span class='line'>        &lt;snapshots&gt;&lt;enabled&gt;true&lt;/enabled&gt;&lt;/snapshots&gt;
</span><span class='line'>    &lt;/pluginRepository&gt;
</span><span class='line'>&lt;/pluginRepositories&gt;
</span><span class='line'>&lt;/profile&gt;
</span><span class='line'>&lt;/profiles&gt;
</span><span class='line'>&lt;activeProfiles&gt;
</span><span class='line'>    &lt;activeProfile&gt;nexus&lt;/activeProfile&gt;
</span><span class='line'>&lt;/activeProfiles&gt;
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>在maven中一般是需要设置下载控件jar包放在哪里,在没有私服的情况下，我一般
可以在setting.xml中设置localRepository</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>   | Default: ${user.home}/.m2/repository
</span><span class='line'>  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;
</span></code></pre></td></tr></table></div></figure>


<p>当然IDEA在导入项目或者新建项目的时候都会提醒Environment Variable,设置一下setting和local repository
(类似的思路需要在myeclipse配置)
<img src="http://jueqingsizhe66.github.io/images/java/nexus/setting.png" alt="impo" />
而私服nexus的存放地点，在nexus界面的时候就已经设置好了，所以也得在每台电脑操作一遍(<font color="red">一定不能错</font>)。</p>

<p>镜像的话，就不会执行maven的<code>mvn install</code>等命令还一直向外部仓库访问链接，结果是访问的链接
都是本地的，可看下节测试。</p>

<h2 id="ida">IDEA测试镜像私服</h2>


<p>现在只能通过这个激活了，下载license server
<img src="http://jueqingsizhe66.github.io/images/java/nexus/license.png" alt="license" /></p>

<p>测试结果如下:
<code>mvn site</code></p>

<p><img src="http://jueqingsizhe66.github.io/images/java/nexus/idea.png" alt="idea" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>INFO] artifact org.springframework:spring-beans: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-context: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-context-support: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-core: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-expression: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-instrument: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-instrument-tomcat: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-jdbc: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-jms: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-orm: checking for updates from nexus
</span><span class='line'>[INFO] artifact org.springframework:spring-oxm: checking for updates from nexus</span></code></pre></td></tr></table></div></figure>




<h2 id="result">结论</h2>


<p>整个配置过程有效，测试通过，进一步可以参考<a href="http://vdisk.weibo.com/s/za2TN71LdL1tl">maven实战 许晓斌</a>,里面包含了maven的坐标空间概念等，详细介绍了
maven系统的各个组成和集成测试环境的搭建。</p>

<p>可以拓展阅读<a href="http://blog.csdn.net/c1481118216/article/category/6250182">java blog</a>
三个有用工具包:</p>

<ul>
<li><a href="https://github.com/venusdrogon/feilong-platform">飞龙 javase javaee(国产)</a></li>
<li><a href="http://feilong-core.mydoc.io/?t=149471">飞龙特别用心的手册</a></li>
<li><a href="https://github.com/venusdrogon/feilong-core/wiki/install">可以玩玩feilong-platform平台的安装 以及mvn site产生好看的javadoc</a></li>
<li><a href="https://github.com/looly/hutool">Hutool javase(国产)</a></li>
<li><a href="http://www.hutool.cn/apidocs/">hutool API手册</a>  <a href="http://hutool.mydoc.io/">Hutool Wiki</a></li>
<li><a href="http://ibeetl.com/guide/#beetl">闲大赋 beetl 好用的模板引擎(国产)</a></li>
<li><a href="http://cn.vuejs.org/">vue.js火热的前端js框架(国产)</a></li>
</ul>


<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/10/javakai-fa-nexussi-fu-da-jian/'>http://jueqingsizhe66.github.io/blog/2017/02/10/javakai-fa-nexussi-fu-da-jian/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fortran读取csv文件]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/08/fortrandu-qu-csvwen-jian/"/>
    <updated>2017-02-08T17:29:29+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/08/fortrandu-qu-csvwen-jian</id>
    <content type="html"><![CDATA[<p>本文只是简单对一个文件读取模块DFile_mod的一个运用，并读取逗号分隔的csv文件。</p>

<!--more-->


<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/csv/csv1.png" alt="csvread" /></p>

<p>FileMod.f90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Module </span><span class="nv">DFile_Mod</span>
</span><span class='line'>  <span class="k">Implicit None</span>
</span><span class='line'>  <span class="c">!!**************************************</span>
</span><span class='line'>  <span class="c">!*  识别文件的空格和逗号作为分隔符</span>
</span><span class='line'>  <span class="c">!!*************************************** </span>
</span><span class='line'><span class="k">contains </span>
</span><span class='line'>
</span><span class='line'><span class="k">subroutine </span><span class="nv">binaryStreamType</span>
</span><span class='line'><span class="k">implicit none</span>
</span><span class='line'><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">File_Unit</span>
</span><span class='line'><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">File_UnitOutput</span>
</span><span class='line'>   <span class="c">!!**************************************</span>
</span><span class='line'>    <span class="c">!* DFile_Mod 变量定义  100%</span>
</span><span class='line'>    <span class="c">!!*************************************** </span>
</span><span class='line'>    <span class="kt">Character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">512</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">cLine</span>
</span><span class='line'>    <span class="kt">integer</span> <span class="kd">::</span> <span class="nv">nRow</span><span class="p">,</span> <span class="nv">nCol</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;yezhaoliang&quot;</span><span class="p">,</span><span class="nv">addr</span><span class="o">=</span><span class="s2">&quot;zhangzhou&quot;</span>
</span><span class='line'>    <span class="kt">INTEGER</span> <span class="kd">::</span> <span class="nv">I</span>
</span><span class='line'><span class="k">type</span> <span class="kd">::</span> <span class="nv">data_head</span>
</span><span class='line'><span class="kt">integer</span><span class="p">(</span><span class="nb">kind</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">column</span>
</span><span class='line'><span class="k">end type </span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span><span class="p">(</span><span class="nv">data_head</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">FileHead</span>
</span><span class='line'><span class="c">!real,allocatable :: g(:,:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">firstColumn</span><span class="p">(:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">secondColumn</span><span class="p">(:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">thirdColumn</span><span class="p">(:)</span>
</span><span class='line'>
</span><span class='line'> <span class="k">Open</span><span class="p">(</span> <span class="nv">NewUnit</span><span class="o">=</span><span class="nv">File_Unit</span> <span class="p">,</span> <span class="nv">File</span> <span class="o">=</span> <span class="s1">&#39;./data/myfile.csv&#39;</span> <span class="p">)</span>
</span><span class='line'> <span class="k">Open</span><span class="p">(</span> <span class="nv">NewUnit</span><span class="o">=</span><span class="nv">File_UnitOutput</span> <span class="p">,</span> <span class="nv">File</span> <span class="o">=</span> <span class="s1">&#39;./data/myfile12.csv&#39;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">nRow</span> <span class="o">=</span> <span class="nv">GetFileN</span><span class="p">(</span> <span class="nv">File_Unit</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span> <span class="o">*</span> <span class="p">,</span> <span class="o">*</span> <span class="p">)</span> <span class="s1">&#39;文件共&#39;</span><span class="p">,</span><span class="nv">nRow</span><span class="p">,</span><span class="s1">&#39;行！&#39;</span>
</span><span class='line'>  <span class="k">read</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="nv">FileHead</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;m=&#39;</span><span class="p">,</span><span class="nv">FileHead</span><span class="p">%</span><span class="nv">column</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">firstColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">!! 流方式读取</span>
</span><span class='line'><span class="c">!  READ(File_Unit) g</span>
</span><span class='line'>
</span><span class='line'><span class="mi">250</span> <span class="k">format</span><span class="p">(</span><span class="mi">3</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">251</span> <span class="k">format</span><span class="p">(</span><span class="nv">I4</span><span class="p">,</span><span class="nv">I4</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">252</span> <span class="k">format</span> <span class="p">(</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">253</span> <span class="k">format</span> <span class="p">(</span><span class="nv">I4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">I4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="k">Do </span><span class="nv">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">read</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">,</span><span class="mi">251</span><span class="p">)</span> <span class="nv">firstColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">),</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">),</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'> <span class="k">end Do</span>
</span><span class='line'><span class="k">  DO </span><span class="nv">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">,</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>   <span class="c">!write(*,&#39;(f10.4,A,f10.4,A,f10.4)&#39;)  firstColumn(i),&#39;,&#39;,secondColumn(i),&#39;,&#39;,thirdColumn(i)</span>
</span><span class='line'>   <span class="k">write</span><span class="p">(</span><span class="nv">File_UnitOutput</span><span class="p">,</span><span class="mi">253</span><span class="p">)</span>  <span class="nv">firstColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;,--&#39;</span><span class="p">,</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;,--&#39;</span><span class="p">,</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end do</span>
</span><span class='line'>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">firstColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">secondColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">thirdColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">close</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">)</span>
</span><span class='line'><span class="k">close</span><span class="p">(</span><span class="nv">File_UnitOutput</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">!Do i = 1, nRow</span>
</span><span class='line'>  <span class="c">!  Do j = 1, FileHead%column</span>
</span><span class='line'>  <span class="c">!</span>
</span><span class='line'>  <span class="c">!  end do</span>
</span><span class='line'>  <span class="c">!end do</span>
</span><span class='line'>
</span><span class='line'><span class="k">end subroutine </span><span class="nv">binaryStreamType</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">subroutine </span><span class="nv">testType</span>
</span><span class='line'><span class="k">implicit none</span>
</span><span class='line'><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">File_Unit</span>
</span><span class='line'><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">File_UnitOutput</span>
</span><span class='line'>   <span class="c">!!**************************************</span>
</span><span class='line'>    <span class="c">!* DFile_Mod 变量定义  100%</span>
</span><span class='line'>    <span class="c">!!*************************************** </span>
</span><span class='line'>    <span class="kt">Character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">512</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">cLine</span>
</span><span class='line'>    <span class="kt">integer</span> <span class="kd">::</span> <span class="nv">nRow</span><span class="p">,</span> <span class="nv">nCol</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">name</span><span class="o">=</span><span class="s2">&quot;yezhaoliang&quot;</span><span class="p">,</span><span class="nv">addr</span><span class="o">=</span><span class="s2">&quot;zhangzhou&quot;</span>
</span><span class='line'>    <span class="kt">INTEGER</span> <span class="kd">::</span> <span class="nv">I</span>
</span><span class='line'><span class="k">type</span> <span class="kd">::</span> <span class="nv">data_head</span>
</span><span class='line'><span class="kt">integer</span><span class="p">(</span><span class="nb">kind</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">column</span>
</span><span class='line'><span class="k">end type </span>
</span><span class='line'>
</span><span class='line'><span class="k">type</span><span class="p">(</span><span class="nv">data_head</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">FileHead</span>
</span><span class='line'><span class="c">!real,allocatable :: g(:,:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">firstColumn</span><span class="p">(:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">secondColumn</span><span class="p">(:)</span>
</span><span class='line'><span class="kt">real</span><span class="p">,</span><span class="k">allocatable</span> <span class="kd">::</span> <span class="nv">thirdColumn</span><span class="p">(:)</span>
</span><span class='line'>
</span><span class='line'> <span class="k">Open</span><span class="p">(</span> <span class="nv">NewUnit</span><span class="o">=</span><span class="nv">File_Unit</span> <span class="p">,</span> <span class="nv">File</span> <span class="o">=</span> <span class="s1">&#39;./data/A001.csv&#39;</span> <span class="p">)</span>
</span><span class='line'> <span class="k">Open</span><span class="p">(</span> <span class="nv">NewUnit</span><span class="o">=</span><span class="nv">File_UnitOutput</span> <span class="p">,</span> <span class="nv">File</span> <span class="o">=</span> <span class="s1">&#39;./data/A0012.csv&#39;</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">nRow</span> <span class="o">=</span> <span class="nv">GetFileN</span><span class="p">(</span> <span class="nv">File_Unit</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span> <span class="o">*</span> <span class="p">,</span> <span class="o">*</span> <span class="p">)</span> <span class="s1">&#39;文件共&#39;</span><span class="p">,</span><span class="nv">nRow</span><span class="p">,</span><span class="s1">&#39;行！&#39;</span>
</span><span class='line'>  <span class="k">read</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="nv">FileHead</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;m=&#39;</span><span class="p">,</span><span class="nv">FileHead</span><span class="p">%</span><span class="nv">column</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">firstColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>  <span class="k">allocate</span><span class="p">(</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">!! 流方式读取</span>
</span><span class='line'><span class="c">!  READ(File_Unit) g</span>
</span><span class='line'>
</span><span class='line'><span class="mi">250</span> <span class="k">format</span><span class="p">(</span><span class="mi">3</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">251</span> <span class="k">format</span><span class="p">(</span><span class="nv">I4</span><span class="p">,</span><span class="nv">I4</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">252</span> <span class="k">format</span> <span class="p">(</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="mi">253</span> <span class="k">format</span> <span class="p">(</span><span class="nv">I4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">I4</span><span class="p">,</span><span class="nv">A</span><span class="p">,</span><span class="nv">f10</span><span class="mf">.4</span><span class="p">)</span>
</span><span class='line'><span class="k">Do </span><span class="nv">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">read</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">,</span><span class="mi">251</span><span class="p">)</span> <span class="nv">firstColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">),</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">),</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'> <span class="k">end Do</span>
</span><span class='line'><span class="k">  DO </span><span class="nv">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">,</span><span class="nv">nRow</span><span class="o">-</span><span class="mi">1</span>
</span><span class='line'>   <span class="c">!write(*,&#39;(f10.4,A,f10.4,A,f10.4)&#39;)  firstColumn(i),&#39;,&#39;,secondColumn(i),&#39;,&#39;,thirdColumn(i)</span>
</span><span class='line'>   <span class="k">write</span><span class="p">(</span><span class="nv">File_UnitOutput</span><span class="p">,</span><span class="mi">253</span><span class="p">)</span>  <span class="nv">firstColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;,--&#39;</span><span class="p">,</span><span class="nv">secondColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span><span class="o">*</span><span class="mi">2</span><span class="p">,</span><span class="s1">&#39;,--&#39;</span><span class="p">,</span><span class="nv">thirdColumn</span><span class="p">(</span><span class="nv">i</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end do</span>
</span><span class='line'>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">firstColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">secondColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">deallocate</span><span class="p">(</span><span class="nv">thirdColumn</span><span class="p">)</span>
</span><span class='line'><span class="k">close</span><span class="p">(</span><span class="nv">File_Unit</span><span class="p">)</span>
</span><span class='line'><span class="k">close</span><span class="p">(</span><span class="nv">File_UnitOutput</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">!Do i = 1, nRow</span>
</span><span class='line'>  <span class="c">!  Do j = 1, FileHead%column</span>
</span><span class='line'>  <span class="c">!</span>
</span><span class='line'>  <span class="c">!  end do</span>
</span><span class='line'>  <span class="c">!end do</span>
</span><span class='line'>
</span><span class='line'><span class="k">end subroutine </span><span class="nv">testType</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="kt">Integer </span><span class="k">Function </span><span class="nv">GetDataN</span><span class="p">(</span> <span class="nv">cStr</span> <span class="p">)</span>
</span><span class='line'>    <span class="kt">Character</span><span class="p">(</span> <span class="nb">Len</span> <span class="o">=</span> <span class="o">*</span> <span class="p">)</span> <span class="p">,</span> <span class="k">Intent</span><span class="p">(</span> <span class="nv">IN</span> <span class="p">)</span> <span class="kd">::</span> <span class="nv">cStr</span>
</span><span class='line'>    <span class="kt">Integer</span> <span class="kd">::</span> <span class="nv">i</span>
</span><span class='line'>    <span class="kt">Logical</span> <span class="kd">::</span> <span class="nv">bIsSeparator</span> <span class="p">,</span> <span class="nv">bIsQuote</span>
</span><span class='line'>    <span class="nv">GetDataN</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="nv">bIsSeparator</span> <span class="o">=</span> <span class="nb">.TRUE.</span>
</span><span class='line'>    <span class="nv">bIsQuote</span> <span class="o">=</span> <span class="nb">.FALSE.</span>
</span><span class='line'>    <span class="k">Do </span><span class="nv">i</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">,</span> <span class="nb">Len_Trim</span><span class="p">(</span> <span class="nv">cStr</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">Select Case</span><span class="p">(</span> <span class="nv">cStr</span><span class="p">(</span><span class="nv">i</span><span class="p">:</span><span class="nv">i</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">Case</span><span class="p">(</span> <span class="s1">&#39;&quot;&#39;</span> <span class="p">,</span> <span class="s2">&quot;&#39;&quot;</span> <span class="p">)</span> <span class="c">!// 如果遇到引号</span>
</span><span class='line'>        <span class="k">If</span> <span class="p">(</span> <span class="ow">.Not.</span><span class="nv">bIsQuote</span> <span class="p">)</span> <span class="nv">GetDataN</span> <span class="o">=</span> <span class="nv">GetDataN</span> <span class="o">+</span> <span class="mi">1</span>  <span class="c">!//如果不在引号中，则增加一个数据</span>
</span><span class='line'>        <span class="nv">bIsQuote</span> <span class="o">=</span> <span class="ow">.Not.</span><span class="nv">bIsQuote</span> <span class="c">!// 引号结束或开始</span>
</span><span class='line'>        <span class="nv">bIsSeparator</span> <span class="o">=</span> <span class="nb">.FALSE.</span>
</span><span class='line'>      <span class="k">Case</span><span class="p">(</span> <span class="s2">&quot; &quot;</span> <span class="p">,</span> <span class="s2">&quot;,&quot;</span> <span class="p">,</span> <span class="nb">char</span><span class="p">(</span><span class="mi">9</span><span class="p">)</span> <span class="p">)</span> <span class="c">!// 如果遇到分隔符</span>
</span><span class='line'>        <span class="k">If</span> <span class="p">(</span> <span class="ow">.Not.</span><span class="nv">bIsQuote</span> <span class="p">)</span> <span class="k">then</span>  <span class="c">!// 分隔符如果不在引号中</span>
</span><span class='line'>          <span class="nv">bIsSeparator</span> <span class="o">=</span> <span class="nb">.TRUE.</span>
</span><span class='line'>        <span class="k">End If</span>
</span><span class='line'><span class="k">      Case </span><span class="nv">Default</span>
</span><span class='line'>        <span class="k">If</span> <span class="p">(</span> <span class="nv">bIsSeparator</span> <span class="p">)</span> <span class="k">then</span>
</span><span class='line'><span class="k">          </span><span class="nv">GetDataN</span> <span class="o">=</span> <span class="nv">GetDataN</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">End If</span>
</span><span class='line'><span class="k">        </span><span class="nv">bIsSeparator</span> <span class="o">=</span> <span class="nb">.FALSE.</span>
</span><span class='line'>      <span class="k">End Select</span>
</span><span class='line'><span class="k">    End Do</span>
</span><span class='line'><span class="k">  End Function </span><span class="nv">GetDataN</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">Function </span><span class="nv">f_numbervars</span><span class="p">(</span><span class="nv">vars</span><span class="p">)</span> <span class="nv">result</span><span class="p">(</span><span class="nv">numvars</span><span class="p">)</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=*</span><span class="p">),</span> <span class="k">intent</span><span class="p">(</span><span class="nv">in</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">vars</span>
</span><span class='line'>    <span class="kt">integer</span> <span class="kd">::</span> <span class="nv">numvars</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="nv">vars</span><span class="p">))</span> <span class="kd">::</span> <span class="nv">tmpvars</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">256</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">tmpvar</span>
</span><span class='line'>    <span class="nv">tmpvars</span> <span class="o">=</span> <span class="nb">trim</span><span class="p">(</span><span class="nb">adjustl</span><span class="p">(</span><span class="nv">vars</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">numvars</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">do while</span> <span class="p">(</span><span class="nb">len_trim</span><span class="p">(</span><span class="nv">tmpvars</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>      <span class="k">read</span><span class="p">(</span><span class="nv">tmpvars</span><span class="p">,</span> <span class="o">*</span><span class="p">)</span> <span class="nv">tmpvar</span>
</span><span class='line'>      <span class="nv">numvars</span> <span class="o">=</span> <span class="nv">numvars</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>      <span class="nv">tmpvars</span> <span class="o">=</span> <span class="nv">tmpvars</span><span class="p">(</span><span class="nb">index</span><span class="p">(</span><span class="nv">tmpvars</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">tmpvar</span><span class="p">))</span><span class="o">+</span><span class="nb">len_trim</span><span class="p">(</span><span class="nv">tmpvar</span><span class="p">):)</span>
</span><span class='line'>    <span class="k">end do</span>
</span><span class='line'><span class="k">  End Function </span><span class="nv">f_numbervars</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">Integer </span><span class="k">Function </span><span class="nv">GetFileN</span><span class="p">(</span> <span class="nv">iFileUnit</span> <span class="p">)</span>
</span><span class='line'>  <span class="c">!// 此函数应在打开文件后立即调用。调用后读取位置返回文件起始位置</span>
</span><span class='line'>    <span class="k">Implicit None</span>
</span><span class='line'><span class="k">    </span><span class="kt">Integer</span> <span class="p">,</span> <span class="k">Intent</span><span class="p">(</span> <span class="nv">IN</span> <span class="p">)</span> <span class="kd">::</span> <span class="nv">iFileUnit</span>
</span><span class='line'>    <span class="kt">character</span><span class="p">(</span> <span class="nb">Len</span> <span class="o">=</span> <span class="mi">1</span> <span class="p">)</span> <span class="kd">::</span> <span class="nv">cDummy</span>
</span><span class='line'>    <span class="kt">integer</span> <span class="kd">::</span> <span class="nv">ierr</span>
</span><span class='line'>    <span class="nv">GetFileN</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>    <span class="k">Rewind</span><span class="p">(</span> <span class="nv">iFileUnit</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">Do</span>
</span><span class='line'><span class="k">      Read</span><span class="p">(</span> <span class="nv">iFileUnit</span> <span class="p">,</span> <span class="o">*</span> <span class="p">,</span> <span class="nv">ioStat</span> <span class="o">=</span> <span class="nv">ierr</span> <span class="p">)</span> <span class="nv">cDummy</span>
</span><span class='line'>      <span class="k">If</span><span class="p">(</span> <span class="nv">ierr</span> <span class="o">/=</span> <span class="mi">0</span> <span class="p">)</span> <span class="k">Exit</span>
</span><span class='line'><span class="k">      </span><span class="nv">GetFileN</span> <span class="o">=</span> <span class="nv">GetFileN</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">End Do</span>
</span><span class='line'><span class="k">    Rewind</span><span class="p">(</span> <span class="nv">iFileUnit</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">End Function </span><span class="nv">GetFileN</span>
</span><span class='line'>
</span><span class='line'><span class="k">End Module </span><span class="nv">DFile_Mod</span>
</span></code></pre></td></tr></table></div></figure>


<p>主函数main.f90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">program </span><span class="nv">Main</span>
</span><span class='line'>
</span><span class='line'><span class="k">use </span><span class="nv">DFile_Mod</span>
</span><span class='line'><span class="k">Implicit none</span>
</span><span class='line'>
</span><span class='line'><span class="k">   </span><span class="kt">INTEGER</span> <span class="kd">::</span> <span class="nv">I</span>
</span><span class='line'>   <span class="c">!!**************************************</span>
</span><span class='line'>    <span class="c">!* DFile_Mod 变量定义  100%</span>
</span><span class='line'>    <span class="c">!!*************************************** </span>
</span><span class='line'>    <span class="c">!Character(len=512) :: cLine</span>
</span><span class='line'>    <span class="c">!integer :: nRow, nCol</span>
</span><span class='line'>    <span class="c">!character(len=20) :: name=&quot;yezhaoliang&quot;,addr=&quot;zhangzhou&quot; </span>
</span><span class='line'>    <span class="c">!**************************************</span>
</span><span class='line'>    <span class="c">!*  测试DFile_Mod   100%</span>
</span><span class='line'>    <span class="c">!*************************************** </span>
</span><span class='line'>
</span><span class='line'> <span class="c">!Open( 53 , File = &#39;./data/in.txt&#39; )</span>
</span><span class='line'>  <span class="c">!Open( 53 , File = &#39;./data/myfile.csv&#39; )</span>
</span><span class='line'>  <span class="c">!</span>
</span><span class='line'>  <span class="c">!nRow = GetFileN( 53 )</span>
</span><span class='line'>  <span class="c">!write( * , * ) &#39;文件共&#39;,nRow,&#39;行！&#39;</span>
</span><span class='line'>  <span class="c">!Do i = 1 , nRow</span>
</span><span class='line'>  <span class="c">!  read( 53 , &#39;(a512)&#39; ) cLine</span>
</span><span class='line'>  <span class="c">!  nCol = GetDataN( cLine )</span>
</span><span class='line'>  <span class="c">!  !nCol = f_numbervars( cLine )</span>
</span><span class='line'>  <span class="c">!  write( * , * ) i,&#39;行有&#39;,nCol,&#39;个数据&#39;</span>
</span><span class='line'>  <span class="c">!End Do</span>
</span><span class='line'>  <span class="k">call </span><span class="nv">binaryStreamType</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">Close</span><span class="p">(</span> <span class="mi">53</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">end program </span><span class="nv">Main</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置文件in.txt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="mi">1</span> <span class="mi">2</span> <span class="mi">3</span> <span class="p">,</span> <span class="nv">fsd</span>
</span><span class='line'><span class="mi">4</span> <span class="mi">5</span> <span class="mi">6</span> <span class="mi">7</span> <span class="p">:</span> <span class="nv">asd</span>
</span><span class='line'><span class="mi">8</span> <span class="mi">9</span> <span class="mi">10</span> <span class="mi">11</span> <span class="mi">12</span>
</span><span class='line'><span class="mi">13</span> <span class="nv">f</span> <span class="nv">sadf</span> <span class="c">! gad</span>
</span><span class='line'><span class="mi">14</span> <span class="mi">15</span>
</span></code></pre></td></tr></table></div></figure>


<p>载入visual studio基本上就能运行。</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/08/fortrandu-qu-csvwen-jian/'>http://jueqingsizhe66.github.io/blog/2017/02/08/fortrandu-qu-csvwen-jian/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl读取mysql数据库]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku/"/>
    <updated>2017-02-08T17:25:49+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku</id>
    <content type="html"><![CDATA[<p>perl中常见的文件打开关闭有open和IO模块等，而有时候涉及大量的
数据保存和打开的时候，就得借助数据库的使用，提供缓存的功能，并
使得保存的数据占用量最少，访问更快捷。下面就perl的mysql数据库访问
做一个简要的介绍。</p>

<!--more-->




<h2 id="perldbi">1. 数据库访问原理</h2>


<ol>
<li>加载对应数据库驱动</li>
<li>获得相应的连接</li>
<li>准备需要的查询数据 删除数据 更新数据</li>
<li>执行sql语句</li>
<li>获得相应的结果</li>
</ol>


<h2 id="perldbi">2. perl DBI mysql实现</h2>


<p>What is DBI?</p>

<pre><code>"The DBI is the standard database interface module for Perl. 
It defines a set of methods, variables and conventions that provide a 
consistent database interface independent of the actual database being used."
-- Tim Bunce
</code></pre>

<ol>
<li>安装perl dbi</li>
<li>安装perl dbd:mysql驱动</li>
<li>加载数据库驱动dsn</li>
<li>从dsn获取相应的链接connect方法</li>
<li>执行相应的sql语句</li>
<li>注意，处理完毕最好做一个关闭操作(<font color="red"><strong>这是一个技术问题，也是德行问题和习惯问题，编程的很多技术都是需要打开和关闭两个过程配对呈现</strong></font>)</li>
</ol>


<p>具体可以参考</p>

<ul>
<li><a href="http://dbi.perl.org/">perl dbi官网手册</a></li>
<li><a href="http://log4think.com/perl_and_dbi/">Perl与数据库DBI快速入门</a></li>
<li><a href="http://www.perl.com/pub/1999/10/DBI.html">A short guid of the dbi programming</a></li>
<li><a href="http://www.cnblogs.com/homezzm/archive/2011/07/22/2113618.html">perl DBI 总结</a></li>
<li><a href="http://blog.sina.com.cn/s/blog_54dd80920102v8f5.html">perl dbi链接mysql中文乱码</a></li>
<li><a href="http://www.jb51.net/article/65791.htm">使用Perl DBI操作MySQL的一些建议</a></li>
<li><a href="http://log4think.com/perl_fast_tutorial/">perl快速入门</a><font color="red"><strong> 给出了所有的技术语言都可以由main函数引出很多其他的, 把技术当成你的习惯</strong></font></li>
<li><a href="http://vdisk.weibo.com/s/ah8r1yUxop3dO">一本perl参考书: Programming_the_Perl_DBI </a>
该建议使用binmode解决乱码问题，</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDOUT</span><span class="p">,</span> <span class="s">&#39;:encoding(utf8)&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDIN</span><span class="p">,</span> <span class="s">&#39;:encoding(utf8)&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDERR</span><span class="p">,</span> <span class="s">&#39;:encoding(utf8)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><a href="http://blog.csdn.net/zzq900503/article/details/14454963">perl DBI使用详解</a></li>
</ul>


<p>也可以直接在命令行使用<code>perldoc dbi</code> 查看dbi文档信息</p>

<h2 id="perltest"> 3. 技术解决方案</h2>


<p>feiji.txt:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="err">汽车在高速行驶时，根据空气动力学原理，在行驶过程中会遇到空气阻力，围绕汽车重心同时产生纵向、侧向和垂直上升的三个方向的空气动力量，其中纵向为空气阻力。</span>
</span><span class='line'><span class="err">为了有效地减少并克服汽车高速行驶时空气阻力的影响，人们设计使用了汽车尾翼，其作用就是使空气对汽车产生第四种作用力，即产生较大的对地面的附着力，它能抵消一部分升力，有效控制汽车上浮，使风阻系数相应减小，使汽车能紧贴在道路地面行驶，从而提高行驶的稳定性能。</span>
</span><span class='line'>
</span><span class='line'><span class="err">工作原理</span>
</span><span class='line'><span class="err">汽车尾翼作用</span>
</span><span class='line'><span class="err">汽车尾翼的作用，就是在汽车高速行驶时，使空气阻力形成一个向下的压力，尽量抵消升力，有效控制气流下压力，使风阻系数相应减小，增加汽车的高速行驶稳定性；由于尾翼能降低汽车的空气阻力，因此高速汽车加装尾翼对于节省燃油也有一定的帮助；同时也使汽车的外形更加美观，起到一定的装饰作用。</span>
</span><span class='line'><span class="err">汽车尾翼分类</span>
</span><span class='line'><span class="err">玻璃钢尾翼：这类尾翼造型多样，有鸭舌状的、机翼状的，也有直板式的．比较好做造型，不过玻璃钢材质比较脆，韧性和刚性都较差，价格比较便宜。</span>
</span><span class='line'><span class="err">铝合金尾翼：这类尾翼导流和散热效果不错，而且价格适中，不过重量要比其他材质的尾翼稍重些。</span>
</span><span class='line'><span class="err">碳纤维尾翼：碳纤维尾翼刚性和耐久性都非常好．不仅重量轻而且也是最美观的一种尾翼．现在广泛被</span><span class="n">F1</span><span class="err">赛车采用不过价格比较昂贵。</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>source code for perl:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl </span>
</span><span class='line'><span class="c1">#===============================================================================</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#         FILE: testdbi.pl</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#        USAGE: ./testdbi.pl  </span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#  DESCRIPTION: </span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#      OPTIONS: ---</span>
</span><span class='line'><span class="c1"># REQUIREMENTS: ---</span>
</span><span class='line'><span class="c1">#         BUGS: ---</span>
</span><span class='line'><span class="c1">#        NOTES: ---</span>
</span><span class='line'><span class="c1">#    Author:  Ye Zhaoliang</span>
</span><span class='line'><span class="c1"># ORGANIZATION: </span>
</span><span class='line'><span class="c1">#      VERSION: 1.0</span>
</span><span class='line'><span class="c1">#      CREATED: 2016/12/31 1:44:24</span>
</span><span class='line'><span class="c1">#     REVISION: ---</span>
</span><span class='line'><span class="c1">#===============================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nn">CGI::</span><span class="n">Carp</span> <span class="s">&quot;fatalsToBrowser&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">DBI</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">CGI</span> <span class="sx">qw (:standard </span><span class="n">escapeHTML</span> <span class="n">escape</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$driver_name</span><span class="p">,</span> <span class="nv">$db_name</span><span class="p">,</span> <span class="nv">$db_host</span><span class="p">,</span> <span class="nv">$db_sock</span><span class="p">,</span> <span class="nv">$db_port</span><span class="p">,</span> <span class="nv">$db_user</span><span class="p">,</span> <span class="nv">$db_pswd</span><span class="p">,</span> <span class="nv">$dsn</span><span class="p">);</span>
</span><span class='line'><span class="nv">$driver_name</span> <span class="o">=</span> <span class="s">&#39;mysql&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_name</span> <span class="o">=</span> <span class="s">&#39;mysql&#39;</span><span class="p">;</span> <span class="c1"># database name</span>
</span><span class='line'><span class="nv">$db_host</span> <span class="o">=</span> <span class="s">&#39;localhost&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_sock</span> <span class="o">=</span> <span class="s">&#39;/tmp/mysql.sock&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_port</span> <span class="o">=</span> <span class="s">&#39;3306&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_user</span> <span class="o">=</span> <span class="s">&#39;root&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$db_pswd</span> <span class="o">=</span> <span class="s">&#39;root&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># data source</span>
</span><span class='line'><span class="nv">$dsn</span> <span class="o">=</span> <span class="s">&quot;dbi:mysql:database=${db_name};hostname=${db_host};mysql_socket=${db_sock};port=${db_port}&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># ... set up connection to database (not shown) ...</span>
</span><span class='line'><span class="c1"># connect mysql database</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$dbh</span> <span class="o">=</span> <span class="n">DBI</span> <span class="o">-&gt;</span> <span class="nb">connect</span> <span class="p">(</span><span class="nv">$dsn</span><span class="p">,</span> <span class="nv">$db_user</span><span class="p">,</span> <span class="nv">$db_pswd</span><span class="p">,</span>
</span><span class='line'><span class="p">{</span> <span class="n">RaiseError</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span> <span class="n">PrintError</span> <span class="o">=&gt;</span> <span class="mi">0</span> <span class="p">});</span>
</span><span class='line'><span class="c1"># put out initial part of page</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$title</span> <span class="o">=</span> <span class="s">&quot;$db_name Database Browser&quot;</span><span class="p">;</span>
</span><span class='line'><span class="c1"># html header and start_html h1</span>
</span><span class='line'><span class="k">print</span> <span class="n">header</span> <span class="p">();</span>
</span><span class='line'><span class="k">print</span> <span class="n">start_html</span> <span class="p">(</span><span class="o">-</span><span class="n">titlk</span> <span class="o">=&gt;</span> <span class="nv">$title</span><span class="p">,</span> <span class="o">-</span><span class="n">bgcolor</span> <span class="o">=&gt;</span> <span class="s">&quot;white&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span> <span class="n">h1</span> <span class="p">(</span><span class="nv">$title</span><span class="p">);</span>
</span><span class='line'><span class="c1"># parameters to look for in URL</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$tbl_name</span> <span class="o">=</span> <span class="n">param</span> <span class="p">(</span><span class="s">&quot;tbl_name&quot;</span><span class="p">);</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$sort_col</span> <span class="o">=</span> <span class="n">param</span> <span class="p">(</span><span class="s">&quot;sort_col&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1"># If $tbl_name has no value, display a clickable list of tables.</span>
</span><span class='line'><span class="c1"># Otherwise, display contents of the given table. $sort_col, if</span>
</span><span class='line'><span class="c1"># set, indicates which column to sort by.</span>
</span><span class='line'>
</span><span class='line'><span class="o">!</span><span class="nb">defined</span> <span class="p">(</span><span class="nv">$tbl_name</span><span class="p">)</span> <span class="p">?</span> <span class="n">display_table_names</span> <span class="p">(</span><span class="nv">$dbh</span><span class="p">,</span> <span class="nv">$db_name</span><span class="p">)</span> <span class="p">:</span> <span class="n">display_table_contents</span> <span class="p">(</span><span class="nv">$dbh</span><span class="p">,</span> <span class="nv">$tbl_name</span><span class="p">,</span> <span class="nv">$sort_col</span><span class="p">);</span>
</span><span class='line'><span class="k">print</span> <span class="n">end_html</span> <span class="p">();</span>
</span><span class='line'><span class="k">sub </span><span class="nf">display_table_names</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$dbh</span><span class="p">,</span> <span class="nv">$db_name</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">## html p paragraph</span>
</span><span class='line'><span class="k">print</span> <span class="n">p</span> <span class="p">(</span><span class="s">&quot;Select a table by clicking on its name:&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1"># retrieve reference to single-column array of table names</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$ary_ref</span> <span class="o">=</span> <span class="nv">$dbh</span> <span class="o">-&gt;</span> <span class="n">selectcol_arrayref</span> <span class="p">(</span><span class="sx">qq{ SHOW TABLES FROM $db_name }</span><span class="p">);</span>
</span><span class='line'><span class="c1"># Construct a bullet list using the ul() (unordered list) and</span>
</span><span class='line'><span class="c1"># li() (list item) functions. Each item is a hyperlink that</span>
</span><span class='line'><span class="c1"># re-invokes the script to display a particular table.</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@item</span><span class="p">;</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$tbl_name</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$ary_ref</span><span class="p">})</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">sprintf</span> <span class="p">(</span><span class="s">&quot;%s?tbl_name=%s&quot;</span><span class="p">,</span> <span class="n">url</span> <span class="p">(),</span> <span class="n">escape</span> <span class="p">(</span><span class="nv">$tbl_name</span><span class="p">));</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$link</span> <span class="o">=</span> <span class="n">a</span> <span class="p">({</span><span class="o">-</span><span class="n">href</span> <span class="o">=&gt;</span> <span class="nv">$url</span><span class="p">},</span> <span class="n">escapeHTML</span> <span class="p">(</span><span class="nv">$tbl_name</span><span class="p">));</span>
</span><span class='line'><span class="nb">push</span> <span class="p">(</span><span class="nv">@item</span><span class="p">,</span> <span class="n">li</span> <span class="p">(</span><span class="nv">$link</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1">## list control</span>
</span><span class='line'><span class="k">print</span> <span class="n">ul</span> <span class="p">(</span><span class="nv">@item</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">sub </span><span class="nf">display_table_contents</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">my</span> <span class="p">(</span><span class="nv">$dbh</span><span class="p">,</span> <span class="nv">$tbl_name</span><span class="p">,</span> <span class="nv">$sort_col</span><span class="p">)</span> <span class="o">=</span> <span class="nv">@_</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@rows</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">@cells</span><span class="p">;</span>
</span><span class='line'><span class="c1"># if sort column not specified, use first column</span>
</span><span class='line'><span class="nv">$sort_col</span> <span class="o">=</span> <span class="s">&quot;1&quot;</span> <span class="k">if</span> <span class="o">!</span><span class="nb">defined</span> <span class="p">(</span><span class="nv">$sort_col</span><span class="p">);</span>
</span><span class='line'><span class="c1"># present a link that returns user to table list page</span>
</span><span class='line'><span class="c1"># p control widget</span>
</span><span class='line'><span class="k">print</span> <span class="n">p</span> <span class="p">(</span><span class="n">a</span> <span class="p">({</span><span class="o">-</span><span class="n">href</span> <span class="o">=&gt;</span> <span class="n">url</span> <span class="p">()},</span> <span class="s">&quot;Show Table List&quot;</span><span class="p">));</span>
</span><span class='line'><span class="k">print</span> <span class="n">p</span> <span class="p">(</span><span class="n">strong</span> <span class="p">(</span><span class="s">&quot;Contents of $tbl_name table:&quot;</span><span class="p">));</span>
</span><span class='line'><span class="c1">## select from database</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$sth</span> <span class="o">=</span> <span class="nv">$dbh</span> <span class="o">-&gt;</span> <span class="n">prepare</span> <span class="p">(</span><span class="sx">qq{</span>
</span><span class='line'><span class="sx">SELECT * FROM $tbl_name ORDER BY $sort_col</span>
</span><span class='line'><span class="sx">LIMIT 200</span>
</span><span class='line'><span class="sx">}</span><span class="p">);</span>
</span><span class='line'><span class="nv">$sth</span> <span class="o">-&gt;</span> <span class="n">execute</span> <span class="p">();</span>
</span><span class='line'><span class="c1"># Use the names of the columns in the database table as the</span>
</span><span class='line'><span class="c1"># headings in an HTML table. Make each name a hyperlink that</span>
</span><span class='line'><span class="c1"># causes the script to be reinvoked to redisplay the table,</span>
</span><span class='line'><span class="c1"># sorted by the named column.</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$col_name</span> <span class="p">(</span><span class="nv">@</span><span class="p">{</span><span class="nv">$sth</span> <span class="o">-&gt;</span> <span class="p">{</span><span class="n">NAME</span><span class="p">}})</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$url</span> <span class="o">=</span> <span class="nb">sprintf</span> <span class="p">(</span><span class="s">&quot;%s?tbl_name=%s;sort_col=%s&quot;</span><span class="p">,</span>
</span><span class='line'><span class="n">url</span> <span class="p">(),</span>
</span><span class='line'><span class="n">escape</span> <span class="p">(</span><span class="nv">$tbl_name</span><span class="p">),</span>
</span><span class='line'><span class="n">escape</span> <span class="p">(</span><span class="nv">$col_name</span><span class="p">));</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$link</span> <span class="o">=</span> <span class="n">a</span> <span class="p">({</span><span class="o">-</span><span class="n">href</span> <span class="o">=&gt;</span> <span class="nv">$url</span><span class="p">},</span> <span class="n">escapeHTML</span> <span class="p">(</span><span class="nv">$col_name</span><span class="p">));</span>
</span><span class='line'><span class="nb">push</span> <span class="p">(</span><span class="nv">@cells</span><span class="p">,</span> <span class="n">th</span> <span class="p">(</span><span class="nv">$link</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">push</span> <span class="p">(</span><span class="nv">@rows</span><span class="p">,</span> <span class="n">Tr</span> <span class="p">(</span><span class="nv">@cells</span><span class="p">));</span>
</span><span class='line'><span class="c1"># display table rows</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span><span class="k">my</span> <span class="nv">@ary</span> <span class="o">=</span> <span class="nv">$sth</span> <span class="o">-&gt;</span> <span class="n">fetchrow_array</span> <span class="p">())</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nv">@cells</span> <span class="o">=</span> <span class="p">();</span>
</span><span class='line'><span class="k">foreach</span> <span class="k">my</span> <span class="nv">$val</span> <span class="p">(</span><span class="nv">@ary</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="c1"># display value if non-empty, else display non-breaking space</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">defined</span> <span class="p">(</span><span class="nv">$val</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$val</span> <span class="ow">ne</span> <span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nv">$val</span> <span class="o">=</span> <span class="n">escapeHTML</span> <span class="p">(</span><span class="nv">$val</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="nv">$val</span> <span class="o">=</span> <span class="s">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">push</span> <span class="p">(</span><span class="nv">@cells</span><span class="p">,</span> <span class="n">td</span> <span class="p">(</span><span class="nv">$val</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nb">push</span> <span class="p">(</span><span class="nv">@rows</span><span class="p">,</span> <span class="n">Tr</span> <span class="p">(</span><span class="nv">@cells</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="c1"># display table with a border</span>
</span><span class='line'><span class="k">print</span> <span class="n">table</span> <span class="p">({</span><span class="o">-</span><span class="n">border</span> <span class="o">=&gt;</span> <span class="s">&quot;1&quot;</span><span class="p">},</span> <span class="nv">@rows</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku/'>http://jueqingsizhe66.github.io/blog/2017/02/08/perldu-qu-mysqlshu-ju-ku/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl中文乱码问题]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti/"/>
    <updated>2017-02-08T17:23:58+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti</id>
    <content type="html"><![CDATA[<p>binmode可以很好的解决perl中问题，采用<a href="http://blog.chinaunix.net/uid-20735106-id-3438892.html">Encode1</a>,<a href="http://www.jb51.net/article/16041.htm">Encode</a>等方式不管用</p>

<!--more-->


<p>PerlFile.pl测试源码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#!/usr/bin/env perl </span>
</span><span class='line'><span class="c1">#===============================================================================</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#         FILE: perlFile.pl</span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#        USAGE: ./perlFile.pl  </span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#  DESCRIPTION: </span>
</span><span class='line'><span class="c1">#</span>
</span><span class='line'><span class="c1">#      OPTIONS: ---</span>
</span><span class='line'><span class="c1"># REQUIREMENTS: ---</span>
</span><span class='line'><span class="c1">#         BUGS: ---</span>
</span><span class='line'><span class="c1">#        NOTES: ---</span>
</span><span class='line'><span class="c1">#       AUTHOR: YOUR NAME (), </span>
</span><span class='line'><span class="c1"># ORGANIZATION: </span>
</span><span class='line'><span class="c1">#      VERSION: 1.0</span>
</span><span class='line'><span class="c1">#      CREATED: 2017/2/8 9:49:51</span>
</span><span class='line'><span class="c1">#     REVISION: ---</span>
</span><span class='line'><span class="c1">#===============================================================================</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="n">strict</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">warnings</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="n">utf8</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDIN</span><span class="p">,</span><span class="s">&quot;:encoding(gb2312)&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">binmode</span><span class="p">(</span><span class="bp">STDOUT</span><span class="p">,</span><span class="s">&quot;:encoding(gb2312)&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="p">(</span> <span class="o">&lt;&gt;</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">chomp</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span> <span class="nv">$_</span><span class="p">,</span><span class="s">&quot;\n&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">last</span> <span class="k">if</span> <span class="nv">$_</span> <span class="o">=~</span> <span class="sr">m/q/xm</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">open</span><span class="p">(</span><span class="n">FEIJI</span><span class="p">,</span><span class="s">&quot;E:\\feiji.txt&quot;</span><span class="p">)</span> <span class="ow">or</span> <span class="nb">die</span> <span class="s">&quot;can&#39;t open the file \n&quot;</span><span class="p">;</span>
</span><span class='line'><span class="k">my</span> <span class="nv">$car</span> <span class="o">=</span><span class="s">&quot;尾翼&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">•</span> <span class="nb">binmode</span><span class="p">(</span><span class="n">FEIJI</span><span class="p">,</span><span class="s">&quot;:encoding(gb2312)&quot;</span><span class="p">);</span>
</span><span class='line'><span class="c1"># binmode( STDIN,  &#39;:encoding(gbk2312)&#39; );</span>
</span><span class='line'> <span class="c1">#binmode( FEIJI,  &#39;:encoding(utf8)&#39; );</span>
</span><span class='line'> <span class="c1">#binmode( STDOUT, &#39;:encoding(gbk2312)&#39; );   </span>
</span><span class='line'> <span class="c1">#binmode( STDERR, &#39;:encoding(gbk2312)&#39; ); </span>
</span><span class='line'><span class="c1">#while( my $line = &lt;FEIJI&gt;){</span>
</span><span class='line'><span class="c1">#my $re = Encode::decode(&#39;GB2312&#39;,&#39;汽车&#39;);</span>
</span><span class='line'> <span class="k">my</span> <span class="nv">$count</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'> <span class="k">while</span><span class="p">(</span> <span class="sr">&lt;FEIJI&gt;</span><span class="p">){</span>
</span><span class='line'>     <span class="c1">#print &quot;$_ \n&quot; ;</span>
</span><span class='line'>    <span class="c1">#     print &quot;$_ \n&quot; if $_ =~ /.*$re.*/;</span>
</span><span class='line'><span class="c1">#    Encode::_utf8_on($_);</span>
</span><span class='line'>    <span class="c1">#    Encode::decode_utf8($_);</span>
</span><span class='line'>    <span class="c1">#print &quot;$_\n&quot; ;#if $_ =~ m/$car/xm;</span>
</span><span class='line'>    <span class="c1">#print &quot;$count: $_\n&quot; if $_ =~ m/$car/xm;</span>
</span><span class='line'>    <span class="c1">#$count +=1;</span>
</span><span class='line'>
</span><span class='line'>     <span class="sr">s/汽车/风力机/g</span><span class="p">;</span>
</span><span class='line'>    <span class="k">print</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti/'>http://jueqingsizhe66.github.io/blog/2017/02/08/perlzhong-wen-luan-ma-wen-ti/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一份有趣的fortran动态静态链接文]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/07/%5B%3F%5D-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen/"/>
    <updated>2017-02-07T20:03:04+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/07/[?]-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen</id>
    <content type="html"><![CDATA[<p>一张来自<a href="http://fcode.cn/">fcode</a>的有趣的静态和动态链接的比喻图，
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/usb.png" alt="staticdy" /></p>

<p>静态库是需要直接和exe文件打包在一起的，而动态库则是需要运行的时候才执行dll文件，
dll文件也是一个exe文件，只不过只能由对应的exe文件执行，无法人工执行。</p>

<ul>
<li><a href="#static">1. 静态链接</a></li>
<li><a href="#dynamic">2. 动态链接</a></li>
<li><a href="#compare">3. 两者比较</a></li>
<li><a href="#hun">4. fortran与c混编</a></li>
</ul>


<!--more-->




<h2 id="static">静态链接</h2>


<p>静态库lib,实际上是obj文件的集合，可认为是打包在一起的若干obj，</p>

<p>因此他的编译过程为：</p>

<ol>
<li><font color="red">编译子程序(f90)源代码，得到若干obj文件</font></li>
<li><font color="red">打包这些obj文件，成为<strong>lib静态库</strong></font></li>
</ol>


<p>他的使用比较简单：</p>

<p><font color="red">编译主程序(或其他子程序),链接时，<strong>带上lib</strong>文件即可</font>。</p>

<hr/>


<p><font color="red"><strong>注意</strong></font><br/>
在上面的f90源代码中可能包含了module片段。若干静态库中使用了module,那么编译还会产生mod内件。
<font color="green">每一个module对应一个同名的mod文件。</font></p>

<p>mod是什么？
mod文件可认为是module的&#8221;概述&#8221;,与c语言的&#8221;头文件&#8221;的做哟个相似，但与C语言需要自己书写头文件不同，
fortran的mod文件由编译器<font color="red"><strong>自动生成</strong></font>。</p>

<p>也就是说，当<code>use Module</code>时，编译器需<strong>能够</strong>找到对应的mod文件。因此有必要把静态库里产生的mod文件
保存起来，以便使用静态库时加载(<font color="red"><strong>mod文件一定得在lib目录下,这点很容易被遗忘。</strong></font>。</p>

<hr/>


<p><font color="green">提前准备公用的源代码:</font></p>

<p>sub.90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Subroutine </span><span class="nv">sub</span><span class="p">()</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;Xueqiu is a good man!&#39;</span>
</span><span class='line'><span class="k">End Subroutine </span><span class="nv">sub</span>
</span></code></pre></td></tr></table></div></figure>


<p>func.f90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">MODULE </span><span class="nv">FUNCMOD</span>
</span><span class='line'>  <span class="k">IMPLICIT NONE</span>
</span><span class='line'>
</span><span class='line'><span class="k">CONTAINS</span>
</span><span class='line'>
</span><span class='line'><span class="k">  </span><span class="kt">INTEGER </span><span class="k">FUNCTION </span><span class="nv">FUNC</span><span class="p">()</span>
</span><span class='line'>    <span class="k">WRITE</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;THIS IS A FUNC!&#39;</span>
</span><span class='line'>    <span class="nv">FUNC</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">END FUNCTION </span><span class="nv">FUNC</span>
</span><span class='line'><span class="k">END MODULE </span><span class="nv">FUNCMOD</span>
</span></code></pre></td></tr></table></div></figure>


<p>main.f90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Program </span><span class="nv">testLib</span>
</span><span class='line'>  <span class="k">use </span><span class="nv">funcmod</span>
</span><span class='line'>  <span class="k">Implicit None</span>
</span><span class='line'><span class="k">  </span><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">i</span>
</span><span class='line'>  <span class="nv">i</span> <span class="o">=</span> <span class="nv">func</span><span class="p">()</span>
</span><span class='line'>  <span class="k">call </span><span class="nv">sub</span><span class="p">()</span>
</span><span class='line'><span class="k">End Program </span><span class="nv">testLib</span>
</span></code></pre></td></tr></table></div></figure>


<hr/>


<hr/>


<hr/>


<h3> gfortran技术解决方案</h3>


<ul>
<li>第一步: 编译生成obj[和mod] 文件,</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">gfortran</span> <span class="o">-</span><span class="nv">c</span> <span class="nv">sub</span><span class="err">.</span><span class="nv">f90</span> <span class="nv">func</span><span class="mf">.90</span>
</span></code></pre></td></tr></table></div></figure>


<p>生成文件列表如下:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">funcmod</span><span class="err">.</span><span class="nb">mod</span>
</span><span class='line'><span class="nv">func</span><span class="err">.</span><span class="nv">o</span>
</span><span class='line'><span class="nv">sub</span><span class="err">.</span><span class="nv">o</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二步: 然后再打包obj文件到lib文件</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">ar</span> <span class="nv">rv</span> <span class="nv">my</span><span class="err">.</span><span class="nv">lib</span> <span class="nv">func</span><span class="err">.</span><span class="nv">o</span> <span class="nv">sub</span><span class="err">.</span><span class="nv">o</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后你现在就可以删掉func.o sub.o了(<code>rm -rf func.o sub.o</code>),
因为他们包含在my.lib中.</p>

<ul>
<li>第三步: 编译主文件，</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">gfortran</span> <span class="o">-</span><span class="nv">c</span> <span class="nv">main</span><span class="err">.</span><span class="nv">f90</span>
</span><span class='line'><span class="nv">gfortran</span> <span class="nv">main</span><span class="err">.</span><span class="nv">o</span> <span class="nv">my</span><span class="err">.</span><span class="nv">lib</span> <span class="o">-</span><span class="nv">o</span> <span class="nv">main</span><span class="err">.</span><span class="nv">exe</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样就会生成对应的main.exe了。</p>

<hr/>


<hr/>


<hr/>




<h3> vs2015+ivf2017的技术解决方案:</h3>


<ul>
<li>第一步:</li>
</ul>


<p>新建一个static library项目,并添加sub.f90,func.f90到source文件夹下。</p>

<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/1.png" alt="static" /></p>

<ul>
<li>第二步: 生成解决方案</li>
</ul>


<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/2.png" alt="static2" />
这样就在debug目录下得到*.lib文件</p>

<p>注意：链接需要二个文件*.obj
和*.mod文件，而myfirstLib.lib仅仅是把*.obj打包了一下，所以
还得再ivf的<font color="red"><strong>Additional Include</strong></font>中添加mod文件路径</p>

<ul>
<li>第三步:</li>
</ul>


<p>新建一个testLib  console(/subsystem:console )的项目 用于测试myfirstlib</p>

<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/3.png" alt="test" />
注意由于在一个解决方案中存在多个项目所以得把test(包含主程序)设置为<font color="red">启动项目</font>。
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/4.png" alt="启动" /></p>

<ul>
<li>第四步:</li>
</ul>


<p>编译，生成解决方案。<font color="red"><strong>报错了</strong></font><br>。
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/5.png" alt="error" />
原因是没有找到*.o(func.o)包含的mod文件，解决方法是<font color="red">添加mod路径到additional include directories </font>
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/static/6.png" alt="correct" /></p>

<p>还有一个问题，我一般还需要<font color="red">生成的lib文件放在source目录下</font>，才可以编译成功，这点也需要小心。</p>

<p><font color="red"><strong>总结</strong></font>
设置lib路径的时候，在存在mod文件时候，一定得一同存在，否则未可能报符号丢失的错误。</p>

<hr/>


<hr/>


<hr/>




<h2 id="dynamic"> 动态链接</h2>


<p>动态库DLL,实际上也是可执行文件，与exe本质上是一样的。只不过dll通常
没有主程序而已（自己不能运行，只能由对应的主程序运行),他必须由exe在运行以后调用。</p>

<p>DLL的好处?
具有良好的可维护性，节约内存等特点。在windows(dll)，linux(so),mac等操作系统上，都
大量使用了DLL动态库。</p>

<p>动态链接库dll的编译过程是:</p>

<ol>
<li>编译子程序源代码，得到若干obj文件。</li>
<li>链接这些obj文件，得到dll文件（有可能带lib文件，如果是静态加载则无lib，如果是动态加载则有lib）</li>
<li>部分平台的编译器会得到导入库lib</li>
</ol>


<p>他的使用由两种方法(显示调用(动态),隐式调用(静态)):</p>

<ol>
<li>编译主程序(或其他子程序),链接时，带上导入库lib文件。</li>
<li>动态的利用系统函数加载DLL,如windows下的LoadLibrary和GetProcAddress。</li>
</ol>


<hr/>


<hr/>


<p>提前准备好公用的fortran源代码：</p>

<p><font color="red">sub.f90:</font></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Subroutine </span><span class="nv">sub</span><span class="p">()</span>
</span><span class='line'>  <span class="c">!DEC$ ATTRIBUTES DLLEXPORT,ALIAS:&quot;sub&quot;::sub</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;Xueqiu is a good man!&#39;</span>
</span><span class='line'><span class="k">End Subroutine </span><span class="nv">sub</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&ldquo;sub&rdquo;::sub，是有用的exe间的符号对接。</strong></p>

<p><font color="red">func.f90:</font></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Module </span><span class="nv">funcmod</span>
</span><span class='line'>  <span class="k">Implicit none</span>
</span><span class='line'>
</span><span class='line'><span class="k">contains</span>
</span><span class='line'>
</span><span class='line'><span class="k">  </span><span class="kt">Integer </span><span class="k">Function </span><span class="nv">func</span><span class="p">()</span>
</span><span class='line'>    <span class="c">!DEC$ ATTRIBUTES DLLEXPORT,ALIAS:&quot;func&quot;::func</span>
</span><span class='line'>    <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;This is a func!&#39;</span>
</span><span class='line'>    <span class="nv">func</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">End Function </span><span class="nv">func</span>
</span><span class='line'><span class="k">End Module </span><span class="nv">funcmod</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>注意，!DEC$ ATTRIBUTES DLLEXPORT, ALIAS:&ldquo;func&rdquo;::func，是有用的exe间的符号对接。</strong></p>

<p><font color="red">main.f90:</font>></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Program </span><span class="nv">testDll</span>
</span><span class='line'>  <span class="k">use </span><span class="nv">funcmod</span>
</span><span class='line'>  <span class="k">Implicit None</span>
</span><span class='line'><span class="k">  </span><span class="kt">integer</span> <span class="kd">::</span> <span class="nv">i</span>
</span><span class='line'>  <span class="nv">i</span> <span class="o">=</span> <span class="nv">func</span><span class="p">()</span>
</span><span class='line'>  <span class="k">call </span><span class="nv">sub</span><span class="p">()</span>
</span><span class='line'><span class="k">End Program </span><span class="nv">testDll</span>
</span></code></pre></td></tr></table></div></figure>




<h3> gfortran的技术解决方案:</h3>


<ul>
<li>第一步: 生成so文件(linux下面)</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">gfotran</span> <span class="nv">sub</span><span class="err">.</span><span class="nv">f90</span> <span class="nv">func</span><span class="err">.</span><span class="nv">f90</span> <span class="o">-</span><span class="nv">shared</span> <span class="o">-</span><span class="nv">fPIC</span> <span class="o">-</span><span class="nv">o</span> <span class="nv">libmy</span><span class="err">.</span><span class="nv">so</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第二步: 直接引用即可</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">gfortran</span> <span class="nv">main</span><span class="err">.</span><span class="nv">f90</span> <span class="nv">libmy</span><span class="err">.</span><span class="nv">so</span> <span class="o">-</span><span class="nv">o</span> <span class="nv">main</span><span class="err">.</span><span class="nv">exe</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>第三步:直接运行main.exe
有可能报错，在linux下可能需要 <code>export LD_LIBRARY_PATH=./</code>
也就是把当前目录也当作查找so文件的一个地方。</li>
</ul>


<h3> vs2015+ivf2017的技术解决方案:</h3>


<ul>
<li>第一步：新建一个Dll project
然后类似静态的方法，把func.f90,sub.f90当作一个项目，再新建一个testDll项目，并添加lib等，也要include进来目录
比如，
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dll/main.png" alt="main" />再次基础上，在添加include路径（把mod文件添加进来）
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dll/include.png" alt="include" /></li>
</ul>


<p>在运行的时候有可能出现运行错误<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dll/error.png" alt="error" />,这时候需要在Working Directory添加
运行dll路径，
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dll/dll.png" alt="dll" />,</p>

<h2 id="compare"> 动态链接的静态加载和动态加载</h2>


<p><font color="blue">总之，静态库lib和动态库dll，是很多第三方库的主要形式。因此他们是学习第三方
函数库的基础知识，也是学习多种语言混编的基础。</font></p>

<ul>
<li><p>静态加载和动态加载的区别:</p></li>
<li><p>静态加载:不依赖ifort的运行库（可以到没有安装ifort的机器 上运行dll文件）  dll文件比较大</p></li>
<li>dll加载 :则会依赖ifort的运行库（dll比较小，但是如果没有ifort运行库 则会报dll错误（所以一般拷贝到别的机子的dll都是静态加载的
可采用depends walker这个软件，查看内部的dll信息。</li>
</ul>


<p>而我们可以用一张十分perfect的比较图，看出动态链接库的两种加载方式的不同，以及动态和静态的区别(10元)
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dynamicstatic.png" alt="dynamicstatic" /></p>

<p>注意动态函数(subroutine)比静态多了一行<code>!DEC$ ATTRIBUTE DLLEXPORT,ALIAS:...</code></p>

<ul>
<li>动态加载例子
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/dll/load.png" alt="动态加载" /></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">Module </span><span class="nv">LoadDLL</span>
</span><span class='line'>  <span class="k">Implicit None</span>
</span><span class='line'><span class="k">  Interface</span>
</span><span class='line'><span class="k">    FUNCTION </span><span class="nv">GetProcAddress</span><span class="p">(</span> <span class="nv">hModule</span><span class="p">,</span> <span class="nv">lpProcName</span><span class="p">)</span>
</span><span class='line'>      <span class="c">!DEC$ ATTRIBUTES DEFAULT, STDCALL, DECORATE, ALIAS:&#39;GetProcAddress&#39; :: GetProcAddress</span>
</span><span class='line'>      <span class="k">use </span><span class="nb">ISO_C_Binding</span>
</span><span class='line'><span class="nb">      </span><span class="k">type</span><span class="p">(</span> <span class="kt">C_FUNPTR</span> <span class="p">)</span> <span class="kd">::</span> <span class="nv">GetProcAddress</span>
</span><span class='line'>      <span class="kt">integer </span><span class="nv">hModule</span>
</span><span class='line'>      <span class="kt">character</span><span class="p">(</span><span class="kt">C_CHAR</span><span class="p">)</span> <span class="p">,</span> <span class="k">dimension</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">lpProcName</span>
</span><span class='line'>    <span class="k">END FUNCTION </span><span class="nv">GetProcAddress</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">Integer </span><span class="k">Function </span><span class="nv">F_func</span><span class="p">()</span>
</span><span class='line'>    <span class="k">End Function </span><span class="nv">F_func</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">Subroutine </span><span class="nv">F_Sub</span><span class="p">()</span>
</span><span class='line'>    <span class="k">End Subroutine </span><span class="nv">F_Sub</span>
</span><span class='line'>  <span class="k">End Interface</span>
</span><span class='line'><span class="k">  </span>
</span><span class='line'><span class="k">End Module </span><span class="nv">LoadDLL</span>
</span><span class='line'>
</span><span class='line'><span class="k">Program </span><span class="nv">www_fcode_cn</span>
</span><span class='line'>  <span class="k">use </span><span class="nv">LoadDLL</span>
</span><span class='line'>  <span class="k">use </span><span class="nb">ISO_C_Binding</span>
</span><span class='line'><span class="nb">  </span><span class="k">use </span><span class="nv">Kernel32</span> <span class="p">,</span> <span class="nv">only</span> <span class="p">:</span> <span class="nv">LoadLibrary</span>
</span><span class='line'>  <span class="k">Implicit None</span>
</span><span class='line'><span class="k">  </span><span class="nv">Procedure</span><span class="p">(</span><span class="nv">F_func</span><span class="p">)</span> <span class="p">,</span> <span class="k">pointer</span> <span class="kd">::</span> <span class="nv">func</span>
</span><span class='line'>  <span class="nv">Procedure</span><span class="p">(</span><span class="nv">F_sub</span> <span class="p">)</span> <span class="p">,</span> <span class="k">pointer</span> <span class="kd">::</span> <span class="nv">sub</span>
</span><span class='line'>  <span class="k">type</span><span class="p">(</span> <span class="kt">C_FUNPTR</span> <span class="p">)</span> <span class="kd">::</span> <span class="nv">c_pointer</span>
</span><span class='line'>  <span class="kt">integer</span> <span class="kd">::</span> <span class="nv">hDLL</span> <span class="p">,</span> <span class="nv">i</span>
</span><span class='line'>  <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">32</span><span class="p">)</span> <span class="kd">::</span> <span class="nv">dllname</span> <span class="p">,</span> <span class="nv">funcname</span>
</span><span class='line'>  <span class="k">Do</span>
</span><span class='line'><span class="k">    write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;您要调用哪个DLL？&#39;</span>
</span><span class='line'>    <span class="k">read</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="nv">dllname</span>
</span><span class='line'>    <span class="nv">hDLL</span> <span class="o">=</span> <span class="nv">LoadLibrary</span><span class="p">(</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">dllname</span><span class="p">)</span><span class="o">//</span><span class="nb">c_null_char</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nv">hDLL</span> <span class="o">&lt;=</span> <span class="mi">0</span> <span class="p">)</span> <span class="k">then</span>
</span><span class='line'><span class="k">      write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;对不起，我好像无法找到 &#39;</span><span class="o">//</span><span class="nb">trim</span><span class="p">(</span><span class="nv">dllname</span><span class="p">)</span><span class="o">//</span><span class="s1">&#39; 哦~~！^_^&#39;</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">      exit</span>
</span><span class='line'><span class="k">    end if</span>
</span><span class='line'><span class="k">  End Do</span>
</span><span class='line'><span class="k">  Do</span>
</span><span class='line'><span class="k">    write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;您要调用哪个函数？&#39;</span>
</span><span class='line'>    <span class="k">read</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="nv">funcname</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nv">funcname</span><span class="o">==</span><span class="s2">&quot;quit&quot;</span> <span class="p">)</span> <span class="k">exit</span>
</span><span class='line'><span class="k">    </span><span class="nv">c_pointer</span> <span class="o">=</span> <span class="nv">GetProcAddress</span><span class="p">(</span> <span class="nv">hDLL</span> <span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">funcname</span><span class="p">)</span><span class="o">//</span><span class="nb">c_null_char</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="ow">.not.</span><span class="nb">C_ASSOCIATED</span><span class="p">(</span><span class="nv">c_pointer</span><span class="p">)</span> <span class="p">)</span> <span class="k">then</span>
</span><span class='line'><span class="k">      write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">dllname</span><span class="p">)</span><span class="o">//</span><span class="s1">&#39; 里面好像没有 &#39;</span><span class="o">//</span><span class="nb">trim</span><span class="p">(</span><span class="nv">funcname</span><span class="p">)</span><span class="o">//</span><span class="s1">&#39; 函数哦~~！^_^&#39;</span>
</span><span class='line'>      <span class="k">cycle</span>
</span><span class='line'><span class="k">    end if</span>
</span><span class='line'><span class="k">    If</span> <span class="p">(</span> <span class="nv">funcname</span><span class="o">==</span><span class="s2">&quot;func&quot;</span> <span class="p">)</span> <span class="k">then</span>
</span><span class='line'><span class="k">      call </span><span class="nv">C_F_ProcPointer</span><span class="p">(</span> <span class="nv">c_pointer</span> <span class="p">,</span> <span class="nv">func</span> <span class="p">)</span>
</span><span class='line'>      <span class="nv">i</span> <span class="o">=</span> <span class="nv">func</span><span class="p">()</span>
</span><span class='line'>    <span class="k">Else if</span> <span class="p">(</span> <span class="nv">funcname</span><span class="o">==</span><span class="s2">&quot;sub&quot;</span> <span class="p">)</span> <span class="k">then</span>
</span><span class='line'><span class="k">      call </span><span class="nv">C_F_ProcPointer</span><span class="p">(</span> <span class="nv">c_pointer</span> <span class="p">,</span> <span class="nv">sub</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">call </span><span class="nv">sub</span><span class="p">()</span>
</span><span class='line'>    <span class="k">End If</span>
</span><span class='line'><span class="k">  End Do  </span>
</span><span class='line'><span class="k">End Program </span><span class="nv">www_fcode_cn</span>
</span></code></pre></td></tr></table></div></figure>




<h2 id="hun"> fortran与c混编</h2>


<p>源于此:<a href="http://bbs.fcode.cn/thread-1117-1-1.html">http://bbs.fcode.cn/thread-1117-1-1.html</a></p>

<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/hunbian/main.png" alt="混编主界面" />
混编时候注意两点:</p>

<ol>
<li>c 和 fortran 混编不需要 include</li>
<li>c/c++ 里面没有 module</li>
</ol>


<p>另外注意vc项目也得添加引用目录
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/hunbian/vcinclude.png" alt="引用目录" /></p>

<p>你也可能运行错误
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/hunbian/error.png" alt="errorV" />
注意上面红色的部分。
第一处：如果你强调必须 stdcall 协定，那么你需要在 fortran 中声明。（这个声明不是规范的，是IVF扩展的写法）
第二处：你的 C++ 里的 lens 是通过 strlen 计算出来的，而不是指针。所以 fortran 中必须加 value 修饰符，表示它是传值，而不是传址。（这是导致cpp_main.exe 中的 0x5d7005a9 (vlhm.dll) 处最可能的异常: 0xC0000005: 读取位置 0x00000021 时发生访问冲突）的原因。</p>

<p>最终正确结果如下:
<img src="http://jueqingsizhe66.github.io/images/fortrandebug/hunbian/final.png" alt="correctV" /></p>

<p>源码信息如下:</p>

<p>TestFortranCpp.cpp</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="c1">// TestFortranCpp.cpp : 定义控制台应用程序的入口点。</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &quot;stdafx.h&quot;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">extern</span> <span class="s">&quot;C&quot;</span> <span class="p">{</span><span class="kt">void</span> <span class="n">_stdcall</span>   <span class="n">vlhm</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">,</span> <span class="kt">int</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'><span class="c1">//extern &quot;C&quot; {void vlhm(char *,int); }</span>
</span><span class='line'><span class="kt">int</span> <span class="n">_tmain</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="n">_TCHAR</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">inputfile</span> <span class="o">=</span> <span class="s">&quot;E:</span><span class="se">\\</span><span class="s">phase6-power.opj&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="c1">//char *inputfile;</span>
</span><span class='line'>  <span class="c1">//char str[] = &quot;C:\\Users\\www\\Desktop\\\\31005700.tem&quot;;</span>
</span><span class='line'>  <span class="c1">//inputfile=&amp;str[0];</span>
</span><span class='line'>  <span class="n">vlhm</span><span class="p">(</span><span class="n">inputfile</span><span class="p">,</span> <span class="n">strlen</span><span class="p">(</span><span class="n">inputfile</span><span class="p">));</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>fileNameCheck.f90:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">subroutine </span><span class="nv">vlhm</span><span class="p">(</span><span class="nv">pfilename</span><span class="p">,</span> <span class="nv">lens</span><span class="p">)</span> <span class="k">Bind</span><span class="p">(</span><span class="nv">C</span><span class="p">,</span><span class="nv">Name</span><span class="o">=</span><span class="s2">&quot;vlhm&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c">!DEC$ ATTRIBUTES STDCALL,DLLEXPORT::vlhm</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">use</span><span class="p">,</span>  <span class="k">Intrinsic</span> <span class="kd">::</span> <span class="nb">ISO_C_Binding</span>
</span><span class='line'><span class="c">!character(len=*)::filename            !c++主程序中传递进来的“Inputfile”变量</span>
</span><span class='line'><span class="c">!write(*,*)&quot;dll里的filename值是：&quot;</span>
</span><span class='line'><span class="c">!write(*,*)filename</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">type</span><span class="p">(</span><span class="kt">C_PTR</span><span class="p">)</span> <span class="p">,</span> <span class="k">value</span> <span class="kd">::</span> <span class="nv">pfilename</span> <span class="c">!c++主程序中传递进来的“Inputfile”变量，是C语言的指针</span>
</span><span class='line'>  <span class="kt">integer</span><span class="p">,</span> <span class="k">value</span><span class="kd">::</span><span class="nv">lens</span>                                      <span class="c">!传入的字符串长度</span>
</span><span class='line'>  <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="nv">lens</span><span class="p">),</span> <span class="k">target</span> <span class="kd">::</span> <span class="nv">filename_a</span>
</span><span class='line'>  <span class="c">!character(len=lens) :: filename_a !pointer &amp; target</span>
</span><span class='line'>  <span class="kt">character</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="nv">lens</span><span class="p">),</span><span class="k">pointer</span><span class="kd">::</span><span class="nv">filename</span>                     <span class="c">!这是Fortran的字符串</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">call </span><span class="nb">c_f_pointer</span><span class="p">(</span> <span class="nv">pfilename</span> <span class="p">,</span> <span class="nv">filename</span> <span class="p">)</span>                   <span class="c">!把c语言的指针转换成fortran字符串</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">filename_a</span> <span class="o">=</span> <span class="nv">filename</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span><span class="nv">filename</span>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span><span class="nv">filename_a</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="o">*</span><span class="p">)</span> <span class="s1">&#39;fine ok&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end subroutine </span><span class="nv">vlhm</span>
</span></code></pre></td></tr></table></div></figure>


<p>进一步的细节资料可参考<a href="http://v.fcode.cn/video-library_dll.html">fcode视频官网</a>。</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/07/%5B%3F%5D-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen/'>http://jueqingsizhe66.github.io/blog/2017/02/07/%5B%3F%5D-fen-you-qu-de-fortrandong-tai-jing-tai-lian-jie-wen/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FAST调试]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi/"/>
    <updated>2017-02-07T20:01:15+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi</id>
    <content type="html"><![CDATA[<p><a href="https://nwtc.nrel.gov/FAST8">NREL FAST</a>的调试一直存在问题，关键是不知道怎么设置选项，查阅了Visual Studio和一些基本知识整理了
NREL项目的调试方法。</p>

<!--more-->


<h2>fortran工作路径问题</h2>

<p><font color="green"><strong>工作路径对于任何的可执行文件都很重要。</strong></font></p>

<pre><code>当然事先可能得了解一下软件编译链接的过程（即编写源代码--调用编译器编译源代码--
&gt;调用链接器连接相关代码块生成可执行文件--&gt;运行可执行文件）(IDE隐藏了上述过程)
</code></pre>

<ul>
<li>如果不带任何路径，则被认为是当前路径(<font color="green"><strong>working directory</strong></font>)。</li>
<li>如果带相对路径，则以当前路径为基准。</li>
<li>通过命令行执行，当前路径一般在提示符上(或<font color="red">pwd</font>命令查看)</li>
<li>直接<font color="red"><strong>双击</strong></font>,当前路径在exe所在的文件夹。</li>
<li>通过<font color="red"><strong>IDE</strong></font>方式运行，当前路径一般在<font color="red"><strong>工程所在文件夹</strong></font></li>
<li>一些IDE还允许设置当前路径(只对IDE方式运行有效)。</li>
<li>右键exe名字也是可以指定运行路径的（这样就可以加载对应的配置文件)</li>
</ul>


<p>比如:<br/></p>

<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/idewd.png" alt="IDE working directory" /><br/></p>

<h2>代码层级改变文件路径</h2>

<p>在程序中可以通过一些手段，动态的更改当前路径。</p>

<ul>
<li>IVF: changeDirQQ</li>
<li>gfortran: ChDir</li>
</ul>


<p>也可以通过一些手段，获得当前路径，</p>

<ul>
<li>IVF/gforran: GetCWD</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="k">program </span><span class="nv">testDir</span>
</span><span class='line'>    <span class="k">Implicit none</span>
</span><span class='line'><span class="k">    </span><span class="kt">CHARACTER</span><span class="p">(</span><span class="nb">len</span><span class="o">=</span><span class="mi">512</span><span class="p">)</span> <span class="kd">::</span>  <span class="nv">working_path</span>
</span><span class='line'>    <span class="k">call </span><span class="nb">GET_COMMAND_ARGUMENT</span><span class="p">(</span><span class="mi">0</span> <span class="p">,</span> <span class="nv">working_path</span><span class="p">);</span>
</span><span class='line'>    <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="s1">&#39;(a,/,a)&#39;</span><span class="p">)</span> <span class="s1">&#39;exe path: &#39;</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">working_path</span><span class="p">);</span>
</span><span class='line'>    <span class="k">call </span><span class="nb">GETCWD</span><span class="p">(</span><span class="nv">working_path</span><span class="p">)</span>
</span><span class='line'>    <span class="k">write</span><span class="p">(</span><span class="o">*</span><span class="p">,</span><span class="s1">&#39;(a,/,a)&#39;</span><span class="p">)</span> <span class="s1">&#39;Working Directory: &#39;</span><span class="p">,</span> <span class="nb">trim</span><span class="p">(</span><span class="nv">working_path</span><span class="p">);</span>
</span><span class='line'><span class="k">end program </span><span class="nv">testDir</span>
</span></code></pre></td></tr></table></div></figure>


<p>输出:&lt;br></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='fortran'><span class='line'><span class="nv">exe</span> <span class="nv">path</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="nv">D</span><span class="p">:</span><span class="err">\</span><span class="nv">testCWD</span><span class="err">\</span><span class="nv">Debug</span><span class="err">\</span><span class="nv">test_cwd</span><span class="err">.</span><span class="nv">exe</span>
</span><span class='line'>
</span><span class='line'><span class="nv">working</span> <span class="nv">directory</span><span class="p">:</span>
</span><span class='line'><span class="nv">D</span><span class="p">:</span><span class="err">\</span><span class="nv">testCWD</span>
</span></code></pre></td></tr></table></div></figure>


<h2>调试FAST</h2>

<p><img src="http://jueqingsizhe66.github.io/images/fortrandebug/fast.jpg" alt="fast" />
最关键的是一个对应两个设置</p>

<ul>
<li>一个对应指的是第二步的Linker的output File的exe名字和第三步的General底下的TargetName对应上</li>
<li>两个设置是指在Debuging对Command Arguments和Working Directory的设置。Command Argument指定文件名字
Working Directory指定文件路径。</li>
</ul>


<p>设置完就可以开始调试了。</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi/'>http://jueqingsizhe66.github.io/blog/2017/02/07/fastdiao-shi/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文戏之分]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/02/01/wen-xi-zhi-fen/"/>
    <updated>2017-02-01T17:20:20+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/02/01/wen-xi-zhi-fen</id>
    <content type="html"><![CDATA[<p>偶尔，在《人间正道是沧桑》这部电视剧听到，</p>

<pre><code>文中有戏，戏中有文
识文者读文，识戏者读戏（杨立仁)
音中有调，调中有音
识音者听音，识调者听调(瞿霞)
</code></pre>

<p>背景是解放战争时期，杨和瞿的一次9年之后的相见。不知情者可能听得是美妙的
文字，优雅的声音，而背后却蕴含着另一场戏，老蒋总是那么爱玩。所有编程语言
我觉得也是如是。表面上看着是字母的排列组合，而背后却可能蕴含者优雅的艺术，
和那么一出出精彩绝伦的好戏。</p>

<!--more-->


<p>我觉得它影响了我，所以我记录了它。</p>

<p>在这部电视剧中，刻画的杨立青角色还给我另外一个特别深刻的印象</p>

<pre><code>所有的科学，都不能差一点，差一点和差很多都不好，99度的开水没有开花，只有到100度才有
科学要得是精确，而不是马虎

另外就是，他在绘图的过程说的，我绘制地图的目的是为了说服我自己，而不是让你们看，
我得先说服自己，仗才能好打。所以无论做什么都得先把背后的东西、背后的原理说服你自己
形成自己的理念，这样才能知己知彼。
</code></pre>

<p>文戏和音调，让我意识到了面和里的关系。</p>

<p>而在昨天与我姨丈的交流中，又对家庭和人生有了新的认识。
我拉着我的女朋友和我的朋友一起到小姨家做客，刚到家的时候，姨丈喝了不少（小憩中）。
我们几个人聊着，后来他慢慢醒过来，跟我们聊天，聊家常等。
我姨丈如是说：</p>

<pre><code>我们都是平常人，再伟大的人也是平凡人，再聪明的人也是平常人，也需要常回家看看，
也需要时不时的和家里人打个电话。家里人都会因为你偶尔的电话，感到温暖。年长的人
有谁不想者儿孙满堂，儿孙抱膝的，都希望，但不现实。长大了，都应该去闯闯，闯多大名堂，
不要紧，要紧的是有上进心。别人现在比你优秀，你可以慢慢来，只要自己有一颗平常心，心态
放好了，要想者对大家好，对同事好，对同学好，对家里好，对长辈好，对领导好，想着他们
好，而不是过多的抱怨，过多的叹气，一定不能这样。
平时多做点好事，多对他们好。
上至父母、下至儿孙、家庭和乐，和则万事兴，多么朴素的道理。
可以时而懒惰，但是绝不能没有上进心，有点进步是最好的，你们两个人一起进步，一起体恤
对方，彼此宽容，彼此经营自己的夫妻生活和两个家庭。
所以，平常心和好这个字都得做好。
</code></pre>

<p>听了这习话也让我看到现实社会中的另一种心态，而且是不错的心态和理念，而不是说比钱多，比房多等，
是一种希望子女好，希望朋友好的平常心心态。退一步则海阔天空。</p>

<p>参差多态才是幸福的本源，学会用包容心去感受你附近的心灵，照顾她们。</p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/02/01/wen-xi-zhi-fen/'>http://jueqingsizhe66.github.io/blog/2017/02/01/wen-xi-zhi-fen/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Perl_Summary]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary/"/>
    <updated>2017-01-22T19:18:50+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary</id>
    <content type="html"><![CDATA[<p>why need perl? If you need strong text regex processing ,use perl!</p>

<p>One paragraph I copied from <code>perldoc perlintro</code>:</p>

<p>The language is intended to be <font color="red">practical</font> (easy to use, efficient,
complete) rather than beautiful (tiny, elegant, minimal). Its major
features are that it&rsquo;s easy to use, supports both procedural and
object-oriented (OO) programming, has powerful built-in support for text
processing, and has one of the world&rsquo;s most impressive collections of
third-party modules.</p>

<p>To me, perl means a report programmer with practical experience.</p>

<!--more-->


<ul>
<li><a href="http://www.cnblogs.com/leezx/p/5607753.html">perl基础</a></li>
<li><a href="http://www.cnblogs.com/leezx/p/5755237.html">perl语法速查</a></li>
<li><a href="http://www.cnblogs.com/leezx/p/5617239.html">perl高级特性</a></li>
<li><a href="http://www.cnblogs.com/leezx/p/5589602.html">some difference between &ndash;> and =></a></li>
<li><a href="http://storagebar.blog.51cto.com/211112/70680">How to Program Perl</a>
You need to practice ,think, and share(your final target).</li>
<li><a href="http://storagebar.blog.51cto.com/211112/70718">Teach yourself Programming in ten years</a>
You need to talk to other programmer, they are all good people(Just think they are).</li>
</ul>


<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary/'>http://jueqingsizhe66.github.io/blog/2017/01/22/perl-summary/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How_to_learn_one_technique]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2017/01/22/how-to-learn-one-technique/"/>
    <updated>2017-01-22T19:16:42+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2017/01/22/how-to-learn-one-technique</id>
    <content type="html"><![CDATA[<p>You need talk to others about &ldquo;it&rdquo; with clear,fluent and easy way ,
to let them understand very well. So in the computer learning,you
should know how to talk with the books? how to learn from books(without consicious) which
come from other authors(with consicious), then get what you want to
overcome the problem or question you bump into.</p>

<p>So it is very necessary for you to learn some technique to analysis
the different knowledge point, in order to different them and remember
them, finally apply them to watch the phenomenon ,explain some phenomenon, and solve some tough science problem.</p>

<!--more-->


<h2>Logical sequence(from Hao Bin)</h2>

<ul>
<li><p>why need X?(solve the relation between first and two or between former and previous or between question and solution)
Time series:</p>

<p>+&mdash;&mdash;+many works between X+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;+Now at X+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;+maybe later Y+&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</p></li>
<li><p>what is X?(orient from ontology, what+how+howmany+where consist the basic ontology)
  It is very important to understand how to describe the question about what is X?
  Technique:</p>

<pre><code>  + Make sure the pattern: subject verb and object( the subject is it!!)(it is ....,,solve ....,do help us....First,second....)
  + You should describe its function(the question which it can solve. In the relatity,all things is problem driven), what's the advantage?
  + Finally, detail analysis: First, .... Second:....(it can consist many parts.)
</code></pre></li>
<li><p>how to use X?(as simple and clear as you can)</p></li>
<li>where you should take care when you use X? What&rsquo;s the point?</li>
<li>what&rsquo;s the factory scenery of the X? where you can put X into usage?</li>
<li>Advantage and disadvantage of X? Because of disadvantage,so you need Y.</li>
</ul>


<p>Technique:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>1. how to express your statement with layer?
</span><span class='line'>www 
</span><span class='line'>w: why (target: you should describe your background clearly) -------question which connect it and you or us!!
</span><span class='line'>w: what(what it is . Get clear of the concept) -------what **it** is---&gt; it(commonly without conscious)
</span><span class='line'>    --what can it do?
</span><span class='line'>w: how(how to use your X)  ----------**you** want to know how to use it? ---&gt; you(with conscious)
</span><span class='line'>    --what you are going to do?
</span><span class='line'>
</span><span class='line'>You may be ignored!!!</span></code></pre></td></tr></table></div></figure>


<p>Reference:</p>

<ul>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/07/21/about-thinking-process-and-knowledge-composition/">1. about-thinking-process-and-knowledge-composition</a></li>
<li><a href="http://jueqingsizhe66.github.io/blog/2016/09/28/jump-out-of-ontology/">2. jump-out-of-ontology</a></li>
</ul>


<p>Example:</p>

<ol>
<li>Please tell us your understanding of for recycle?</li>
</ol>


<p>Your answer:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>background(question): if you try to run one method 100 times, then you should write 100 lines code to call the method, very unefficiency and easy get fault.
</span><span class='line'>
</span><span class='line'>it: for recycle can solve the problem. for recycle can let the method execute recyclly.
</span><span class='line'>    for recycle consist three parts: initial value, condition adjust, and inrease part or decrease part which can let your recycle close to the outlet.
</span><span class='line'>You: so you can write the for then first edit the initial part, then write your condition, also third part. Finally in your for body ,you 
</span><span class='line'>can write your method which need to be call many times.</span></code></pre></td></tr></table></div></figure>


<h2>what&rsquo;s the difference between X and Y(From www.rupeng.com)</h2>

<p>The worst thing while you describe something, is you try to jump the thing without stop. You need to
concentrate your picture, and describe clearly that picture carefully .</p>

<p>Final goal: clear,fluent and easy to express your idea.
One requirement: practice the conscious process</p>

<p>Technique:
1. the common characteristic between X and Y
2. how many different characteristic between X and Y? first ,&hellip; second&hellip;. third&hellip;</p>

<p>Example:</p>

<p>what&rsquo;s the difference between Windows and Linux?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Common characteristic: they are all the operate system , which can do many computing and amusement work
</span><span class='line'>
</span><span class='line'>But there are three main difference between windows and Linux：
</span><span class='line'>First, money---- Windows is charged ,While Linux is uncharged.
</span><span class='line'>Second, open source---- windows is close source, while Linux is open source.
</span><span class='line'>Third, use scenario ---- windows is orient to desktop system, while Linux is orient to server system</span></code></pre></td></tr></table></div></figure>


<h2>how to deep into the knowledge?</h2>

<ul>
<li>when you ask yourself the question about the what,when,where, how many ,how much and so on.
you can continue asking yourself about the how and why(2w deep method) to get the whole information
about the X.</li>
</ul>


<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2017/01/22/how-to-learn-one-technique/'>http://jueqingsizhe66.github.io/blog/2017/01/22/how-to-learn-one-technique/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Little Java Note]]></title>
    <link href="http://jueqingsizhe66.github.io/blog/2016/10/09/a-little-java-note/"/>
    <updated>2016-10-09T01:58:39+08:00</updated>
    <id>http://jueqingsizhe66.github.io/blog/2016/10/09/a-little-java-note</id>
    <content type="html"><![CDATA[<div align="center">目录</div>


<ul>
<li><a href="#1">1. 基础部分</a></li>
<li><a href="#2">2. 通过构造函数，构造出Natural recursion</a></li>
<li><a href="#3">3. 重新设计RemAV RemFishV RemIntV</a></li>
<li><a href="#4">4. 下一步把PieD的字段放入到对应的参数当中</a></li>
<li><a href="#5">5. 引入 this 关键字，指代访问者本身，同步修改对应的访问者类</a></li>
<li><a href="#6">6. 需要进一步提取出visitor部分的函数    </a></li>
<li><a href="#7">7. 统一bTreeVisitorI itreevisitori ttreevisitori</a></li>
<li><a href="#8">8. 重新设计RemAV RemFishV  RemIntV 为RemV(用Object替换）    </a></li>
<li><a href="#9">9. 然后现在把Remv 和Subst重新放入PieD</a></li>
<li><a href="#10">10. 紧接着 我们还想着把Remv  SubstV放入参数的位置</a></li>
<li><a href="#11">11. 紧接着我们可以进行下一步抽象   </a></li>
<li><a href="#12">12. 紧接着我们发现rem和subst代码类似 </a></li>
<li><a href="#13">13. 然后再实现Set集合类型</a></li>
<li><a href="#14">14. SetEvalV直接继承IntEvalV不合理?   </a></li>
<li><a href="#15">15. IntEvalD 和SetEvalD很多相似之处   </a></li>
<li><a href="#16">16. 根据extends使用Override增加函数的丰富性  </a></li>
</ul>


<p>视角没想到可以分成不同的classes，并在此基础上进行extends和implement，最终new通过constructors创造不同的value。两级在于基础元件和功能元件两部分。两级也可以分为extends和implements。集于一个class。</p>

<!--more-->


<p>学完<a href="http://www.ccs.neu.edu/home/matthias/BALJ/">《a little java》</a>的心得,</p>

<ol>
<li>构造函数：new通过构造函数，产生了datatype的值；构造函数由此进行了natural recursion， 并通过一个基类退出循环（详见PieD).new create values.</li>
<li>This,一般指向当前对象，但是在函数式编程中，this可能指代的是当前对象之后的所有剩余对象
&ldquo;this&#8221;指代的是自指对象 也就是函数某某的实例化对象，并且是一直不变的。Just self-referential，because this is a RemV, and it is exactly what we need to complete the job. 所以this指代函数莫某的对象</li>
<li>Top某某函数询问某种来自函数某某的forTop功能 ，并传递构造函数的fields值(properties）以及该某某函数comsumes的objects（arguments)</li>
<li>  升级版本 the method accepts a visitor(该visitor接口包含了forTop forBot抽象方法，该接口统一了不同的函数某某，所以所有函数某某统称为accept函数某某）and ask for its services， so we call it accept， 而该接口的通常实例化对象也被叫做ask， ask for services.</li>
<li>Object类型可以抽象int boolean 其他类型</li>
<li>函数的抽象大体表现为参数数据类型，返回值数据类型和函数body的具体实现。

<ol type="a">
<li>参数数据类型</li>
<li>返回值数据类型</li>
<li>body具体实现</li>
</ol>
</li>
<li>简化（简洁）、拓展性、方便</li>
<li>当我们的参数值从method变到fields，我们就没必要在反复调用对象的方法的时候 需要不断地comsume，而同时又保证了this对象，也就是不断地自指（期间不产生新的fields）所以也就是使得计算加快了。这也是this存在的原因（并且该this对象只用在访问者对象中）</li>
<li>We know that a visitorI contains one method each for the Circle, Square, and Trans variants,. And each of these methods
Consumes the fields of the respective kinds of objects(objects of types)
某某对象的某某函数，（携带函数某某和字段） 询问函数某某的for对象某某功能，（携带对象某某）
某某对象的accept携带ask并内部由 ask 的for对象某某携带对象某某组成，而for对象某某携带对象某某并内部由对象某某的accept携带当前ask对象构成。
某某对象的accept携带ask并内部由 ask 的for对象某某组成，而for对象某某携带对象某某并内部由对象某某的accept组成。</li>
</ol>


<p>在对象内部，某某对象的accept携带ask并内部由 ask 的for对象某某携带对象某某组成，而在visitor内部，for对象某某携带对象某某并内部由对象某某（也就是consumes the fields of the respective kinds of objects 占据对象类型的字段属性）的accept携带当前ask对象构成。
We don&rsquo;t specify fields in interfaces. And in 7 W hatever.
any case, we don&rsquo;t want anybody else to
see p.
This and that在对象间传递，而consume在函数间传递（Hangs over back and forth(fields 在对象间传递，而consume在函数间传递)
10. 该书包含着TLS TSS 和prolog编程的思想(因为你要理解new Top new Bot等需要有fact and rule的意识)（仔细去品尝 go to absorb) 还有就是skeleton and techniques技术
11. Extends interface,this extension produces an interface that contains all the obligations(i.e. names of methods and what they consume and produce) of shapeVisitorI and the additional one named forUnion(所以换个角度说，one class can implement many interfaces.
12. 重载override 相同的名字带着不同的输入类型
13. 点号可以读作 from   点号之前叫做from who  点号之后叫做service
14. 解释的重点是什么？？？ 要点是什么</p>

<p><img src="http://jueqingsizhe66.github.io/images/alittlejava/duichen.png" alt="duichen" /></p>

<p>什么是思考力的三要素，讲这个问题之前我们先来了解一下什么是思考思维，首先思考是思维的一种探索活动，而在思维过程中产生的一种具有积极性和创造性的作用力这种就是思考力。据物理学理解，思考力具有三个基本要素：分别为大小、方向、作用点。思考力同样也离不开三个基本要素：分别为大小、方向、作用点。</p>

<ol>
<li>大小 ——思考力首先取决于思考者掌握的关于思考对象的知识和信息量（大小），如果没有相关的知识和信息，就不可能产生相关的思考活动。一般情况下，知识量和信息量越大，思考就越加具体、全面和完整，从而决定了思考的维度。</li>
<li>方向 ——我们这里所说的思考有别于妄想和幻想，而是一种有目的性和有计划性的思维活动，因此，这种思考需要有一定的价值导向，也就是思路——体现为目的性、方向性和一致性。漫无目的地思考难以发挥强有力的思考力，常常会把思考引进死胡同，导致思路夭折和无果而终。目的性、方向性、一致性和价值导向，决定着思考的角度和向度。</li>
<li>作用点 ——必须把思考集中在特定的对象上，并把握其中的关键点，这样的思考就会势如破竹。如果找不准思考的着力点，就会精力分散、思维紊乱、胡思乱想，出现东一榔头西一棒的现象。思考就会停留在事物的表面上浮光掠影，无法深刻认识事物的本质。思考在作用点上的集中性程度，决定着思考的强度和力度(广度和深度）。</li>
</ol>


<h3 id="1">基础部分</h3>


<p>理解分层。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">KebabD</span><span class="o">(</span><span class="n">chapter2</span><span class="o">)</span> <span class="err">烤肉</span>
</span><span class='line'>    <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>    <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Holder</span> <span class="err">烤肉摆放工具</span>
</span><span class='line'>            <span class="n">Object</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Holder</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Shallot</span>  <span class="err">葱</span>
</span><span class='line'>            <span class="n">KebabD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Shallot</span><span class="o">(</span><span class="n">KebabD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Shrimp</span> <span class="err">虾</span>
</span><span class='line'>            <span class="n">KebabD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Shrimp</span> <span class="o">(</span><span class="n">KebabD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Radish</span> <span class="err">萝卜</span>
</span><span class='line'>            <span class="n">KebabD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Radish</span> <span class="o">(</span><span class="n">KebabD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Pepper</span> <span class="err">胡椒粉</span>
</span><span class='line'>            <span class="n">KebabD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Pepper</span> <span class="o">(</span><span class="n">KebabD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Zucchini</span> <span class="err">西葫芦</span>
</span><span class='line'>            <span class="n">KebabD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Zucchini</span> <span class="o">(</span><span class="n">KebabD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">isVeggie</span><span class="o">();</span>
</span><span class='line'>            <span class="n">whatHolder</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">RodD</span><span class="o">(</span><span class="n">chapter2</span><span class="o">)</span> <span class="err">杆</span>  <span class="err">将烤肉串起来工具</span><span class="o">(</span><span class="err">烤肉摆放方式</span><span class="mi">1</span><span class="err">）</span>
</span><span class='line'>    <span class="n">Dagger</span> <span class="err">匕首</span>
</span><span class='line'>    <span class="n">Sabre</span> <span class="err">军刀</span>
</span><span class='line'>    <span class="n">Sword</span> <span class="err">剑</span>
</span><span class='line'>
</span><span class='line'><span class="n">PlateD</span><span class="o">(</span><span class="n">chapter2</span><span class="o">)</span> <span class="err">盘子</span>  <span class="err">（烤肉摆放方式</span><span class="mi">2</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Gold</span> <span class="err">金盘子</span>
</span><span class='line'>    <span class="n">Silver</span>
</span><span class='line'>    <span class="n">Brass</span> <span class="err">黄铜盘子</span>
</span><span class='line'>    <span class="n">Copper</span> <span class="err">镀铜盘子</span>
</span><span class='line'>    <span class="n">Wood</span>   <span class="err">木盘子</span>
</span><span class='line'>
</span><span class='line'><span class="n">PointD</span><span class="o">(</span><span class="n">chapter1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span> <span class="err">点</span>
</span><span class='line'>    <span class="n">distanceTo0</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span> <span class="c1">//可以把它们移入到构造函数中</span>
</span><span class='line'>    <span class="n">closerTo0</span><span class="o">();</span>
</span><span class='line'>        <span class="n">CartesianPt</span> <span class="err">笛卡尔坐标</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">CartesianPt</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span>
</span><span class='line'>            <span class="n">distanceTo0</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Closeto0</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ManhattenPt</span> <span class="err">曼哈顿坐标</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">ManhattenPt</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span>
</span><span class='line'>            <span class="n">distanceTo0</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Closeto0</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">圆柱坐标系</span>
</span><span class='line'>        <span class="err">球坐标系</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PizzaD</span><span class="err">（</span><span class="n">chapter3</span><span class="o">,</span><span class="mi">4</span><span class="err">）</span>
</span><span class='line'>    <span class="n">remA</span> <span class="err">去除比萨饼的凤尾鱼订料（防止过咸）</span>
</span><span class='line'>    <span class="n">topAwC</span><span class="o">()</span> <span class="err">在凤尾鱼顶料加上奶酪顶料（盖住咸味）</span>
</span><span class='line'>    <span class="n">subAbC</span><span class="o">()</span> <span class="err">将所有的凤尾鱼顶料换成奶酪顶料</span>
</span><span class='line'>        <span class="n">Crust</span> <span class="err">面包皮</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Cheese</span>  <span class="err">奶酪</span>
</span><span class='line'>            <span class="n">pizzaD</span>
</span><span class='line'>            <span class="nf">Cheese</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Olive</span>   <span class="err">橄榄</span>
</span><span class='line'>            <span class="n">pizzaD</span>
</span><span class='line'>            <span class="nf">Olive</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Anchovy</span> <span class="err">凤尾鱼</span>
</span><span class='line'>            <span class="n">pizzaD</span>
</span><span class='line'>            <span class="nf">Anchovy</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Sausage</span> <span class="err">香肠</span>
</span><span class='line'>            <span class="n">pizzaD</span>
</span><span class='line'>            <span class="nf">Sausage</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Spinach</span> <span class="err">菠菜</span>
</span><span class='line'>            <span class="n">pizzaD</span>
</span><span class='line'>            <span class="nf">Spinach</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAbC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Shape</span>
</span><span class='line'>
</span><span class='line'><span class="nf">Shish</span><span class="o">(</span><span class="n">chapter2</span><span class="err">，</span><span class="mi">4</span><span class="o">)</span> <span class="err">羊肉串</span>
</span><span class='line'>    <span class="n">onlyOnions</span><span class="o">();</span>
</span><span class='line'>    <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Skew</span> <span class="err">架子</span> <span class="err">烤肉叉子</span>
</span><span class='line'>        <span class="n">Onion</span> <span class="err">洋葱</span>
</span><span class='line'>        <span class="n">Lamb</span>  <span class="err">羔羊肉</span>
</span><span class='line'>        <span class="n">Tomato</span> <span class="err">西红柿</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">Tree</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nf">SeasoningD</span> <span class="o">(</span><span class="n">chapter1</span><span class="o">)</span> <span class="err">调味品</span>
</span><span class='line'>    <span class="n">Sage</span><span class="o">(</span><span class="err">鼠尾草</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Pepper</span>
</span><span class='line'>    <span class="n">Salt</span>
</span><span class='line'>    <span class="nf">Thyme</span><span class="o">(</span><span class="err">百里香</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">NumD</span> <span class="o">(</span><span class="n">chapter1</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Zero</span>
</span><span class='line'>    <span class="n">OneMoreThan</span>
</span><span class='line'>
</span><span class='line'><span class="n">LayerD</span>
</span><span class='line'>    <span class="n">Base</span>
</span><span class='line'>    <span class="n">Slice</span>
</span><span class='line'>
</span><span class='line'><span class="n">FruitD</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>第二条建议</strong></p>

<pre><code>When writing a function over a datatype,
place a method in each of the variants that make up the datatype.
If a field of a variant belongs to the same datatype,
the method may call the corresponding method of the field in
computing the function.（疑问子类 每继承一次父类 都得重写三个父类的抽象函数 有点费事。。 ----那么访问者模式到底是如何解决的？）
</code></pre>

<p><strong>第八条建议</strong></p>

<pre><code>When extending a class, use overriding
to enrich its functionality.
</code></pre>

<p>根据以上建议， LtdSubstV 可以直接在 SubstV 类上进行继承和扩展。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Shish</span><span class="o">(</span><span class="n">chapter2</span><span class="err">，</span><span class="mi">4</span><span class="o">)</span> <span class="err">羊肉串</span>
</span><span class='line'>   <span class="n">OnlyOnionsV</span>
</span><span class='line'>   <span class="n">IsVegetarianV</span>
</span><span class='line'>   <span class="nf">onlyOnions</span><span class="o">();</span>
</span><span class='line'>   <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Skew</span> <span class="err">架子</span> <span class="err">烤肉叉子</span>
</span><span class='line'>            <span class="n">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Onion</span> <span class="err">洋葱</span>
</span><span class='line'>            <span class="n">ShishD</span>
</span><span class='line'>            <span class="nf">Onion</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Lamb</span>  <span class="err">羔羊肉</span>
</span><span class='line'>            <span class="n">ShishD</span>
</span><span class='line'>            <span class="nf">Lamb</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Tomato</span> <span class="err">西红柿</span>
</span><span class='line'>            <span class="n">ShishD</span>
</span><span class='line'>            <span class="nf">Tomato</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">OnlyOnionsV</span>
</span><span class='line'>    <span class="nf">forSkew</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forOnion</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forLamb</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forTomato</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">isVegetatianV</span>
</span><span class='line'>    <span class="nf">forSkew</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forOnion</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forLamb</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forTomato</span><span class="o">(</span><span class="n">ShishD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ShishD</span>
</span><span class='line'>   <span class="n">OnlyOionsV</span> <span class="n">ooFn</span>
</span><span class='line'>   <span class="n">IsVegeterian</span> <span class="n">ivFn</span>
</span><span class='line'>   <span class="nf">onlyOnions</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>   <span class="n">isVegetarian</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Skew</span>
</span><span class='line'>            <span class="nf">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Onion</span>
</span><span class='line'>            <span class="nf">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Lamb</span>
</span><span class='line'>            <span class="nf">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Tomato</span>
</span><span class='line'>            <span class="nf">onlyOnions</span><span class="o">();</span>
</span><span class='line'>            <span class="n">isVegetarian</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<h3 id="2">通过构造函数，构造出Natural recursion部分，形成递归，递归出口为skew</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RemAV</span>
</span><span class='line'>    <span class="nf">forCurst</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forCheese</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forOlive</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forAnchovy</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSausage</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">TopAwCV</span>
</span><span class='line'>    <span class="nf">forCurst</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forCheese</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forOlive</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forAnchovy</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSausage</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">SubAbCV</span>
</span><span class='line'>    <span class="nf">forCurst</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forCheese</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forOlive</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forAnchovy</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSausage</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PizzaD</span>
</span><span class='line'>   <span class="n">RemAV</span> <span class="n">remFn</span>
</span><span class='line'>   <span class="n">TopAwCV</span> <span class="n">topFn</span>
</span><span class='line'>   <span class="n">SubAbCV</span>  <span class="n">subFn</span>
</span><span class='line'>   <span class="nf">remA</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>   <span class="n">topAwC</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>   <span class="n">subAbC</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Crust</span>
</span><span class='line'>            <span class="nf">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAwC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Cheese</span>
</span><span class='line'>            <span class="n">PizzaD</span>
</span><span class='line'>            <span class="nf">Cheese</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAwC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Olive</span>
</span><span class='line'>            <span class="n">PizzaD</span>
</span><span class='line'>            <span class="nf">Olive</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAwC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Anchovy</span>
</span><span class='line'>            <span class="n">PizzaD</span>
</span><span class='line'>            <span class="nf">Anchovy</span><span class="o">(</span><span class="n">PizzaD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAwC</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Sausage</span>
</span><span class='line'>            <span class="n">PizzaD</span>
</span><span class='line'>            <span class="nf">Sausage</span><span class="o">(</span><span class="n">PizzaD</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">topAwC</span><span class="o">();</span>
</span><span class='line'>            <span class="n">subAwC</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="n">RemAV</span> <span class="n">raFn</span>
</span><span class='line'>    <span class="n">RemFish</span> <span class="n">rfFn</span>
</span><span class='line'>    <span class="nf">remA</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FishD</span>
</span><span class='line'>    <span class="n">Salmon</span> <span class="err">鲑鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Anchovy</span> <span class="err">凤尾鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Tuna</span>  <span class="err">金枪鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">RemAV</span>
</span><span class='line'>    <span class="n">forBot</span>
</span><span class='line'>    <span class="nf">fotTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'><span class="n">RemFishV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">FishD</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">,</span>  <span class="n">FishD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">RemIntV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">pieD</span><span class="o">,</span> <span class="n">Integer</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="3">重新设计RemAV RemFishV  RemIntV 为RemV(用Object替换）</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RemV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">pieD</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="4">下一步把PieD的字段放入到对应的参数当中</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">PieD</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="n">PieD</span> <span class="nf">rem</span><span class="o">(</span><span class="n">RemV</span> <span class="n">remFn</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">abstract</span> <span class="n">PieD</span> <span class="nf">subst</span><span class="o">(</span><span class="n">SubstV</span> <span class="n">substFn</span><span class="o">,</span> <span class="n">Object</span> <span class="n">n</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Subst</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Bot</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="5">引入 this 关键字，指代访问者本身，同步修改对应的访问者类。</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">(</span><span class="n">Remv</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Subst</span><span class="o">(</span><span class="n">Subst</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Top</span>
</span><span class='line'>            <span class="n">Rem</span>
</span><span class='line'>            <span class="n">Subst</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="n">Bot</span>
</span><span class='line'>            <span class="n">Rem</span>
</span><span class='line'>            <span class="n">Subst</span>
</span></code></pre></td></tr></table></div></figure>


<h3 id="6">需要进一步提取出visitor部分的函数</h3>


<p>这样就可以把所有</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieVisitorI</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Remv</span>
</span><span class='line'>            <span class="nf">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">();</span>
</span><span class='line'>        <span class="n">SubstV</span>
</span><span class='line'>            <span class="nf">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">pieD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Accept</span><span class="o">(</span><span class="n">pieVisitorI</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="nf">Accept</span><span class="o">(</span><span class="n">pieVisitorI</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">FruitD</span>
</span><span class='line'>    <span class="n">Peach</span>
</span><span class='line'>    <span class="n">Apple</span>
</span><span class='line'>    <span class="n">Pear</span>
</span><span class='line'>    <span class="n">Lemon</span>
</span><span class='line'>    <span class="n">Fig</span> <span class="err">无花果</span>
</span><span class='line'>
</span><span class='line'><span class="n">TreeD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">bTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Accept</span><span class="o">(</span><span class="n">iTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Accept</span><span class="o">(</span><span class="n">tTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bub</span> <span class="err">芽</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">bTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">iTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">tTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Flat</span> <span class="err">平顶</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="nf">Flat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">bTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">iTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">tTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Split</span> <span class="err">分枝</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="nf">Split</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">bTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">iTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">tTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">bTreeVisitorI</span>
</span><span class='line'>    <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bIsFlatV</span> <span class="kd">implements</span> <span class="n">bTreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bIsSplitV</span> <span class="kd">implements</span> <span class="n">bTreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bHasFruitV</span> <span class="kd">implements</span> <span class="n">bTreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">iTreeVisitorI</span>
</span><span class='line'>    <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">iHeightV</span> <span class="kd">implements</span> <span class="n">iTreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">iOccursV</span> <span class="kd">implements</span> <span class="n">iTreeVisitorI</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="nf">iOccursV</span><span class="o">(</span><span class="n">FruitD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">tTreeVisitorI</span>
</span><span class='line'>    <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">tSubstV</span> <span class="kd">implements</span> <span class="n">tTreeVisitorI</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="nf">tSubstV</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">FruitD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>         <span class="n">iOccursV</span> <span class="kd">implements</span> <span class="n">tTreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<h3 id="7">为了统一bTreeVisitorI 和 iTreeVisitorI   tTreeVisitorI</h3>


<p>（三个的不同就在于返回值分别为 boolean   int   treeD)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">TreeVisitorI</span>
</span><span class='line'>    <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">);</span>
</span><span class='line'>         <span class="n">IsFlatV</span> <span class="kd">implements</span> <span class="n">TreeVisitorI</span>
</span><span class='line'>            <span class="nf">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="n">OccursV</span> <span class="kd">implements</span> <span class="n">TreeVisitorI</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="nf">OccursV</span><span class="o">(</span><span class="n">FruitD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBud</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forFlat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forSplit</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>        <span class="kd">class</span> <span class="nc">OccursV</span> <span class="kd">implements</span> <span class="n">TreeVisitorI</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">FruitD</span> <span class="n">a</span><span class="o">;</span>
</span><span class='line'>            <span class="n">OccursV</span><span class="o">(</span><span class="n">FruitD</span> <span class="n">_a</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">a</span> <span class="o">=</span> <span class="n">_a</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">forBud</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">Object</span> <span class="nf">forFlat</span><span class="o">(</span><span class="n">FruitD</span> <span class="n">f</span><span class="o">,</span> <span class="n">TreeD</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">a</span><span class="o">))</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(((</span><span class="n">Integer</span><span class="o">)(</span><span class="n">t</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">this</span><span class="o">))).</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">t</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="kd">public</span> <span class="kt">int</span> <span class="nf">forSplit</span><span class="o">(</span><span class="n">TreeD</span> <span class="n">l</span><span class="o">,</span> <span class="n">TreeD</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="k">new</span> <span class="nf">Integer</span><span class="o">(((</span><span class="n">Integer</span><span class="o">)(</span><span class="n">l</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">this</span><span class="o">))).</span><span class="na">intValue</span><span class="o">()</span>
</span><span class='line'>                                   <span class="o">+</span>
</span><span class='line'>                                   <span class="o">((</span><span class="n">Integer</span><span class="o">)(</span><span class="n">r</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">this</span><span class="o">))).</span><span class="na">intValue</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">TreeD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">TreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bub</span> <span class="err">芽</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">TreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Flat</span> <span class="err">平顶</span>
</span><span class='line'>            <span class="n">FruitD</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="nf">Flat</span><span class="o">(</span><span class="n">FruitD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">TreeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Split</span> <span class="err">分枝</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="n">TreeD</span>
</span><span class='line'>            <span class="nf">Split</span><span class="o">(</span><span class="n">TreeD</span><span class="o">,</span> <span class="n">TreeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">tTreeVisitorI</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="n">RemAV</span> <span class="n">raFn</span>
</span><span class='line'>    <span class="n">RemFish</span> <span class="n">rfFn</span>
</span><span class='line'>    <span class="nf">remA</span><span class="o">()</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>    <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">)</span><span class="n">a</span><span class="o">;</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">remA</span><span class="o">();</span>
</span><span class='line'>            <span class="n">remFish</span><span class="o">(</span><span class="n">FishD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">FishD</span>
</span><span class='line'>    <span class="n">Salmon</span> <span class="err">鲑鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Anchovy</span> <span class="err">凤尾鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Tuna</span>  <span class="err">金枪鱼</span>
</span><span class='line'>    <span class="n">Equals</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">RemAV</span>
</span><span class='line'>    <span class="n">forBot</span>
</span><span class='line'>    <span class="nf">fotTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'><span class="n">RemFishV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">FishD</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">,</span>  <span class="n">FishD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">RemIntV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">pieD</span><span class="o">,</span> <span class="n">Integer</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<h3 id="8">重新设计RemAV RemFishV  RemIntV 为RemV(用Object替换）</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">RemV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">pieD</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="n">RemV</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">SubstFishV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">FishD</span><span class="o">,</span> <span class="n">FishD</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="o">,</span> <span class="n">PieD</span><span class="o">,</span> <span class="n">FishD</span><span class="o">,</span> <span class="n">FishO</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">SubstIntV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">Int</span><span class="o">,</span> <span class="n">Int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="o">,</span> <span class="n">PieD</span><span class="o">,</span> <span class="n">Int</span><span class="o">,</span> <span class="n">Int</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">SubstV</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="o">,</span> <span class="n">PieD</span><span class="o">,</span> <span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="9">然后现在把Remv 和Subst重新放入PieD</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="n">Remv</span>
</span><span class='line'>    <span class="n">SubstV</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Subst</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<h3 id="9">紧接着 我们还想着把Remv  SubstV放入参数的位置</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">(</span><span class="n">Remv</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Subst</span><span class="o">(</span><span class="n">SubstV</span><span class="o">,</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Rem</span><span class="o">(</span><span class="n">Renv</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">Substv</span><span class="o">,</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">(</span><span class="n">RemV</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">Substv</span><span class="o">,</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<h3 id="10">紧接着我们进一步比较RemV SubstV的实现(我们就得重新修改rem和subst了)</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">class</span> <span class="nc">RemV</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">o</span><span class="o">;</span>
</span><span class='line'>    <span class="n">RemV</span><span class="o">(</span><span class="n">Object</span> <span class="n">_o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">=</span> <span class="n">_o</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Bot</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="n">t</span><span class="o">,</span> <span class="n">PieD</span> <span class="n">r</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="na">rem</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">rem</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">RemV</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Bot</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="n">t</span><span class="o">,</span> <span class="n">PieD</span> <span class="n">r</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="na">rem</span><span class="o">(</span><span class="n">o</span><span class="o">);</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">rem</span><span class="o">(</span><span class="n">o</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">class</span> <span class="nc">SubstV</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span> <span class="n">n</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">Bot</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forTop</span> <span class="o">(</span><span class="n">Object</span> <span class="n">t</span><span class="o">,</span> <span class="n">PieD</span> <span class="n">r</span><span class="o">,</span> <span class="n">Object</span> <span class="n">n</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">subst</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">o</span><span class="o">));</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">subst</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">SubstV</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">n</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">o</span><span class="o">;</span>
</span><span class='line'>    <span class="n">SubstV</span><span class="o">(</span><span class="n">Object</span> <span class="n">_n</span><span class="o">,</span> <span class="n">Object</span> <span class="n">_o</span><span class="o">){</span>
</span><span class='line'>        <span class="n">n</span> <span class="o">=</span> <span class="n">_n</span><span class="o">;</span>
</span><span class='line'>        <span class="n">o</span> <span class="o">=</span> <span class="n">_o</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forBot</span><span class="o">(</span><span class="n">Object</span> <span class="n">n</span><span class="o">,</span> <span class="n">Object</span> <span class="n">o</span><span class="o">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Bot</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="n">PieD</span> <span class="nf">forTop</span><span class="o">(</span><span class="n">Object</span> <span class="n">t</span><span class="o">,</span> <span class="n">PieD</span> <span class="n">r</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">o</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">t</span><span class="o">))</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">subst</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">new</span> <span class="nf">Top</span><span class="o">(</span><span class="n">t</span><span class="o">,</span> <span class="n">r</span><span class="o">.</span><span class="na">subst</span><span class="o">(</span><span class="k">this</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="11">紧接着我们可以进行下一步抽象</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Rem</span><span class="o">(</span><span class="n">RemV</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Subst</span><span class="o">(</span><span class="n">SubstV</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">(</span><span class="n">RemV</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">SubstV</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Bot</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Rem</span><span class="o">(</span><span class="n">RemV</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Subst</span><span class="o">(</span><span class="n">SubstV</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="12">紧接着我们发现rem和subst代码类似</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieVisitorI</span>
</span><span class='line'>    <span class="n">forBot</span>
</span><span class='line'>    <span class="n">forTop</span>
</span><span class='line'>        <span class="n">RemV</span> <span class="n">implement</span> <span class="n">PieVisitorI</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">RemV</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="err">）</span>
</span><span class='line'>        <span class="n">SubstV</span> <span class="n">implement</span> <span class="n">PieVisitorI</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">SubstV</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="err">）</span>
</span><span class='line'>        <span class="n">LtdSubstV</span> <span class="n">implement</span> <span class="n">PieVisitorI</span>
</span><span class='line'>            <span class="kt">int</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">LtdSubstV</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span> <span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="err">）</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bob</span>
</span><span class='line'>            <span class="nf">Accept</span><span class="o">(</span><span class="n">pieVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ExprVisitorI</span>
</span><span class='line'>
</span><span class='line'><span class="n">ExprVisitorI</span>
</span><span class='line'>    <span class="nf">forPlus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forDiff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forProd</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forConst</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IntEvalV</span> <span class="kd">implements</span>  <span class="n">ExprVisitorI</span>
</span><span class='line'>            <span class="nf">forPlus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forDiff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forProd</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forConst</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ExprD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">ExprVisitorI</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Plus</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="nf">Plus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ExprVisitorI</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Diff</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="nf">Diff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ExprVisitorI</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Prod</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="n">ExprD</span>
</span><span class='line'>            <span class="nf">Prod</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ExprVisitorI</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ConstD</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">ConstD</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ExprVisitorI</span><span class="o">);</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3 id="13">然后再实现Set集合的类型</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SetD</span>
</span><span class='line'>    <span class="nf">Add</span><span class="o">(</span><span class="n">integer</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Mem</span><span class="o">(</span><span class="n">integer</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Plus</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Diff</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Prod</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">Empty</span>
</span><span class='line'>            <span class="nf">Mem</span><span class="o">(</span><span class="n">integer</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Plus</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">Add</span>
</span><span class='line'>            <span class="n">Integer</span><span class="o">;</span>
</span><span class='line'>            <span class="n">SetD</span><span class="o">;</span>
</span><span class='line'>            <span class="n">Add</span><span class="o">(</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Integer</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Mem</span><span class="o">(</span><span class="n">integer</span> <span class="n">i</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Plus</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">SetD</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ExprVisitorI</span>
</span><span class='line'>    <span class="nf">forPlus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forDiff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forProd</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forConst</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>        <span class="n">IntEvalV</span> <span class="kd">implements</span>  <span class="n">ExprVisitorI</span>
</span><span class='line'>            <span class="nf">forPlus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forDiff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forProd</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>            <span class="n">forConst</span><span class="o">(</span><span class="n">Object</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>                <span class="n">SetEvalV</span> <span class="kd">implements</span> <span class="n">IntEvalV</span>
</span><span class='line'>                    <span class="nf">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="14">SetEvalV 直接集成IntEvalV不合理？</h3>


<p>从SetEvalV 和IntEvalV抽取出一个基类</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">EvalD</span> <span class="kd">implements</span> <span class="n">ExprVisitorI</span>
</span><span class='line'>    <span class="nf">forPlus</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forDiff</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forProd</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">forConst</span><span class="o">(</span><span class="n">ExprD</span><span class="o">,</span> <span class="n">ExprD</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">IntEvalD</span>
</span><span class='line'>            <span class="nf">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span>     <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">SetEvalD</span>
</span><span class='line'>            <span class="nf">Plus</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Diff</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Prod</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>




<h3 id="15">IntEvalD 和SetEvalD很多相似之处</h3>


<p>于是我们进一步提取</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SubstD</span> <span class="kd">implements</span> <span class="n">pieVisitorI</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="nf">SubstD</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forBot</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span>
</span><span class='line'><span class="n">SubstV</span>
</span><span class='line'>    <span class="nf">SubstV</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'><span class="n">LtdSubstV</span>
</span><span class='line'>    <span class="kt">int</span>
</span><span class='line'>    <span class="nf">LtdSubstV</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="16">根据extends使用override增加函数的丰富性</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">SubstV</span> <span class="kd">implements</span> <span class="n">PieVisitorI</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="nf">SubstV</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forBot</span><span class="o">()</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">LtdSubstV</span>
</span><span class='line'>    <span class="n">Int</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="n">Object</span>
</span><span class='line'>    <span class="nf">LtdSubstV</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span> <span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>原来，抽象类可以有构造方法.抽象类只要有一个abstract函数就可以叫做抽象类
抽象类可以有构造方法，构造方法不可继承，但是可以供子类用super（）或者super（参数，参数。。。。）调用。
构造函数是对象的基本，没有构造函数就没有对象。
若果在父类中（这里就是你的抽象类）中显示的写了又参数的构造函数，在子类继承是就必须写一个构造函数来调用父类的构造函数。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PointD</span>
</span><span class='line'><span class="nf">PointD</span><span class="o">(</span><span class="n">chapter1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span> <span class="err">点</span>
</span><span class='line'>    <span class="n">distanceTo0</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span> <span class="c1">//可以把它们移入到构造函数中</span>
</span><span class='line'>    <span class="n">closerTo0</span><span class="o">();</span>
</span><span class='line'>    <span class="n">PointD</span> <span class="nf">minus</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>    <span class="kt">int</span> <span class="nf">moveBy</span><span class="o">(</span><span class="kt">int</span> <span class="o">,</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>        <span class="n">CartesianPt</span> <span class="err">笛卡尔坐标</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">CartesianPt</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span>
</span><span class='line'>            <span class="n">distanceTo0</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Closeto0</span><span class="o">();</span>
</span><span class='line'>        <span class="n">ManhattenPt</span> <span class="err">曼哈顿坐标</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">ManhattenPt</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span><span class="kt">int</span><span class="o">);</span>
</span><span class='line'>            <span class="n">distanceTo0</span><span class="o">();</span>
</span><span class='line'>            <span class="n">Closeto0</span><span class="o">();</span>
</span><span class='line'>        <span class="err">圆柱坐标系</span>
</span><span class='line'>        <span class="err">球坐标系</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ShadowedCartesia</span>
</span><span class='line'>    <span class="n">Int</span>
</span><span class='line'>    <span class="n">Int</span>
</span><span class='line'>    <span class="nf">ShadowedCartesia</span><span class="o">(</span><span class="kt">int</span><span class="o">,</span> <span class="kt">int</span><span class="o">,</span> <span class="kt">int</span><span class="o">,</span> <span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">distanceTo0</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">shapeVisitorI</span>
</span><span class='line'>    <span class="nf">forCircle</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forSquare</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>    <span class="n">forTrans</span><span class="o">(</span><span class="n">pointD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>    <span class="n">UnionVisitorI</span>
</span><span class='line'>    <span class="nf">forUnion</span><span class="o">(</span><span class="n">ShapeD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>        <span class="n">HasPtV</span> <span class="kd">implements</span> <span class="n">ShapeVisitorI</span>
</span><span class='line'>            <span class="n">PointD</span>
</span><span class='line'>            <span class="nf">HasPt</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forCircle</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forSquare</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forTrans</span><span class="o">(</span><span class="n">PointD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>        <span class="n">UnionHasPtV</span> <span class="kd">implements</span> <span class="n">ShapeVisitorI</span>
</span><span class='line'>            <span class="nf">UnionHasPtV</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forUnion</span><span class="o">(</span><span class="n">ShapeD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="k">new</span> <span class="n">HasPtV</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">q</span><span class="o">)));</span>
</span><span class='line'>        <span class="n">HasPtV</span> <span class="kd">implements</span> <span class="n">ShapeVisitorI</span>
</span><span class='line'>            <span class="n">PointD</span>
</span><span class='line'>            <span class="nf">HasPt</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">ShapeVisitorI</span> <span class="nf">newHasPt</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forCircle</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forSquare</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forTrans</span><span class="o">(</span><span class="n">PointD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>        <span class="n">UnionHasPtV</span> <span class="kd">implements</span> <span class="n">unionVisitorI</span>
</span><span class='line'>            <span class="nf">UnionHasPtV</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">ShapeVisitorI</span> <span class="nf">newHasPt</span><span class="o">(</span><span class="n">PointD</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>            <span class="n">forUnion</span><span class="o">(</span><span class="n">ShapeD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">newHasPtV</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">minus</span><span class="o">(</span><span class="n">q</span><span class="o">)));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ShapeD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">ShapeVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Circle</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">Circle</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ShapeVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">Square</span>
</span><span class='line'>            <span class="n">Int</span>
</span><span class='line'>            <span class="nf">Square</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ShapeVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">Trans</span>
</span><span class='line'>            <span class="n">PointD</span>
</span><span class='line'>            <span class="n">ShapeD</span>
</span><span class='line'>            <span class="nf">Trans</span><span class="o">(</span><span class="kt">int</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">ShapeVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">Union</span>
</span><span class='line'>            <span class="n">ShapeD</span>
</span><span class='line'>            <span class="n">ShapeD</span>
</span><span class='line'>            <span class="nf">Union</span><span class="o">(</span><span class="n">ShapeD</span><span class="o">,</span> <span class="n">ShapeD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accetp</span><span class="o">(</span><span class="n">ShapeVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3 id="16">newHasPt和HasPtV are eta reduction</h3>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PieManI</span>
</span><span class='line'>    <span class="n">Int</span> <span class="nf">addTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Int</span> <span class="nf">remTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Int</span> <span class="nf">substTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>    <span class="n">Int</span> <span class="nf">occTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieManM</span> <span class="kd">implements</span> <span class="n">PieManI</span>
</span><span class='line'>    <span class="n">PieD</span>
</span><span class='line'>    <span class="nf">addTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span> <span class="n">_o</span>
</span><span class='line'>    <span class="n">remTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>    <span class="n">substTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>    <span class="n">occTop</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PieVisitorI</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">();</span>
</span><span class='line'>    <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>        <span class="n">OccursV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">OccursV</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">()</span><span class="n">_o</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">SubstV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">SubstV</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">();</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">RemV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">RemV</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">PieD</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">PieD</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieVisitorI</span>
</span><span class='line'>    <span class="nf">forBot</span><span class="o">(</span><span class="n">Bot</span><span class="o">)</span>
</span><span class='line'>    <span class="n">foTop</span><span class="o">(</span><span class="n">Top</span><span class="o">)</span>
</span><span class='line'>        <span class="n">OccursV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">OccursV</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">(</span><span class="n">Bot</span> <span class="n">that</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Top</span> <span class="n">that</span><span class="o">)</span>
</span><span class='line'>        <span class="n">SubstV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">SubstV</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">(</span><span class="n">Bot</span> <span class="n">that</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forTop</span><span class="o">(</span><span class="n">Top</span> <span class="n">That</span><span class="o">)</span>
</span><span class='line'>        <span class="n">RemV</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">RemV</span><span class="o">(</span><span class="n">Object</span><span class="o">)</span>
</span><span class='line'>            <span class="n">forBot</span><span class="o">(</span><span class="n">Bot</span> <span class="n">that</span><span class="o">)</span>
</span><span class='line'>            <span class="n">fotTop</span><span class="o">(</span><span class="n">Top</span> <span class="n">that</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PieD</span>
</span><span class='line'>    <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span>
</span><span class='line'>        <span class="n">Bot</span>
</span><span class='line'>            <span class="nf">Accept</span><span class="o">(</span><span class="n">PieVisitorI</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>        <span class="n">Top</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="n">Object</span>
</span><span class='line'>            <span class="nf">Top</span><span class="o">(</span><span class="n">Object</span><span class="o">,</span> <span class="n">Objct</span><span class="o">)</span>
</span><span class='line'>            <span class="n">Accept</span><span class="o">(</span><span class="n">PieVisitor</span><span class="o">)</span><span class="n">_o</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><strong>每天你只能不断去思考 事情的要点和第一步和第二步 才能取得进步.</strong></p>

<p>What’s the point of the visitor pattern? What’s the point of the software design?</p>

<ul>
<li>亮点</li>
<li>突破点，并按照一定的方向。。</li>
<li>关键点</li>
</ul>


<p><img src="http://jueqingsizhe66.github.io/images/alittlejava/closure.png" alt="closure" /></p>

<p><strong>Closure(Closure(this))</strong></p>

<p>具体java源代码参考<a href="https://github.com/jueqingsizhe66/ALittleJava">the little java</a></p>

<p class='post-footer'>
                        原始地址:<a href='http://jueqingsizhe66.github.io/blog/2016/10/09/a-little-java-note/'>http://jueqingsizhe66.github.io/blog/2016/10/09/a-little-java-note/</a><br/>&nbsp;written by <a href='http://jueqingsizhe66.github.io'>Ye Zhaoliang</a>&nbsp;posted at <a href='http://jueqingsizhe66.github.io'>http://jueqingsizhe66.github.io</a></p>

]]></content>
  </entry>
  
</feed>
